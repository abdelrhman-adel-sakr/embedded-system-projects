
Control_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002a2e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002a  00800060  00002a2e  00002ac2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000009  0080008a  0080008a  00002aec  2**0
                  ALLOC
  3 .stab         00002ed4  00000000  00000000  00002aec  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000018e9  00000000  00000000  000059c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000072a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000073e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00007559  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  000091a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000a08d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000ae3c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000af9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000b229  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b9f7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 cc 08 	jmp	0x1198	; 0x1198 <__vector_4>
      14:	0c 94 99 08 	jmp	0x1132	; 0x1132 <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 66 08 	jmp	0x10cc	; 0x10cc <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 33 08 	jmp	0x1066	; 0x1066 <__vector_9>
      28:	0c 94 00 08 	jmp	0x1000	; 0x1000 <__vector_10>
      2c:	0c 94 cd 07 	jmp	0xf9a	; 0xf9a <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e2       	ldi	r30, 0x2E	; 46
      68:	fa e2       	ldi	r31, 0x2A	; 42
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 38       	cpi	r26, 0x8A	; 138
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	aa e8       	ldi	r26, 0x8A	; 138
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a3 39       	cpi	r26, 0x93	; 147
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <main>
      8a:	0c 94 15 15 	jmp	0x2a2a	; 0x2a2a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 de 14 	jmp	0x29bc	; 0x29bc <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 fa 14 	jmp	0x29f4	; 0x29f4 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 ea 14 	jmp	0x29d4	; 0x29d4 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 06 15 	jmp	0x2a0c	; 0x2a0c <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 ea 14 	jmp	0x29d4	; 0x29d4 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 06 15 	jmp	0x2a0c	; 0x2a0c <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 de 14 	jmp	0x29bc	; 0x29bc <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 fa 14 	jmp	0x29f4	; 0x29f4 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 ea 14 	jmp	0x29d4	; 0x29d4 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 06 15 	jmp	0x2a0c	; 0x2a0c <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 ea 14 	jmp	0x29d4	; 0x29d4 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 06 15 	jmp	0x2a0c	; 0x2a0c <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 ea 14 	jmp	0x29d4	; 0x29d4 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 06 15 	jmp	0x2a0c	; 0x2a0c <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 ee 14 	jmp	0x29dc	; 0x29dc <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 0a 15 	jmp	0x2a14	; 0x2a14 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <PWM_Timer0_Start>:
#include"common_macros.h"
#include<avr/io.h>
#include"std_types.h"
#include"gpio.h"

void PWM_Timer0_Start(uint8 duty_cycle){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	0f 92       	push	r0
     b4c:	cd b7       	in	r28, 0x3d	; 61
     b4e:	de b7       	in	r29, 0x3e	; 62
     b50:	89 83       	std	Y+1, r24	; 0x01
	GPIO_setupPinDirection(PORTB_ID,PIN3_ID,PIN_OUTPUT);// Set OC0 as output
     b52:	81 e0       	ldi	r24, 0x01	; 1
     b54:	63 e0       	ldi	r22, 0x03	; 3
     b56:	41 e0       	ldi	r20, 0x01	; 1
     b58:	0e 94 ff 08 	call	0x11fe	; 0x11fe <GPIO_setupPinDirection>
	CLEAR_BIT(TCCR0,FOC0);//this bit is set to zero in PWM
     b5c:	a3 e5       	ldi	r26, 0x53	; 83
     b5e:	b0 e0       	ldi	r27, 0x00	; 0
     b60:	e3 e5       	ldi	r30, 0x53	; 83
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	80 81       	ld	r24, Z
     b66:	8f 77       	andi	r24, 0x7F	; 127
     b68:	8c 93       	st	X, r24
	SET_BIT(TCCR0,WGM01);//set the timer mode PWM
     b6a:	a3 e5       	ldi	r26, 0x53	; 83
     b6c:	b0 e0       	ldi	r27, 0x00	; 0
     b6e:	e3 e5       	ldi	r30, 0x53	; 83
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	80 81       	ld	r24, Z
     b74:	88 60       	ori	r24, 0x08	; 8
     b76:	8c 93       	st	X, r24
	SET_BIT(TCCR0,WGM00);
     b78:	a3 e5       	ldi	r26, 0x53	; 83
     b7a:	b0 e0       	ldi	r27, 0x00	; 0
     b7c:	e3 e5       	ldi	r30, 0x53	; 83
     b7e:	f0 e0       	ldi	r31, 0x00	; 0
     b80:	80 81       	ld	r24, Z
     b82:	80 64       	ori	r24, 0x40	; 64
     b84:	8c 93       	st	X, r24
	SET_BIT(TCCR0,COM01);//Set OC0 to toggle each compare match and non inverting
     b86:	a3 e5       	ldi	r26, 0x53	; 83
     b88:	b0 e0       	ldi	r27, 0x00	; 0
     b8a:	e3 e5       	ldi	r30, 0x53	; 83
     b8c:	f0 e0       	ldi	r31, 0x00	; 0
     b8e:	80 81       	ld	r24, Z
     b90:	80 62       	ori	r24, 0x20	; 32
     b92:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR0,COM00);
     b94:	a3 e5       	ldi	r26, 0x53	; 83
     b96:	b0 e0       	ldi	r27, 0x00	; 0
     b98:	e3 e5       	ldi	r30, 0x53	; 83
     b9a:	f0 e0       	ldi	r31, 0x00	; 0
     b9c:	80 81       	ld	r24, Z
     b9e:	8f 7e       	andi	r24, 0xEF	; 239
     ba0:	8c 93       	st	X, r24
	SET_BIT(TCCR0,CS01);//set the pre scaler to 64
     ba2:	a3 e5       	ldi	r26, 0x53	; 83
     ba4:	b0 e0       	ldi	r27, 0x00	; 0
     ba6:	e3 e5       	ldi	r30, 0x53	; 83
     ba8:	f0 e0       	ldi	r31, 0x00	; 0
     baa:	80 81       	ld	r24, Z
     bac:	82 60       	ori	r24, 0x02	; 2
     bae:	8c 93       	st	X, r24
	SET_BIT(TCCR0,CS00);
     bb0:	a3 e5       	ldi	r26, 0x53	; 83
     bb2:	b0 e0       	ldi	r27, 0x00	; 0
     bb4:	e3 e5       	ldi	r30, 0x53	; 83
     bb6:	f0 e0       	ldi	r31, 0x00	; 0
     bb8:	80 81       	ld	r24, Z
     bba:	81 60       	ori	r24, 0x01	; 1
     bbc:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR0,CS02);
     bbe:	a3 e5       	ldi	r26, 0x53	; 83
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	e3 e5       	ldi	r30, 0x53	; 83
     bc4:	f0 e0       	ldi	r31, 0x00	; 0
     bc6:	80 81       	ld	r24, Z
     bc8:	8b 7f       	andi	r24, 0xFB	; 251
     bca:	8c 93       	st	X, r24
	TCNT0=0;
     bcc:	e2 e5       	ldi	r30, 0x52	; 82
     bce:	f0 e0       	ldi	r31, 0x00	; 0
     bd0:	10 82       	st	Z, r1
	OCR0=(uint8)(((uint16)255*duty_cycle)/100);
     bd2:	ec e5       	ldi	r30, 0x5C	; 92
     bd4:	f0 e0       	ldi	r31, 0x00	; 0
     bd6:	89 81       	ldd	r24, Y+1	; 0x01
     bd8:	48 2f       	mov	r20, r24
     bda:	50 e0       	ldi	r21, 0x00	; 0
     bdc:	ca 01       	movw	r24, r20
     bde:	9c 01       	movw	r18, r24
     be0:	22 0f       	add	r18, r18
     be2:	33 1f       	adc	r19, r19
     be4:	c9 01       	movw	r24, r18
     be6:	96 95       	lsr	r25
     be8:	98 2f       	mov	r25, r24
     bea:	88 27       	eor	r24, r24
     bec:	97 95       	ror	r25
     bee:	87 95       	ror	r24
     bf0:	82 1b       	sub	r24, r18
     bf2:	93 0b       	sbc	r25, r19
     bf4:	84 0f       	add	r24, r20
     bf6:	95 1f       	adc	r25, r21
     bf8:	24 e6       	ldi	r18, 0x64	; 100
     bfa:	30 e0       	ldi	r19, 0x00	; 0
     bfc:	b9 01       	movw	r22, r18
     bfe:	0e 94 a8 14 	call	0x2950	; 0x2950 <__udivmodhi4>
     c02:	cb 01       	movw	r24, r22
     c04:	80 83       	st	Z, r24
}
     c06:	0f 90       	pop	r0
     c08:	cf 91       	pop	r28
     c0a:	df 91       	pop	r29
     c0c:	08 95       	ret

00000c0e <PWM_Timer0_Stop>:
void PWM_Timer0_Stop(void) {
     c0e:	df 93       	push	r29
     c10:	cf 93       	push	r28
     c12:	cd b7       	in	r28, 0x3d	; 61
     c14:	de b7       	in	r29, 0x3e	; 62
    // Clear Timer0 configuration to stop PWM
    TCCR0 = 0x00;
     c16:	e3 e5       	ldi	r30, 0x53	; 83
     c18:	f0 e0       	ldi	r31, 0x00	; 0
     c1a:	10 82       	st	Z, r1
    OCR0 = 0;  // Reset duty cycle to 0
     c1c:	ec e5       	ldi	r30, 0x5C	; 92
     c1e:	f0 e0       	ldi	r31, 0x00	; 0
     c20:	10 82       	st	Z, r1
}
     c22:	cf 91       	pop	r28
     c24:	df 91       	pop	r29
     c26:	08 95       	ret

00000c28 <Timer_init>:
Timer_ConfigType Timer_cofig={.timer_InitialValue=0,.timer_compare_MatchValue=250,.timer_ID=TIMER0,.timer_clock=F_CPU_8,.timer_mode=COMPARE_MODE};
static void (*g_Timer0CallBack)(void) = NULL_PTR;
static void (*g_Timer1CallBack)(void) = NULL_PTR;
static void (*g_Timer2CallBack)(void) = NULL_PTR;

void Timer_init(const Timer_ConfigType *Config_Ptr) {
     c28:	df 93       	push	r29
     c2a:	cf 93       	push	r28
     c2c:	00 d0       	rcall	.+0      	; 0xc2e <Timer_init+0x6>
     c2e:	00 d0       	rcall	.+0      	; 0xc30 <Timer_init+0x8>
     c30:	cd b7       	in	r28, 0x3d	; 61
     c32:	de b7       	in	r29, 0x3e	; 62
     c34:	9a 83       	std	Y+2, r25	; 0x02
     c36:	89 83       	std	Y+1, r24	; 0x01
	SREG|=(1<<7);
     c38:	af e5       	ldi	r26, 0x5F	; 95
     c3a:	b0 e0       	ldi	r27, 0x00	; 0
     c3c:	ef e5       	ldi	r30, 0x5F	; 95
     c3e:	f0 e0       	ldi	r31, 0x00	; 0
     c40:	80 81       	ld	r24, Z
     c42:	80 68       	ori	r24, 0x80	; 128
     c44:	8c 93       	st	X, r24
    switch (Config_Ptr->timer_ID) {
     c46:	e9 81       	ldd	r30, Y+1	; 0x01
     c48:	fa 81       	ldd	r31, Y+2	; 0x02
     c4a:	84 81       	ldd	r24, Z+4	; 0x04
     c4c:	28 2f       	mov	r18, r24
     c4e:	30 e0       	ldi	r19, 0x00	; 0
     c50:	3c 83       	std	Y+4, r19	; 0x04
     c52:	2b 83       	std	Y+3, r18	; 0x03
     c54:	8b 81       	ldd	r24, Y+3	; 0x03
     c56:	9c 81       	ldd	r25, Y+4	; 0x04
     c58:	81 30       	cpi	r24, 0x01	; 1
     c5a:	91 05       	cpc	r25, r1
     c5c:	e1 f1       	breq	.+120    	; 0xcd6 <Timer_init+0xae>
     c5e:	2b 81       	ldd	r18, Y+3	; 0x03
     c60:	3c 81       	ldd	r19, Y+4	; 0x04
     c62:	22 30       	cpi	r18, 0x02	; 2
     c64:	31 05       	cpc	r19, r1
     c66:	09 f4       	brne	.+2      	; 0xc6a <Timer_init+0x42>
     c68:	72 c0       	rjmp	.+228    	; 0xd4e <Timer_init+0x126>
     c6a:	8b 81       	ldd	r24, Y+3	; 0x03
     c6c:	9c 81       	ldd	r25, Y+4	; 0x04
     c6e:	00 97       	sbiw	r24, 0x00	; 0
     c70:	09 f0       	breq	.+2      	; 0xc74 <Timer_init+0x4c>
     c72:	9d c0       	rjmp	.+314    	; 0xdae <Timer_init+0x186>
        case TIMER0:
            TCNT0 = Config_Ptr->timer_InitialValue;
     c74:	a2 e5       	ldi	r26, 0x52	; 82
     c76:	b0 e0       	ldi	r27, 0x00	; 0
     c78:	e9 81       	ldd	r30, Y+1	; 0x01
     c7a:	fa 81       	ldd	r31, Y+2	; 0x02
     c7c:	80 81       	ld	r24, Z
     c7e:	91 81       	ldd	r25, Z+1	; 0x01
     c80:	8c 93       	st	X, r24
            if (Config_Ptr->timer_mode == NORMAL_MODE) {
     c82:	e9 81       	ldd	r30, Y+1	; 0x01
     c84:	fa 81       	ldd	r31, Y+2	; 0x02
     c86:	86 81       	ldd	r24, Z+6	; 0x06
     c88:	88 23       	and	r24, r24
     c8a:	79 f4       	brne	.+30     	; 0xcaa <Timer_init+0x82>
                TCCR0 = (1 << FOC0) | Config_Ptr->timer_clock;
     c8c:	a3 e5       	ldi	r26, 0x53	; 83
     c8e:	b0 e0       	ldi	r27, 0x00	; 0
     c90:	e9 81       	ldd	r30, Y+1	; 0x01
     c92:	fa 81       	ldd	r31, Y+2	; 0x02
     c94:	85 81       	ldd	r24, Z+5	; 0x05
     c96:	80 68       	ori	r24, 0x80	; 128
     c98:	8c 93       	st	X, r24
                TIMSK |= (1 << TOIE0); // Enable overflow interrupt
     c9a:	a9 e5       	ldi	r26, 0x59	; 89
     c9c:	b0 e0       	ldi	r27, 0x00	; 0
     c9e:	e9 e5       	ldi	r30, 0x59	; 89
     ca0:	f0 e0       	ldi	r31, 0x00	; 0
     ca2:	80 81       	ld	r24, Z
     ca4:	81 60       	ori	r24, 0x01	; 1
     ca6:	8c 93       	st	X, r24
     ca8:	82 c0       	rjmp	.+260    	; 0xdae <Timer_init+0x186>
            } else {
                OCR0 = Config_Ptr->timer_compare_MatchValue;
     caa:	ac e5       	ldi	r26, 0x5C	; 92
     cac:	b0 e0       	ldi	r27, 0x00	; 0
     cae:	e9 81       	ldd	r30, Y+1	; 0x01
     cb0:	fa 81       	ldd	r31, Y+2	; 0x02
     cb2:	82 81       	ldd	r24, Z+2	; 0x02
     cb4:	93 81       	ldd	r25, Z+3	; 0x03
     cb6:	8c 93       	st	X, r24
                TCCR0 = (1 << WGM01) | (1 << FOC0) | Config_Ptr->timer_clock;
     cb8:	a3 e5       	ldi	r26, 0x53	; 83
     cba:	b0 e0       	ldi	r27, 0x00	; 0
     cbc:	e9 81       	ldd	r30, Y+1	; 0x01
     cbe:	fa 81       	ldd	r31, Y+2	; 0x02
     cc0:	85 81       	ldd	r24, Z+5	; 0x05
     cc2:	88 68       	ori	r24, 0x88	; 136
     cc4:	8c 93       	st	X, r24
                TIMSK |= (1 << OCIE0); // Enable compare match interrupt
     cc6:	a9 e5       	ldi	r26, 0x59	; 89
     cc8:	b0 e0       	ldi	r27, 0x00	; 0
     cca:	e9 e5       	ldi	r30, 0x59	; 89
     ccc:	f0 e0       	ldi	r31, 0x00	; 0
     cce:	80 81       	ld	r24, Z
     cd0:	82 60       	ori	r24, 0x02	; 2
     cd2:	8c 93       	st	X, r24
     cd4:	6c c0       	rjmp	.+216    	; 0xdae <Timer_init+0x186>
            }
            break;

        case TIMER1:
            TCNT1 = Config_Ptr->timer_InitialValue;
     cd6:	ac e4       	ldi	r26, 0x4C	; 76
     cd8:	b0 e0       	ldi	r27, 0x00	; 0
     cda:	e9 81       	ldd	r30, Y+1	; 0x01
     cdc:	fa 81       	ldd	r31, Y+2	; 0x02
     cde:	80 81       	ld	r24, Z
     ce0:	91 81       	ldd	r25, Z+1	; 0x01
     ce2:	11 96       	adiw	r26, 0x01	; 1
     ce4:	9c 93       	st	X, r25
     ce6:	8e 93       	st	-X, r24
            if (Config_Ptr->timer_mode == NORMAL_MODE) {
     ce8:	e9 81       	ldd	r30, Y+1	; 0x01
     cea:	fa 81       	ldd	r31, Y+2	; 0x02
     cec:	86 81       	ldd	r24, Z+6	; 0x06
     cee:	88 23       	and	r24, r24
     cf0:	91 f4       	brne	.+36     	; 0xd16 <Timer_init+0xee>
                TCCR1A = (1 << FOC1A) | (1 << FOC1B);
     cf2:	ef e4       	ldi	r30, 0x4F	; 79
     cf4:	f0 e0       	ldi	r31, 0x00	; 0
     cf6:	8c e0       	ldi	r24, 0x0C	; 12
     cf8:	80 83       	st	Z, r24
                TCCR1B = Config_Ptr->timer_clock;
     cfa:	ae e4       	ldi	r26, 0x4E	; 78
     cfc:	b0 e0       	ldi	r27, 0x00	; 0
     cfe:	e9 81       	ldd	r30, Y+1	; 0x01
     d00:	fa 81       	ldd	r31, Y+2	; 0x02
     d02:	85 81       	ldd	r24, Z+5	; 0x05
     d04:	8c 93       	st	X, r24
                TIMSK |= (1 << TOIE1); // Enable overflow interrupt
     d06:	a9 e5       	ldi	r26, 0x59	; 89
     d08:	b0 e0       	ldi	r27, 0x00	; 0
     d0a:	e9 e5       	ldi	r30, 0x59	; 89
     d0c:	f0 e0       	ldi	r31, 0x00	; 0
     d0e:	80 81       	ld	r24, Z
     d10:	84 60       	ori	r24, 0x04	; 4
     d12:	8c 93       	st	X, r24
     d14:	4c c0       	rjmp	.+152    	; 0xdae <Timer_init+0x186>
            } else {
                OCR1A = Config_Ptr->timer_compare_MatchValue;
     d16:	aa e4       	ldi	r26, 0x4A	; 74
     d18:	b0 e0       	ldi	r27, 0x00	; 0
     d1a:	e9 81       	ldd	r30, Y+1	; 0x01
     d1c:	fa 81       	ldd	r31, Y+2	; 0x02
     d1e:	82 81       	ldd	r24, Z+2	; 0x02
     d20:	93 81       	ldd	r25, Z+3	; 0x03
     d22:	11 96       	adiw	r26, 0x01	; 1
     d24:	9c 93       	st	X, r25
     d26:	8e 93       	st	-X, r24
                TCCR1A = (1 << FOC1A) | (1 << FOC1B);
     d28:	ef e4       	ldi	r30, 0x4F	; 79
     d2a:	f0 e0       	ldi	r31, 0x00	; 0
     d2c:	8c e0       	ldi	r24, 0x0C	; 12
     d2e:	80 83       	st	Z, r24
                TCCR1B = (1 << WGM12) | Config_Ptr->timer_clock;
     d30:	ae e4       	ldi	r26, 0x4E	; 78
     d32:	b0 e0       	ldi	r27, 0x00	; 0
     d34:	e9 81       	ldd	r30, Y+1	; 0x01
     d36:	fa 81       	ldd	r31, Y+2	; 0x02
     d38:	85 81       	ldd	r24, Z+5	; 0x05
     d3a:	88 60       	ori	r24, 0x08	; 8
     d3c:	8c 93       	st	X, r24
                TIMSK |= (1 << OCIE1A); // Enable compare match interrupt
     d3e:	a9 e5       	ldi	r26, 0x59	; 89
     d40:	b0 e0       	ldi	r27, 0x00	; 0
     d42:	e9 e5       	ldi	r30, 0x59	; 89
     d44:	f0 e0       	ldi	r31, 0x00	; 0
     d46:	80 81       	ld	r24, Z
     d48:	80 61       	ori	r24, 0x10	; 16
     d4a:	8c 93       	st	X, r24
     d4c:	30 c0       	rjmp	.+96     	; 0xdae <Timer_init+0x186>
            }
            break;

        case TIMER2:
            TCNT2 = Config_Ptr->timer_InitialValue;
     d4e:	a4 e4       	ldi	r26, 0x44	; 68
     d50:	b0 e0       	ldi	r27, 0x00	; 0
     d52:	e9 81       	ldd	r30, Y+1	; 0x01
     d54:	fa 81       	ldd	r31, Y+2	; 0x02
     d56:	80 81       	ld	r24, Z
     d58:	91 81       	ldd	r25, Z+1	; 0x01
     d5a:	8c 93       	st	X, r24
            if (Config_Ptr->timer_mode == NORMAL_MODE) {
     d5c:	e9 81       	ldd	r30, Y+1	; 0x01
     d5e:	fa 81       	ldd	r31, Y+2	; 0x02
     d60:	86 81       	ldd	r24, Z+6	; 0x06
     d62:	88 23       	and	r24, r24
     d64:	79 f4       	brne	.+30     	; 0xd84 <Timer_init+0x15c>
                TCCR2 = (1 << FOC2) | Config_Ptr->timer_clock;
     d66:	a5 e4       	ldi	r26, 0x45	; 69
     d68:	b0 e0       	ldi	r27, 0x00	; 0
     d6a:	e9 81       	ldd	r30, Y+1	; 0x01
     d6c:	fa 81       	ldd	r31, Y+2	; 0x02
     d6e:	85 81       	ldd	r24, Z+5	; 0x05
     d70:	80 68       	ori	r24, 0x80	; 128
     d72:	8c 93       	st	X, r24
                TIMSK |= (1 << TOIE2); // Enable overflow interrupt
     d74:	a9 e5       	ldi	r26, 0x59	; 89
     d76:	b0 e0       	ldi	r27, 0x00	; 0
     d78:	e9 e5       	ldi	r30, 0x59	; 89
     d7a:	f0 e0       	ldi	r31, 0x00	; 0
     d7c:	80 81       	ld	r24, Z
     d7e:	80 64       	ori	r24, 0x40	; 64
     d80:	8c 93       	st	X, r24
     d82:	15 c0       	rjmp	.+42     	; 0xdae <Timer_init+0x186>
            } else {
                OCR2 = Config_Ptr->timer_compare_MatchValue;
     d84:	a3 e4       	ldi	r26, 0x43	; 67
     d86:	b0 e0       	ldi	r27, 0x00	; 0
     d88:	e9 81       	ldd	r30, Y+1	; 0x01
     d8a:	fa 81       	ldd	r31, Y+2	; 0x02
     d8c:	82 81       	ldd	r24, Z+2	; 0x02
     d8e:	93 81       	ldd	r25, Z+3	; 0x03
     d90:	8c 93       	st	X, r24
                TCCR2 = (1 << WGM21) | (1 << FOC2) | Config_Ptr->timer_clock;
     d92:	a5 e4       	ldi	r26, 0x45	; 69
     d94:	b0 e0       	ldi	r27, 0x00	; 0
     d96:	e9 81       	ldd	r30, Y+1	; 0x01
     d98:	fa 81       	ldd	r31, Y+2	; 0x02
     d9a:	85 81       	ldd	r24, Z+5	; 0x05
     d9c:	88 68       	ori	r24, 0x88	; 136
     d9e:	8c 93       	st	X, r24
                TIMSK |= (1 << OCIE2); // Enable compare match interrupt
     da0:	a9 e5       	ldi	r26, 0x59	; 89
     da2:	b0 e0       	ldi	r27, 0x00	; 0
     da4:	e9 e5       	ldi	r30, 0x59	; 89
     da6:	f0 e0       	ldi	r31, 0x00	; 0
     da8:	80 81       	ld	r24, Z
     daa:	80 68       	ori	r24, 0x80	; 128
     dac:	8c 93       	st	X, r24
            }
            break;
    }
}
     dae:	0f 90       	pop	r0
     db0:	0f 90       	pop	r0
     db2:	0f 90       	pop	r0
     db4:	0f 90       	pop	r0
     db6:	cf 91       	pop	r28
     db8:	df 91       	pop	r29
     dba:	08 95       	ret

00000dbc <Timer_deInit>:

void Timer_deInit(Timer_ID_Type timer_type) {
     dbc:	df 93       	push	r29
     dbe:	cf 93       	push	r28
     dc0:	00 d0       	rcall	.+0      	; 0xdc2 <Timer_deInit+0x6>
     dc2:	0f 92       	push	r0
     dc4:	cd b7       	in	r28, 0x3d	; 61
     dc6:	de b7       	in	r29, 0x3e	; 62
     dc8:	89 83       	std	Y+1, r24	; 0x01
    switch (timer_type) {
     dca:	89 81       	ldd	r24, Y+1	; 0x01
     dcc:	28 2f       	mov	r18, r24
     dce:	30 e0       	ldi	r19, 0x00	; 0
     dd0:	3b 83       	std	Y+3, r19	; 0x03
     dd2:	2a 83       	std	Y+2, r18	; 0x02
     dd4:	8a 81       	ldd	r24, Y+2	; 0x02
     dd6:	9b 81       	ldd	r25, Y+3	; 0x03
     dd8:	81 30       	cpi	r24, 0x01	; 1
     dda:	91 05       	cpc	r25, r1
     ddc:	a1 f0       	breq	.+40     	; 0xe06 <Timer_deInit+0x4a>
     dde:	2a 81       	ldd	r18, Y+2	; 0x02
     de0:	3b 81       	ldd	r19, Y+3	; 0x03
     de2:	22 30       	cpi	r18, 0x02	; 2
     de4:	31 05       	cpc	r19, r1
     de6:	e9 f0       	breq	.+58     	; 0xe22 <Timer_deInit+0x66>
     de8:	8a 81       	ldd	r24, Y+2	; 0x02
     dea:	9b 81       	ldd	r25, Y+3	; 0x03
     dec:	00 97       	sbiw	r24, 0x00	; 0
     dee:	19 f5       	brne	.+70     	; 0xe36 <Timer_deInit+0x7a>
        case TIMER0:
            TCCR0 = 0;
     df0:	e3 e5       	ldi	r30, 0x53	; 83
     df2:	f0 e0       	ldi	r31, 0x00	; 0
     df4:	10 82       	st	Z, r1
            TIMSK &= ~(1 << TOIE0) & ~(1 << OCIE0); // Disable all TIMER0 interrupts
     df6:	a9 e5       	ldi	r26, 0x59	; 89
     df8:	b0 e0       	ldi	r27, 0x00	; 0
     dfa:	e9 e5       	ldi	r30, 0x59	; 89
     dfc:	f0 e0       	ldi	r31, 0x00	; 0
     dfe:	80 81       	ld	r24, Z
     e00:	8c 7f       	andi	r24, 0xFC	; 252
     e02:	8c 93       	st	X, r24
     e04:	18 c0       	rjmp	.+48     	; 0xe36 <Timer_deInit+0x7a>
            break;

        case TIMER1:
            TCCR1A = 0;
     e06:	ef e4       	ldi	r30, 0x4F	; 79
     e08:	f0 e0       	ldi	r31, 0x00	; 0
     e0a:	10 82       	st	Z, r1
            TCCR1B = 0;
     e0c:	ee e4       	ldi	r30, 0x4E	; 78
     e0e:	f0 e0       	ldi	r31, 0x00	; 0
     e10:	10 82       	st	Z, r1
            TIMSK &= ~(1 << TOIE1) & ~(1 << OCIE1A); // Disable all TIMER1 interrupts
     e12:	a9 e5       	ldi	r26, 0x59	; 89
     e14:	b0 e0       	ldi	r27, 0x00	; 0
     e16:	e9 e5       	ldi	r30, 0x59	; 89
     e18:	f0 e0       	ldi	r31, 0x00	; 0
     e1a:	80 81       	ld	r24, Z
     e1c:	8b 7e       	andi	r24, 0xEB	; 235
     e1e:	8c 93       	st	X, r24
     e20:	0a c0       	rjmp	.+20     	; 0xe36 <Timer_deInit+0x7a>
            break;

        case TIMER2:
            TCCR2 = 0;
     e22:	e5 e4       	ldi	r30, 0x45	; 69
     e24:	f0 e0       	ldi	r31, 0x00	; 0
     e26:	10 82       	st	Z, r1
            TIMSK &= ~(1 << TOIE2) & ~(1 << OCIE2); // Disable all TIMER2 interrupts
     e28:	a9 e5       	ldi	r26, 0x59	; 89
     e2a:	b0 e0       	ldi	r27, 0x00	; 0
     e2c:	e9 e5       	ldi	r30, 0x59	; 89
     e2e:	f0 e0       	ldi	r31, 0x00	; 0
     e30:	80 81       	ld	r24, Z
     e32:	8f 73       	andi	r24, 0x3F	; 63
     e34:	8c 93       	st	X, r24
            break;
    }
}
     e36:	0f 90       	pop	r0
     e38:	0f 90       	pop	r0
     e3a:	0f 90       	pop	r0
     e3c:	cf 91       	pop	r28
     e3e:	df 91       	pop	r29
     e40:	08 95       	ret

00000e42 <Timer_setCallBack>:

void Timer_setCallBack(void(*a_ptr)(void), Timer_ID_Type a_timer_ID) {
     e42:	df 93       	push	r29
     e44:	cf 93       	push	r28
     e46:	00 d0       	rcall	.+0      	; 0xe48 <Timer_setCallBack+0x6>
     e48:	00 d0       	rcall	.+0      	; 0xe4a <Timer_setCallBack+0x8>
     e4a:	0f 92       	push	r0
     e4c:	cd b7       	in	r28, 0x3d	; 61
     e4e:	de b7       	in	r29, 0x3e	; 62
     e50:	9a 83       	std	Y+2, r25	; 0x02
     e52:	89 83       	std	Y+1, r24	; 0x01
     e54:	6b 83       	std	Y+3, r22	; 0x03
    switch (a_timer_ID) {
     e56:	8b 81       	ldd	r24, Y+3	; 0x03
     e58:	28 2f       	mov	r18, r24
     e5a:	30 e0       	ldi	r19, 0x00	; 0
     e5c:	3d 83       	std	Y+5, r19	; 0x05
     e5e:	2c 83       	std	Y+4, r18	; 0x04
     e60:	8c 81       	ldd	r24, Y+4	; 0x04
     e62:	9d 81       	ldd	r25, Y+5	; 0x05
     e64:	81 30       	cpi	r24, 0x01	; 1
     e66:	91 05       	cpc	r25, r1
     e68:	81 f0       	breq	.+32     	; 0xe8a <Timer_setCallBack+0x48>
     e6a:	2c 81       	ldd	r18, Y+4	; 0x04
     e6c:	3d 81       	ldd	r19, Y+5	; 0x05
     e6e:	22 30       	cpi	r18, 0x02	; 2
     e70:	31 05       	cpc	r19, r1
     e72:	91 f0       	breq	.+36     	; 0xe98 <Timer_setCallBack+0x56>
     e74:	8c 81       	ldd	r24, Y+4	; 0x04
     e76:	9d 81       	ldd	r25, Y+5	; 0x05
     e78:	00 97       	sbiw	r24, 0x00	; 0
     e7a:	a1 f4       	brne	.+40     	; 0xea4 <Timer_setCallBack+0x62>
        case TIMER0:
            g_Timer0CallBack = a_ptr;
     e7c:	89 81       	ldd	r24, Y+1	; 0x01
     e7e:	9a 81       	ldd	r25, Y+2	; 0x02
     e80:	90 93 8b 00 	sts	0x008B, r25
     e84:	80 93 8a 00 	sts	0x008A, r24
     e88:	0d c0       	rjmp	.+26     	; 0xea4 <Timer_setCallBack+0x62>
            break;
        case TIMER1:
            g_Timer1CallBack = a_ptr;
     e8a:	89 81       	ldd	r24, Y+1	; 0x01
     e8c:	9a 81       	ldd	r25, Y+2	; 0x02
     e8e:	90 93 8d 00 	sts	0x008D, r25
     e92:	80 93 8c 00 	sts	0x008C, r24
     e96:	06 c0       	rjmp	.+12     	; 0xea4 <Timer_setCallBack+0x62>
            break;
        case TIMER2:
            g_Timer2CallBack = a_ptr;
     e98:	89 81       	ldd	r24, Y+1	; 0x01
     e9a:	9a 81       	ldd	r25, Y+2	; 0x02
     e9c:	90 93 8f 00 	sts	0x008F, r25
     ea0:	80 93 8e 00 	sts	0x008E, r24
            break;
    }
}
     ea4:	0f 90       	pop	r0
     ea6:	0f 90       	pop	r0
     ea8:	0f 90       	pop	r0
     eaa:	0f 90       	pop	r0
     eac:	0f 90       	pop	r0
     eae:	cf 91       	pop	r28
     eb0:	df 91       	pop	r29
     eb2:	08 95       	ret

00000eb4 <Timer_start>:

void Timer_start(Timer_ID_Type timer_id, Timer_ClockType timer_clock) {
     eb4:	df 93       	push	r29
     eb6:	cf 93       	push	r28
     eb8:	00 d0       	rcall	.+0      	; 0xeba <Timer_start+0x6>
     eba:	00 d0       	rcall	.+0      	; 0xebc <Timer_start+0x8>
     ebc:	cd b7       	in	r28, 0x3d	; 61
     ebe:	de b7       	in	r29, 0x3e	; 62
     ec0:	89 83       	std	Y+1, r24	; 0x01
     ec2:	6a 83       	std	Y+2, r22	; 0x02
    switch (timer_id) {
     ec4:	89 81       	ldd	r24, Y+1	; 0x01
     ec6:	28 2f       	mov	r18, r24
     ec8:	30 e0       	ldi	r19, 0x00	; 0
     eca:	3c 83       	std	Y+4, r19	; 0x04
     ecc:	2b 83       	std	Y+3, r18	; 0x03
     ece:	8b 81       	ldd	r24, Y+3	; 0x03
     ed0:	9c 81       	ldd	r25, Y+4	; 0x04
     ed2:	81 30       	cpi	r24, 0x01	; 1
     ed4:	91 05       	cpc	r25, r1
     ed6:	91 f0       	breq	.+36     	; 0xefc <Timer_start+0x48>
     ed8:	2b 81       	ldd	r18, Y+3	; 0x03
     eda:	3c 81       	ldd	r19, Y+4	; 0x04
     edc:	22 30       	cpi	r18, 0x02	; 2
     ede:	31 05       	cpc	r19, r1
     ee0:	b1 f0       	breq	.+44     	; 0xf0e <Timer_start+0x5a>
     ee2:	8b 81       	ldd	r24, Y+3	; 0x03
     ee4:	9c 81       	ldd	r25, Y+4	; 0x04
     ee6:	00 97       	sbiw	r24, 0x00	; 0
     ee8:	d1 f4       	brne	.+52     	; 0xf1e <Timer_start+0x6a>
        case TIMER0:
            TCCR0 |= timer_clock; // Set the clock prescaler to start TIMER0
     eea:	a3 e5       	ldi	r26, 0x53	; 83
     eec:	b0 e0       	ldi	r27, 0x00	; 0
     eee:	e3 e5       	ldi	r30, 0x53	; 83
     ef0:	f0 e0       	ldi	r31, 0x00	; 0
     ef2:	90 81       	ld	r25, Z
     ef4:	8a 81       	ldd	r24, Y+2	; 0x02
     ef6:	89 2b       	or	r24, r25
     ef8:	8c 93       	st	X, r24
     efa:	11 c0       	rjmp	.+34     	; 0xf1e <Timer_start+0x6a>
            break;
        case TIMER1:
            TCCR1B |= timer_clock; // Set the clock prescaler to start TIMER1
     efc:	ae e4       	ldi	r26, 0x4E	; 78
     efe:	b0 e0       	ldi	r27, 0x00	; 0
     f00:	ee e4       	ldi	r30, 0x4E	; 78
     f02:	f0 e0       	ldi	r31, 0x00	; 0
     f04:	90 81       	ld	r25, Z
     f06:	8a 81       	ldd	r24, Y+2	; 0x02
     f08:	89 2b       	or	r24, r25
     f0a:	8c 93       	st	X, r24
     f0c:	08 c0       	rjmp	.+16     	; 0xf1e <Timer_start+0x6a>
            break;
        case TIMER2:
            TCCR2 |= timer_clock; // Set the clock prescaler to start TIMER2
     f0e:	a5 e4       	ldi	r26, 0x45	; 69
     f10:	b0 e0       	ldi	r27, 0x00	; 0
     f12:	e5 e4       	ldi	r30, 0x45	; 69
     f14:	f0 e0       	ldi	r31, 0x00	; 0
     f16:	90 81       	ld	r25, Z
     f18:	8a 81       	ldd	r24, Y+2	; 0x02
     f1a:	89 2b       	or	r24, r25
     f1c:	8c 93       	st	X, r24
            break;
        default:
            // Handle invalid timer ID if necessary
            break;
    }
}
     f1e:	0f 90       	pop	r0
     f20:	0f 90       	pop	r0
     f22:	0f 90       	pop	r0
     f24:	0f 90       	pop	r0
     f26:	cf 91       	pop	r28
     f28:	df 91       	pop	r29
     f2a:	08 95       	ret

00000f2c <Timer_stop>:

void Timer_stop(Timer_ID_Type timer_id) {
     f2c:	df 93       	push	r29
     f2e:	cf 93       	push	r28
     f30:	00 d0       	rcall	.+0      	; 0xf32 <Timer_stop+0x6>
     f32:	0f 92       	push	r0
     f34:	cd b7       	in	r28, 0x3d	; 61
     f36:	de b7       	in	r29, 0x3e	; 62
     f38:	89 83       	std	Y+1, r24	; 0x01
    switch (timer_id) {
     f3a:	89 81       	ldd	r24, Y+1	; 0x01
     f3c:	28 2f       	mov	r18, r24
     f3e:	30 e0       	ldi	r19, 0x00	; 0
     f40:	3b 83       	std	Y+3, r19	; 0x03
     f42:	2a 83       	std	Y+2, r18	; 0x02
     f44:	8a 81       	ldd	r24, Y+2	; 0x02
     f46:	9b 81       	ldd	r25, Y+3	; 0x03
     f48:	81 30       	cpi	r24, 0x01	; 1
     f4a:	91 05       	cpc	r25, r1
     f4c:	89 f0       	breq	.+34     	; 0xf70 <Timer_stop+0x44>
     f4e:	2a 81       	ldd	r18, Y+2	; 0x02
     f50:	3b 81       	ldd	r19, Y+3	; 0x03
     f52:	22 30       	cpi	r18, 0x02	; 2
     f54:	31 05       	cpc	r19, r1
     f56:	a1 f0       	breq	.+40     	; 0xf80 <Timer_stop+0x54>
     f58:	8a 81       	ldd	r24, Y+2	; 0x02
     f5a:	9b 81       	ldd	r25, Y+3	; 0x03
     f5c:	00 97       	sbiw	r24, 0x00	; 0
     f5e:	b9 f4       	brne	.+46     	; 0xf8e <Timer_stop+0x62>
        case TIMER0:
            TCCR0 &= ~((1 << CS02) | (1 << CS01) | (1 << CS00)); // Clear clock prescaler bits to stop TIMER0
     f60:	a3 e5       	ldi	r26, 0x53	; 83
     f62:	b0 e0       	ldi	r27, 0x00	; 0
     f64:	e3 e5       	ldi	r30, 0x53	; 83
     f66:	f0 e0       	ldi	r31, 0x00	; 0
     f68:	80 81       	ld	r24, Z
     f6a:	88 7f       	andi	r24, 0xF8	; 248
     f6c:	8c 93       	st	X, r24
     f6e:	0f c0       	rjmp	.+30     	; 0xf8e <Timer_stop+0x62>
            break;
        case TIMER1:
            TCCR1B &= ~((1 << CS12) | (1 << CS11) | (1 << CS10)); // Clear clock prescaler bits to stop TIMER1
     f70:	ae e4       	ldi	r26, 0x4E	; 78
     f72:	b0 e0       	ldi	r27, 0x00	; 0
     f74:	ee e4       	ldi	r30, 0x4E	; 78
     f76:	f0 e0       	ldi	r31, 0x00	; 0
     f78:	80 81       	ld	r24, Z
     f7a:	88 7f       	andi	r24, 0xF8	; 248
     f7c:	8c 93       	st	X, r24
     f7e:	07 c0       	rjmp	.+14     	; 0xf8e <Timer_stop+0x62>
            break;
        case TIMER2:
            TCCR2 &= ~((1 << CS22) | (1 << CS21) | (1 << CS20)); // Clear clock prescaler bits to stop TIMER2
     f80:	a5 e4       	ldi	r26, 0x45	; 69
     f82:	b0 e0       	ldi	r27, 0x00	; 0
     f84:	e5 e4       	ldi	r30, 0x45	; 69
     f86:	f0 e0       	ldi	r31, 0x00	; 0
     f88:	80 81       	ld	r24, Z
     f8a:	88 7f       	andi	r24, 0xF8	; 248
     f8c:	8c 93       	st	X, r24
            break;
        default:
            // Handle invalid timer ID if necessary
            break;
    }
}
     f8e:	0f 90       	pop	r0
     f90:	0f 90       	pop	r0
     f92:	0f 90       	pop	r0
     f94:	cf 91       	pop	r28
     f96:	df 91       	pop	r29
     f98:	08 95       	ret

00000f9a <__vector_11>:

// ISR for TIMER0 Overflow
ISR(TIMER0_OVF_vect) {
     f9a:	1f 92       	push	r1
     f9c:	0f 92       	push	r0
     f9e:	0f b6       	in	r0, 0x3f	; 63
     fa0:	0f 92       	push	r0
     fa2:	11 24       	eor	r1, r1
     fa4:	2f 93       	push	r18
     fa6:	3f 93       	push	r19
     fa8:	4f 93       	push	r20
     faa:	5f 93       	push	r21
     fac:	6f 93       	push	r22
     fae:	7f 93       	push	r23
     fb0:	8f 93       	push	r24
     fb2:	9f 93       	push	r25
     fb4:	af 93       	push	r26
     fb6:	bf 93       	push	r27
     fb8:	ef 93       	push	r30
     fba:	ff 93       	push	r31
     fbc:	df 93       	push	r29
     fbe:	cf 93       	push	r28
     fc0:	cd b7       	in	r28, 0x3d	; 61
     fc2:	de b7       	in	r29, 0x3e	; 62
    if (g_Timer0CallBack != NULL_PTR) {
     fc4:	80 91 8a 00 	lds	r24, 0x008A
     fc8:	90 91 8b 00 	lds	r25, 0x008B
     fcc:	00 97       	sbiw	r24, 0x00	; 0
     fce:	29 f0       	breq	.+10     	; 0xfda <__vector_11+0x40>
        g_Timer0CallBack();
     fd0:	e0 91 8a 00 	lds	r30, 0x008A
     fd4:	f0 91 8b 00 	lds	r31, 0x008B
     fd8:	09 95       	icall
    }
}
     fda:	cf 91       	pop	r28
     fdc:	df 91       	pop	r29
     fde:	ff 91       	pop	r31
     fe0:	ef 91       	pop	r30
     fe2:	bf 91       	pop	r27
     fe4:	af 91       	pop	r26
     fe6:	9f 91       	pop	r25
     fe8:	8f 91       	pop	r24
     fea:	7f 91       	pop	r23
     fec:	6f 91       	pop	r22
     fee:	5f 91       	pop	r21
     ff0:	4f 91       	pop	r20
     ff2:	3f 91       	pop	r19
     ff4:	2f 91       	pop	r18
     ff6:	0f 90       	pop	r0
     ff8:	0f be       	out	0x3f, r0	; 63
     ffa:	0f 90       	pop	r0
     ffc:	1f 90       	pop	r1
     ffe:	18 95       	reti

00001000 <__vector_10>:

// ISR for TIMER0 Compare Match
ISR(TIMER0_COMP_vect) {
    1000:	1f 92       	push	r1
    1002:	0f 92       	push	r0
    1004:	0f b6       	in	r0, 0x3f	; 63
    1006:	0f 92       	push	r0
    1008:	11 24       	eor	r1, r1
    100a:	2f 93       	push	r18
    100c:	3f 93       	push	r19
    100e:	4f 93       	push	r20
    1010:	5f 93       	push	r21
    1012:	6f 93       	push	r22
    1014:	7f 93       	push	r23
    1016:	8f 93       	push	r24
    1018:	9f 93       	push	r25
    101a:	af 93       	push	r26
    101c:	bf 93       	push	r27
    101e:	ef 93       	push	r30
    1020:	ff 93       	push	r31
    1022:	df 93       	push	r29
    1024:	cf 93       	push	r28
    1026:	cd b7       	in	r28, 0x3d	; 61
    1028:	de b7       	in	r29, 0x3e	; 62
    if (g_Timer0CallBack != NULL_PTR) {
    102a:	80 91 8a 00 	lds	r24, 0x008A
    102e:	90 91 8b 00 	lds	r25, 0x008B
    1032:	00 97       	sbiw	r24, 0x00	; 0
    1034:	29 f0       	breq	.+10     	; 0x1040 <__vector_10+0x40>
        g_Timer0CallBack();
    1036:	e0 91 8a 00 	lds	r30, 0x008A
    103a:	f0 91 8b 00 	lds	r31, 0x008B
    103e:	09 95       	icall
    }
}
    1040:	cf 91       	pop	r28
    1042:	df 91       	pop	r29
    1044:	ff 91       	pop	r31
    1046:	ef 91       	pop	r30
    1048:	bf 91       	pop	r27
    104a:	af 91       	pop	r26
    104c:	9f 91       	pop	r25
    104e:	8f 91       	pop	r24
    1050:	7f 91       	pop	r23
    1052:	6f 91       	pop	r22
    1054:	5f 91       	pop	r21
    1056:	4f 91       	pop	r20
    1058:	3f 91       	pop	r19
    105a:	2f 91       	pop	r18
    105c:	0f 90       	pop	r0
    105e:	0f be       	out	0x3f, r0	; 63
    1060:	0f 90       	pop	r0
    1062:	1f 90       	pop	r1
    1064:	18 95       	reti

00001066 <__vector_9>:

// ISR for TIMER1 Overflow
ISR(TIMER1_OVF_vect) {
    1066:	1f 92       	push	r1
    1068:	0f 92       	push	r0
    106a:	0f b6       	in	r0, 0x3f	; 63
    106c:	0f 92       	push	r0
    106e:	11 24       	eor	r1, r1
    1070:	2f 93       	push	r18
    1072:	3f 93       	push	r19
    1074:	4f 93       	push	r20
    1076:	5f 93       	push	r21
    1078:	6f 93       	push	r22
    107a:	7f 93       	push	r23
    107c:	8f 93       	push	r24
    107e:	9f 93       	push	r25
    1080:	af 93       	push	r26
    1082:	bf 93       	push	r27
    1084:	ef 93       	push	r30
    1086:	ff 93       	push	r31
    1088:	df 93       	push	r29
    108a:	cf 93       	push	r28
    108c:	cd b7       	in	r28, 0x3d	; 61
    108e:	de b7       	in	r29, 0x3e	; 62
    if (g_Timer1CallBack != NULL_PTR) {
    1090:	80 91 8c 00 	lds	r24, 0x008C
    1094:	90 91 8d 00 	lds	r25, 0x008D
    1098:	00 97       	sbiw	r24, 0x00	; 0
    109a:	29 f0       	breq	.+10     	; 0x10a6 <__vector_9+0x40>
        g_Timer1CallBack();
    109c:	e0 91 8c 00 	lds	r30, 0x008C
    10a0:	f0 91 8d 00 	lds	r31, 0x008D
    10a4:	09 95       	icall
    }
}
    10a6:	cf 91       	pop	r28
    10a8:	df 91       	pop	r29
    10aa:	ff 91       	pop	r31
    10ac:	ef 91       	pop	r30
    10ae:	bf 91       	pop	r27
    10b0:	af 91       	pop	r26
    10b2:	9f 91       	pop	r25
    10b4:	8f 91       	pop	r24
    10b6:	7f 91       	pop	r23
    10b8:	6f 91       	pop	r22
    10ba:	5f 91       	pop	r21
    10bc:	4f 91       	pop	r20
    10be:	3f 91       	pop	r19
    10c0:	2f 91       	pop	r18
    10c2:	0f 90       	pop	r0
    10c4:	0f be       	out	0x3f, r0	; 63
    10c6:	0f 90       	pop	r0
    10c8:	1f 90       	pop	r1
    10ca:	18 95       	reti

000010cc <__vector_7>:

// ISR for TIMER1 Compare Match
ISR(TIMER1_COMPA_vect) {
    10cc:	1f 92       	push	r1
    10ce:	0f 92       	push	r0
    10d0:	0f b6       	in	r0, 0x3f	; 63
    10d2:	0f 92       	push	r0
    10d4:	11 24       	eor	r1, r1
    10d6:	2f 93       	push	r18
    10d8:	3f 93       	push	r19
    10da:	4f 93       	push	r20
    10dc:	5f 93       	push	r21
    10de:	6f 93       	push	r22
    10e0:	7f 93       	push	r23
    10e2:	8f 93       	push	r24
    10e4:	9f 93       	push	r25
    10e6:	af 93       	push	r26
    10e8:	bf 93       	push	r27
    10ea:	ef 93       	push	r30
    10ec:	ff 93       	push	r31
    10ee:	df 93       	push	r29
    10f0:	cf 93       	push	r28
    10f2:	cd b7       	in	r28, 0x3d	; 61
    10f4:	de b7       	in	r29, 0x3e	; 62
    if (g_Timer1CallBack != NULL_PTR) {
    10f6:	80 91 8c 00 	lds	r24, 0x008C
    10fa:	90 91 8d 00 	lds	r25, 0x008D
    10fe:	00 97       	sbiw	r24, 0x00	; 0
    1100:	29 f0       	breq	.+10     	; 0x110c <__vector_7+0x40>
        g_Timer1CallBack();
    1102:	e0 91 8c 00 	lds	r30, 0x008C
    1106:	f0 91 8d 00 	lds	r31, 0x008D
    110a:	09 95       	icall
    }
}
    110c:	cf 91       	pop	r28
    110e:	df 91       	pop	r29
    1110:	ff 91       	pop	r31
    1112:	ef 91       	pop	r30
    1114:	bf 91       	pop	r27
    1116:	af 91       	pop	r26
    1118:	9f 91       	pop	r25
    111a:	8f 91       	pop	r24
    111c:	7f 91       	pop	r23
    111e:	6f 91       	pop	r22
    1120:	5f 91       	pop	r21
    1122:	4f 91       	pop	r20
    1124:	3f 91       	pop	r19
    1126:	2f 91       	pop	r18
    1128:	0f 90       	pop	r0
    112a:	0f be       	out	0x3f, r0	; 63
    112c:	0f 90       	pop	r0
    112e:	1f 90       	pop	r1
    1130:	18 95       	reti

00001132 <__vector_5>:

// ISR for TIMER2 Overflow
ISR(TIMER2_OVF_vect) {
    1132:	1f 92       	push	r1
    1134:	0f 92       	push	r0
    1136:	0f b6       	in	r0, 0x3f	; 63
    1138:	0f 92       	push	r0
    113a:	11 24       	eor	r1, r1
    113c:	2f 93       	push	r18
    113e:	3f 93       	push	r19
    1140:	4f 93       	push	r20
    1142:	5f 93       	push	r21
    1144:	6f 93       	push	r22
    1146:	7f 93       	push	r23
    1148:	8f 93       	push	r24
    114a:	9f 93       	push	r25
    114c:	af 93       	push	r26
    114e:	bf 93       	push	r27
    1150:	ef 93       	push	r30
    1152:	ff 93       	push	r31
    1154:	df 93       	push	r29
    1156:	cf 93       	push	r28
    1158:	cd b7       	in	r28, 0x3d	; 61
    115a:	de b7       	in	r29, 0x3e	; 62
    if (g_Timer2CallBack != NULL_PTR) {
    115c:	80 91 8e 00 	lds	r24, 0x008E
    1160:	90 91 8f 00 	lds	r25, 0x008F
    1164:	00 97       	sbiw	r24, 0x00	; 0
    1166:	29 f0       	breq	.+10     	; 0x1172 <__vector_5+0x40>
        g_Timer2CallBack();
    1168:	e0 91 8e 00 	lds	r30, 0x008E
    116c:	f0 91 8f 00 	lds	r31, 0x008F
    1170:	09 95       	icall
    }
}
    1172:	cf 91       	pop	r28
    1174:	df 91       	pop	r29
    1176:	ff 91       	pop	r31
    1178:	ef 91       	pop	r30
    117a:	bf 91       	pop	r27
    117c:	af 91       	pop	r26
    117e:	9f 91       	pop	r25
    1180:	8f 91       	pop	r24
    1182:	7f 91       	pop	r23
    1184:	6f 91       	pop	r22
    1186:	5f 91       	pop	r21
    1188:	4f 91       	pop	r20
    118a:	3f 91       	pop	r19
    118c:	2f 91       	pop	r18
    118e:	0f 90       	pop	r0
    1190:	0f be       	out	0x3f, r0	; 63
    1192:	0f 90       	pop	r0
    1194:	1f 90       	pop	r1
    1196:	18 95       	reti

00001198 <__vector_4>:

// ISR for TIMER2 Compare Match
ISR(TIMER2_COMP_vect) {
    1198:	1f 92       	push	r1
    119a:	0f 92       	push	r0
    119c:	0f b6       	in	r0, 0x3f	; 63
    119e:	0f 92       	push	r0
    11a0:	11 24       	eor	r1, r1
    11a2:	2f 93       	push	r18
    11a4:	3f 93       	push	r19
    11a6:	4f 93       	push	r20
    11a8:	5f 93       	push	r21
    11aa:	6f 93       	push	r22
    11ac:	7f 93       	push	r23
    11ae:	8f 93       	push	r24
    11b0:	9f 93       	push	r25
    11b2:	af 93       	push	r26
    11b4:	bf 93       	push	r27
    11b6:	ef 93       	push	r30
    11b8:	ff 93       	push	r31
    11ba:	df 93       	push	r29
    11bc:	cf 93       	push	r28
    11be:	cd b7       	in	r28, 0x3d	; 61
    11c0:	de b7       	in	r29, 0x3e	; 62
    if (g_Timer2CallBack != NULL_PTR) {
    11c2:	80 91 8e 00 	lds	r24, 0x008E
    11c6:	90 91 8f 00 	lds	r25, 0x008F
    11ca:	00 97       	sbiw	r24, 0x00	; 0
    11cc:	29 f0       	breq	.+10     	; 0x11d8 <__vector_4+0x40>
        g_Timer2CallBack();
    11ce:	e0 91 8e 00 	lds	r30, 0x008E
    11d2:	f0 91 8f 00 	lds	r31, 0x008F
    11d6:	09 95       	icall
    }
}
    11d8:	cf 91       	pop	r28
    11da:	df 91       	pop	r29
    11dc:	ff 91       	pop	r31
    11de:	ef 91       	pop	r30
    11e0:	bf 91       	pop	r27
    11e2:	af 91       	pop	r26
    11e4:	9f 91       	pop	r25
    11e6:	8f 91       	pop	r24
    11e8:	7f 91       	pop	r23
    11ea:	6f 91       	pop	r22
    11ec:	5f 91       	pop	r21
    11ee:	4f 91       	pop	r20
    11f0:	3f 91       	pop	r19
    11f2:	2f 91       	pop	r18
    11f4:	0f 90       	pop	r0
    11f6:	0f be       	out	0x3f, r0	; 63
    11f8:	0f 90       	pop	r0
    11fa:	1f 90       	pop	r1
    11fc:	18 95       	reti

000011fe <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    11fe:	df 93       	push	r29
    1200:	cf 93       	push	r28
    1202:	00 d0       	rcall	.+0      	; 0x1204 <GPIO_setupPinDirection+0x6>
    1204:	00 d0       	rcall	.+0      	; 0x1206 <GPIO_setupPinDirection+0x8>
    1206:	0f 92       	push	r0
    1208:	cd b7       	in	r28, 0x3d	; 61
    120a:	de b7       	in	r29, 0x3e	; 62
    120c:	89 83       	std	Y+1, r24	; 0x01
    120e:	6a 83       	std	Y+2, r22	; 0x02
    1210:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1212:	8a 81       	ldd	r24, Y+2	; 0x02
    1214:	88 30       	cpi	r24, 0x08	; 8
    1216:	08 f0       	brcs	.+2      	; 0x121a <GPIO_setupPinDirection+0x1c>
    1218:	d5 c0       	rjmp	.+426    	; 0x13c4 <GPIO_setupPinDirection+0x1c6>
    121a:	89 81       	ldd	r24, Y+1	; 0x01
    121c:	84 30       	cpi	r24, 0x04	; 4
    121e:	08 f0       	brcs	.+2      	; 0x1222 <GPIO_setupPinDirection+0x24>
    1220:	d1 c0       	rjmp	.+418    	; 0x13c4 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1222:	89 81       	ldd	r24, Y+1	; 0x01
    1224:	28 2f       	mov	r18, r24
    1226:	30 e0       	ldi	r19, 0x00	; 0
    1228:	3d 83       	std	Y+5, r19	; 0x05
    122a:	2c 83       	std	Y+4, r18	; 0x04
    122c:	8c 81       	ldd	r24, Y+4	; 0x04
    122e:	9d 81       	ldd	r25, Y+5	; 0x05
    1230:	81 30       	cpi	r24, 0x01	; 1
    1232:	91 05       	cpc	r25, r1
    1234:	09 f4       	brne	.+2      	; 0x1238 <GPIO_setupPinDirection+0x3a>
    1236:	43 c0       	rjmp	.+134    	; 0x12be <GPIO_setupPinDirection+0xc0>
    1238:	2c 81       	ldd	r18, Y+4	; 0x04
    123a:	3d 81       	ldd	r19, Y+5	; 0x05
    123c:	22 30       	cpi	r18, 0x02	; 2
    123e:	31 05       	cpc	r19, r1
    1240:	2c f4       	brge	.+10     	; 0x124c <GPIO_setupPinDirection+0x4e>
    1242:	8c 81       	ldd	r24, Y+4	; 0x04
    1244:	9d 81       	ldd	r25, Y+5	; 0x05
    1246:	00 97       	sbiw	r24, 0x00	; 0
    1248:	71 f0       	breq	.+28     	; 0x1266 <GPIO_setupPinDirection+0x68>
    124a:	bc c0       	rjmp	.+376    	; 0x13c4 <GPIO_setupPinDirection+0x1c6>
    124c:	2c 81       	ldd	r18, Y+4	; 0x04
    124e:	3d 81       	ldd	r19, Y+5	; 0x05
    1250:	22 30       	cpi	r18, 0x02	; 2
    1252:	31 05       	cpc	r19, r1
    1254:	09 f4       	brne	.+2      	; 0x1258 <GPIO_setupPinDirection+0x5a>
    1256:	5f c0       	rjmp	.+190    	; 0x1316 <GPIO_setupPinDirection+0x118>
    1258:	8c 81       	ldd	r24, Y+4	; 0x04
    125a:	9d 81       	ldd	r25, Y+5	; 0x05
    125c:	83 30       	cpi	r24, 0x03	; 3
    125e:	91 05       	cpc	r25, r1
    1260:	09 f4       	brne	.+2      	; 0x1264 <GPIO_setupPinDirection+0x66>
    1262:	85 c0       	rjmp	.+266    	; 0x136e <GPIO_setupPinDirection+0x170>
    1264:	af c0       	rjmp	.+350    	; 0x13c4 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    1266:	8b 81       	ldd	r24, Y+3	; 0x03
    1268:	81 30       	cpi	r24, 0x01	; 1
    126a:	a1 f4       	brne	.+40     	; 0x1294 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    126c:	aa e3       	ldi	r26, 0x3A	; 58
    126e:	b0 e0       	ldi	r27, 0x00	; 0
    1270:	ea e3       	ldi	r30, 0x3A	; 58
    1272:	f0 e0       	ldi	r31, 0x00	; 0
    1274:	80 81       	ld	r24, Z
    1276:	48 2f       	mov	r20, r24
    1278:	8a 81       	ldd	r24, Y+2	; 0x02
    127a:	28 2f       	mov	r18, r24
    127c:	30 e0       	ldi	r19, 0x00	; 0
    127e:	81 e0       	ldi	r24, 0x01	; 1
    1280:	90 e0       	ldi	r25, 0x00	; 0
    1282:	02 2e       	mov	r0, r18
    1284:	02 c0       	rjmp	.+4      	; 0x128a <GPIO_setupPinDirection+0x8c>
    1286:	88 0f       	add	r24, r24
    1288:	99 1f       	adc	r25, r25
    128a:	0a 94       	dec	r0
    128c:	e2 f7       	brpl	.-8      	; 0x1286 <GPIO_setupPinDirection+0x88>
    128e:	84 2b       	or	r24, r20
    1290:	8c 93       	st	X, r24
    1292:	98 c0       	rjmp	.+304    	; 0x13c4 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1294:	aa e3       	ldi	r26, 0x3A	; 58
    1296:	b0 e0       	ldi	r27, 0x00	; 0
    1298:	ea e3       	ldi	r30, 0x3A	; 58
    129a:	f0 e0       	ldi	r31, 0x00	; 0
    129c:	80 81       	ld	r24, Z
    129e:	48 2f       	mov	r20, r24
    12a0:	8a 81       	ldd	r24, Y+2	; 0x02
    12a2:	28 2f       	mov	r18, r24
    12a4:	30 e0       	ldi	r19, 0x00	; 0
    12a6:	81 e0       	ldi	r24, 0x01	; 1
    12a8:	90 e0       	ldi	r25, 0x00	; 0
    12aa:	02 2e       	mov	r0, r18
    12ac:	02 c0       	rjmp	.+4      	; 0x12b2 <GPIO_setupPinDirection+0xb4>
    12ae:	88 0f       	add	r24, r24
    12b0:	99 1f       	adc	r25, r25
    12b2:	0a 94       	dec	r0
    12b4:	e2 f7       	brpl	.-8      	; 0x12ae <GPIO_setupPinDirection+0xb0>
    12b6:	80 95       	com	r24
    12b8:	84 23       	and	r24, r20
    12ba:	8c 93       	st	X, r24
    12bc:	83 c0       	rjmp	.+262    	; 0x13c4 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    12be:	8b 81       	ldd	r24, Y+3	; 0x03
    12c0:	81 30       	cpi	r24, 0x01	; 1
    12c2:	a1 f4       	brne	.+40     	; 0x12ec <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    12c4:	a7 e3       	ldi	r26, 0x37	; 55
    12c6:	b0 e0       	ldi	r27, 0x00	; 0
    12c8:	e7 e3       	ldi	r30, 0x37	; 55
    12ca:	f0 e0       	ldi	r31, 0x00	; 0
    12cc:	80 81       	ld	r24, Z
    12ce:	48 2f       	mov	r20, r24
    12d0:	8a 81       	ldd	r24, Y+2	; 0x02
    12d2:	28 2f       	mov	r18, r24
    12d4:	30 e0       	ldi	r19, 0x00	; 0
    12d6:	81 e0       	ldi	r24, 0x01	; 1
    12d8:	90 e0       	ldi	r25, 0x00	; 0
    12da:	02 2e       	mov	r0, r18
    12dc:	02 c0       	rjmp	.+4      	; 0x12e2 <GPIO_setupPinDirection+0xe4>
    12de:	88 0f       	add	r24, r24
    12e0:	99 1f       	adc	r25, r25
    12e2:	0a 94       	dec	r0
    12e4:	e2 f7       	brpl	.-8      	; 0x12de <GPIO_setupPinDirection+0xe0>
    12e6:	84 2b       	or	r24, r20
    12e8:	8c 93       	st	X, r24
    12ea:	6c c0       	rjmp	.+216    	; 0x13c4 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    12ec:	a7 e3       	ldi	r26, 0x37	; 55
    12ee:	b0 e0       	ldi	r27, 0x00	; 0
    12f0:	e7 e3       	ldi	r30, 0x37	; 55
    12f2:	f0 e0       	ldi	r31, 0x00	; 0
    12f4:	80 81       	ld	r24, Z
    12f6:	48 2f       	mov	r20, r24
    12f8:	8a 81       	ldd	r24, Y+2	; 0x02
    12fa:	28 2f       	mov	r18, r24
    12fc:	30 e0       	ldi	r19, 0x00	; 0
    12fe:	81 e0       	ldi	r24, 0x01	; 1
    1300:	90 e0       	ldi	r25, 0x00	; 0
    1302:	02 2e       	mov	r0, r18
    1304:	02 c0       	rjmp	.+4      	; 0x130a <GPIO_setupPinDirection+0x10c>
    1306:	88 0f       	add	r24, r24
    1308:	99 1f       	adc	r25, r25
    130a:	0a 94       	dec	r0
    130c:	e2 f7       	brpl	.-8      	; 0x1306 <GPIO_setupPinDirection+0x108>
    130e:	80 95       	com	r24
    1310:	84 23       	and	r24, r20
    1312:	8c 93       	st	X, r24
    1314:	57 c0       	rjmp	.+174    	; 0x13c4 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1316:	8b 81       	ldd	r24, Y+3	; 0x03
    1318:	81 30       	cpi	r24, 0x01	; 1
    131a:	a1 f4       	brne	.+40     	; 0x1344 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    131c:	a4 e3       	ldi	r26, 0x34	; 52
    131e:	b0 e0       	ldi	r27, 0x00	; 0
    1320:	e4 e3       	ldi	r30, 0x34	; 52
    1322:	f0 e0       	ldi	r31, 0x00	; 0
    1324:	80 81       	ld	r24, Z
    1326:	48 2f       	mov	r20, r24
    1328:	8a 81       	ldd	r24, Y+2	; 0x02
    132a:	28 2f       	mov	r18, r24
    132c:	30 e0       	ldi	r19, 0x00	; 0
    132e:	81 e0       	ldi	r24, 0x01	; 1
    1330:	90 e0       	ldi	r25, 0x00	; 0
    1332:	02 2e       	mov	r0, r18
    1334:	02 c0       	rjmp	.+4      	; 0x133a <GPIO_setupPinDirection+0x13c>
    1336:	88 0f       	add	r24, r24
    1338:	99 1f       	adc	r25, r25
    133a:	0a 94       	dec	r0
    133c:	e2 f7       	brpl	.-8      	; 0x1336 <GPIO_setupPinDirection+0x138>
    133e:	84 2b       	or	r24, r20
    1340:	8c 93       	st	X, r24
    1342:	40 c0       	rjmp	.+128    	; 0x13c4 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1344:	a4 e3       	ldi	r26, 0x34	; 52
    1346:	b0 e0       	ldi	r27, 0x00	; 0
    1348:	e4 e3       	ldi	r30, 0x34	; 52
    134a:	f0 e0       	ldi	r31, 0x00	; 0
    134c:	80 81       	ld	r24, Z
    134e:	48 2f       	mov	r20, r24
    1350:	8a 81       	ldd	r24, Y+2	; 0x02
    1352:	28 2f       	mov	r18, r24
    1354:	30 e0       	ldi	r19, 0x00	; 0
    1356:	81 e0       	ldi	r24, 0x01	; 1
    1358:	90 e0       	ldi	r25, 0x00	; 0
    135a:	02 2e       	mov	r0, r18
    135c:	02 c0       	rjmp	.+4      	; 0x1362 <GPIO_setupPinDirection+0x164>
    135e:	88 0f       	add	r24, r24
    1360:	99 1f       	adc	r25, r25
    1362:	0a 94       	dec	r0
    1364:	e2 f7       	brpl	.-8      	; 0x135e <GPIO_setupPinDirection+0x160>
    1366:	80 95       	com	r24
    1368:	84 23       	and	r24, r20
    136a:	8c 93       	st	X, r24
    136c:	2b c0       	rjmp	.+86     	; 0x13c4 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    136e:	8b 81       	ldd	r24, Y+3	; 0x03
    1370:	81 30       	cpi	r24, 0x01	; 1
    1372:	a1 f4       	brne	.+40     	; 0x139c <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1374:	a1 e3       	ldi	r26, 0x31	; 49
    1376:	b0 e0       	ldi	r27, 0x00	; 0
    1378:	e1 e3       	ldi	r30, 0x31	; 49
    137a:	f0 e0       	ldi	r31, 0x00	; 0
    137c:	80 81       	ld	r24, Z
    137e:	48 2f       	mov	r20, r24
    1380:	8a 81       	ldd	r24, Y+2	; 0x02
    1382:	28 2f       	mov	r18, r24
    1384:	30 e0       	ldi	r19, 0x00	; 0
    1386:	81 e0       	ldi	r24, 0x01	; 1
    1388:	90 e0       	ldi	r25, 0x00	; 0
    138a:	02 2e       	mov	r0, r18
    138c:	02 c0       	rjmp	.+4      	; 0x1392 <GPIO_setupPinDirection+0x194>
    138e:	88 0f       	add	r24, r24
    1390:	99 1f       	adc	r25, r25
    1392:	0a 94       	dec	r0
    1394:	e2 f7       	brpl	.-8      	; 0x138e <GPIO_setupPinDirection+0x190>
    1396:	84 2b       	or	r24, r20
    1398:	8c 93       	st	X, r24
    139a:	14 c0       	rjmp	.+40     	; 0x13c4 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    139c:	a1 e3       	ldi	r26, 0x31	; 49
    139e:	b0 e0       	ldi	r27, 0x00	; 0
    13a0:	e1 e3       	ldi	r30, 0x31	; 49
    13a2:	f0 e0       	ldi	r31, 0x00	; 0
    13a4:	80 81       	ld	r24, Z
    13a6:	48 2f       	mov	r20, r24
    13a8:	8a 81       	ldd	r24, Y+2	; 0x02
    13aa:	28 2f       	mov	r18, r24
    13ac:	30 e0       	ldi	r19, 0x00	; 0
    13ae:	81 e0       	ldi	r24, 0x01	; 1
    13b0:	90 e0       	ldi	r25, 0x00	; 0
    13b2:	02 2e       	mov	r0, r18
    13b4:	02 c0       	rjmp	.+4      	; 0x13ba <GPIO_setupPinDirection+0x1bc>
    13b6:	88 0f       	add	r24, r24
    13b8:	99 1f       	adc	r25, r25
    13ba:	0a 94       	dec	r0
    13bc:	e2 f7       	brpl	.-8      	; 0x13b6 <GPIO_setupPinDirection+0x1b8>
    13be:	80 95       	com	r24
    13c0:	84 23       	and	r24, r20
    13c2:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    13c4:	0f 90       	pop	r0
    13c6:	0f 90       	pop	r0
    13c8:	0f 90       	pop	r0
    13ca:	0f 90       	pop	r0
    13cc:	0f 90       	pop	r0
    13ce:	cf 91       	pop	r28
    13d0:	df 91       	pop	r29
    13d2:	08 95       	ret

000013d4 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    13d4:	df 93       	push	r29
    13d6:	cf 93       	push	r28
    13d8:	00 d0       	rcall	.+0      	; 0x13da <GPIO_writePin+0x6>
    13da:	00 d0       	rcall	.+0      	; 0x13dc <GPIO_writePin+0x8>
    13dc:	0f 92       	push	r0
    13de:	cd b7       	in	r28, 0x3d	; 61
    13e0:	de b7       	in	r29, 0x3e	; 62
    13e2:	89 83       	std	Y+1, r24	; 0x01
    13e4:	6a 83       	std	Y+2, r22	; 0x02
    13e6:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    13e8:	8a 81       	ldd	r24, Y+2	; 0x02
    13ea:	88 30       	cpi	r24, 0x08	; 8
    13ec:	08 f0       	brcs	.+2      	; 0x13f0 <GPIO_writePin+0x1c>
    13ee:	d5 c0       	rjmp	.+426    	; 0x159a <GPIO_writePin+0x1c6>
    13f0:	89 81       	ldd	r24, Y+1	; 0x01
    13f2:	84 30       	cpi	r24, 0x04	; 4
    13f4:	08 f0       	brcs	.+2      	; 0x13f8 <GPIO_writePin+0x24>
    13f6:	d1 c0       	rjmp	.+418    	; 0x159a <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    13f8:	89 81       	ldd	r24, Y+1	; 0x01
    13fa:	28 2f       	mov	r18, r24
    13fc:	30 e0       	ldi	r19, 0x00	; 0
    13fe:	3d 83       	std	Y+5, r19	; 0x05
    1400:	2c 83       	std	Y+4, r18	; 0x04
    1402:	8c 81       	ldd	r24, Y+4	; 0x04
    1404:	9d 81       	ldd	r25, Y+5	; 0x05
    1406:	81 30       	cpi	r24, 0x01	; 1
    1408:	91 05       	cpc	r25, r1
    140a:	09 f4       	brne	.+2      	; 0x140e <GPIO_writePin+0x3a>
    140c:	43 c0       	rjmp	.+134    	; 0x1494 <GPIO_writePin+0xc0>
    140e:	2c 81       	ldd	r18, Y+4	; 0x04
    1410:	3d 81       	ldd	r19, Y+5	; 0x05
    1412:	22 30       	cpi	r18, 0x02	; 2
    1414:	31 05       	cpc	r19, r1
    1416:	2c f4       	brge	.+10     	; 0x1422 <GPIO_writePin+0x4e>
    1418:	8c 81       	ldd	r24, Y+4	; 0x04
    141a:	9d 81       	ldd	r25, Y+5	; 0x05
    141c:	00 97       	sbiw	r24, 0x00	; 0
    141e:	71 f0       	breq	.+28     	; 0x143c <GPIO_writePin+0x68>
    1420:	bc c0       	rjmp	.+376    	; 0x159a <GPIO_writePin+0x1c6>
    1422:	2c 81       	ldd	r18, Y+4	; 0x04
    1424:	3d 81       	ldd	r19, Y+5	; 0x05
    1426:	22 30       	cpi	r18, 0x02	; 2
    1428:	31 05       	cpc	r19, r1
    142a:	09 f4       	brne	.+2      	; 0x142e <GPIO_writePin+0x5a>
    142c:	5f c0       	rjmp	.+190    	; 0x14ec <GPIO_writePin+0x118>
    142e:	8c 81       	ldd	r24, Y+4	; 0x04
    1430:	9d 81       	ldd	r25, Y+5	; 0x05
    1432:	83 30       	cpi	r24, 0x03	; 3
    1434:	91 05       	cpc	r25, r1
    1436:	09 f4       	brne	.+2      	; 0x143a <GPIO_writePin+0x66>
    1438:	85 c0       	rjmp	.+266    	; 0x1544 <GPIO_writePin+0x170>
    143a:	af c0       	rjmp	.+350    	; 0x159a <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    143c:	8b 81       	ldd	r24, Y+3	; 0x03
    143e:	81 30       	cpi	r24, 0x01	; 1
    1440:	a1 f4       	brne	.+40     	; 0x146a <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1442:	ab e3       	ldi	r26, 0x3B	; 59
    1444:	b0 e0       	ldi	r27, 0x00	; 0
    1446:	eb e3       	ldi	r30, 0x3B	; 59
    1448:	f0 e0       	ldi	r31, 0x00	; 0
    144a:	80 81       	ld	r24, Z
    144c:	48 2f       	mov	r20, r24
    144e:	8a 81       	ldd	r24, Y+2	; 0x02
    1450:	28 2f       	mov	r18, r24
    1452:	30 e0       	ldi	r19, 0x00	; 0
    1454:	81 e0       	ldi	r24, 0x01	; 1
    1456:	90 e0       	ldi	r25, 0x00	; 0
    1458:	02 2e       	mov	r0, r18
    145a:	02 c0       	rjmp	.+4      	; 0x1460 <GPIO_writePin+0x8c>
    145c:	88 0f       	add	r24, r24
    145e:	99 1f       	adc	r25, r25
    1460:	0a 94       	dec	r0
    1462:	e2 f7       	brpl	.-8      	; 0x145c <GPIO_writePin+0x88>
    1464:	84 2b       	or	r24, r20
    1466:	8c 93       	st	X, r24
    1468:	98 c0       	rjmp	.+304    	; 0x159a <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    146a:	ab e3       	ldi	r26, 0x3B	; 59
    146c:	b0 e0       	ldi	r27, 0x00	; 0
    146e:	eb e3       	ldi	r30, 0x3B	; 59
    1470:	f0 e0       	ldi	r31, 0x00	; 0
    1472:	80 81       	ld	r24, Z
    1474:	48 2f       	mov	r20, r24
    1476:	8a 81       	ldd	r24, Y+2	; 0x02
    1478:	28 2f       	mov	r18, r24
    147a:	30 e0       	ldi	r19, 0x00	; 0
    147c:	81 e0       	ldi	r24, 0x01	; 1
    147e:	90 e0       	ldi	r25, 0x00	; 0
    1480:	02 2e       	mov	r0, r18
    1482:	02 c0       	rjmp	.+4      	; 0x1488 <GPIO_writePin+0xb4>
    1484:	88 0f       	add	r24, r24
    1486:	99 1f       	adc	r25, r25
    1488:	0a 94       	dec	r0
    148a:	e2 f7       	brpl	.-8      	; 0x1484 <GPIO_writePin+0xb0>
    148c:	80 95       	com	r24
    148e:	84 23       	and	r24, r20
    1490:	8c 93       	st	X, r24
    1492:	83 c0       	rjmp	.+262    	; 0x159a <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1494:	8b 81       	ldd	r24, Y+3	; 0x03
    1496:	81 30       	cpi	r24, 0x01	; 1
    1498:	a1 f4       	brne	.+40     	; 0x14c2 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    149a:	a8 e3       	ldi	r26, 0x38	; 56
    149c:	b0 e0       	ldi	r27, 0x00	; 0
    149e:	e8 e3       	ldi	r30, 0x38	; 56
    14a0:	f0 e0       	ldi	r31, 0x00	; 0
    14a2:	80 81       	ld	r24, Z
    14a4:	48 2f       	mov	r20, r24
    14a6:	8a 81       	ldd	r24, Y+2	; 0x02
    14a8:	28 2f       	mov	r18, r24
    14aa:	30 e0       	ldi	r19, 0x00	; 0
    14ac:	81 e0       	ldi	r24, 0x01	; 1
    14ae:	90 e0       	ldi	r25, 0x00	; 0
    14b0:	02 2e       	mov	r0, r18
    14b2:	02 c0       	rjmp	.+4      	; 0x14b8 <GPIO_writePin+0xe4>
    14b4:	88 0f       	add	r24, r24
    14b6:	99 1f       	adc	r25, r25
    14b8:	0a 94       	dec	r0
    14ba:	e2 f7       	brpl	.-8      	; 0x14b4 <GPIO_writePin+0xe0>
    14bc:	84 2b       	or	r24, r20
    14be:	8c 93       	st	X, r24
    14c0:	6c c0       	rjmp	.+216    	; 0x159a <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    14c2:	a8 e3       	ldi	r26, 0x38	; 56
    14c4:	b0 e0       	ldi	r27, 0x00	; 0
    14c6:	e8 e3       	ldi	r30, 0x38	; 56
    14c8:	f0 e0       	ldi	r31, 0x00	; 0
    14ca:	80 81       	ld	r24, Z
    14cc:	48 2f       	mov	r20, r24
    14ce:	8a 81       	ldd	r24, Y+2	; 0x02
    14d0:	28 2f       	mov	r18, r24
    14d2:	30 e0       	ldi	r19, 0x00	; 0
    14d4:	81 e0       	ldi	r24, 0x01	; 1
    14d6:	90 e0       	ldi	r25, 0x00	; 0
    14d8:	02 2e       	mov	r0, r18
    14da:	02 c0       	rjmp	.+4      	; 0x14e0 <GPIO_writePin+0x10c>
    14dc:	88 0f       	add	r24, r24
    14de:	99 1f       	adc	r25, r25
    14e0:	0a 94       	dec	r0
    14e2:	e2 f7       	brpl	.-8      	; 0x14dc <GPIO_writePin+0x108>
    14e4:	80 95       	com	r24
    14e6:	84 23       	and	r24, r20
    14e8:	8c 93       	st	X, r24
    14ea:	57 c0       	rjmp	.+174    	; 0x159a <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    14ec:	8b 81       	ldd	r24, Y+3	; 0x03
    14ee:	81 30       	cpi	r24, 0x01	; 1
    14f0:	a1 f4       	brne	.+40     	; 0x151a <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    14f2:	a5 e3       	ldi	r26, 0x35	; 53
    14f4:	b0 e0       	ldi	r27, 0x00	; 0
    14f6:	e5 e3       	ldi	r30, 0x35	; 53
    14f8:	f0 e0       	ldi	r31, 0x00	; 0
    14fa:	80 81       	ld	r24, Z
    14fc:	48 2f       	mov	r20, r24
    14fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1500:	28 2f       	mov	r18, r24
    1502:	30 e0       	ldi	r19, 0x00	; 0
    1504:	81 e0       	ldi	r24, 0x01	; 1
    1506:	90 e0       	ldi	r25, 0x00	; 0
    1508:	02 2e       	mov	r0, r18
    150a:	02 c0       	rjmp	.+4      	; 0x1510 <GPIO_writePin+0x13c>
    150c:	88 0f       	add	r24, r24
    150e:	99 1f       	adc	r25, r25
    1510:	0a 94       	dec	r0
    1512:	e2 f7       	brpl	.-8      	; 0x150c <GPIO_writePin+0x138>
    1514:	84 2b       	or	r24, r20
    1516:	8c 93       	st	X, r24
    1518:	40 c0       	rjmp	.+128    	; 0x159a <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    151a:	a5 e3       	ldi	r26, 0x35	; 53
    151c:	b0 e0       	ldi	r27, 0x00	; 0
    151e:	e5 e3       	ldi	r30, 0x35	; 53
    1520:	f0 e0       	ldi	r31, 0x00	; 0
    1522:	80 81       	ld	r24, Z
    1524:	48 2f       	mov	r20, r24
    1526:	8a 81       	ldd	r24, Y+2	; 0x02
    1528:	28 2f       	mov	r18, r24
    152a:	30 e0       	ldi	r19, 0x00	; 0
    152c:	81 e0       	ldi	r24, 0x01	; 1
    152e:	90 e0       	ldi	r25, 0x00	; 0
    1530:	02 2e       	mov	r0, r18
    1532:	02 c0       	rjmp	.+4      	; 0x1538 <GPIO_writePin+0x164>
    1534:	88 0f       	add	r24, r24
    1536:	99 1f       	adc	r25, r25
    1538:	0a 94       	dec	r0
    153a:	e2 f7       	brpl	.-8      	; 0x1534 <GPIO_writePin+0x160>
    153c:	80 95       	com	r24
    153e:	84 23       	and	r24, r20
    1540:	8c 93       	st	X, r24
    1542:	2b c0       	rjmp	.+86     	; 0x159a <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1544:	8b 81       	ldd	r24, Y+3	; 0x03
    1546:	81 30       	cpi	r24, 0x01	; 1
    1548:	a1 f4       	brne	.+40     	; 0x1572 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    154a:	a2 e3       	ldi	r26, 0x32	; 50
    154c:	b0 e0       	ldi	r27, 0x00	; 0
    154e:	e2 e3       	ldi	r30, 0x32	; 50
    1550:	f0 e0       	ldi	r31, 0x00	; 0
    1552:	80 81       	ld	r24, Z
    1554:	48 2f       	mov	r20, r24
    1556:	8a 81       	ldd	r24, Y+2	; 0x02
    1558:	28 2f       	mov	r18, r24
    155a:	30 e0       	ldi	r19, 0x00	; 0
    155c:	81 e0       	ldi	r24, 0x01	; 1
    155e:	90 e0       	ldi	r25, 0x00	; 0
    1560:	02 2e       	mov	r0, r18
    1562:	02 c0       	rjmp	.+4      	; 0x1568 <GPIO_writePin+0x194>
    1564:	88 0f       	add	r24, r24
    1566:	99 1f       	adc	r25, r25
    1568:	0a 94       	dec	r0
    156a:	e2 f7       	brpl	.-8      	; 0x1564 <GPIO_writePin+0x190>
    156c:	84 2b       	or	r24, r20
    156e:	8c 93       	st	X, r24
    1570:	14 c0       	rjmp	.+40     	; 0x159a <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1572:	a2 e3       	ldi	r26, 0x32	; 50
    1574:	b0 e0       	ldi	r27, 0x00	; 0
    1576:	e2 e3       	ldi	r30, 0x32	; 50
    1578:	f0 e0       	ldi	r31, 0x00	; 0
    157a:	80 81       	ld	r24, Z
    157c:	48 2f       	mov	r20, r24
    157e:	8a 81       	ldd	r24, Y+2	; 0x02
    1580:	28 2f       	mov	r18, r24
    1582:	30 e0       	ldi	r19, 0x00	; 0
    1584:	81 e0       	ldi	r24, 0x01	; 1
    1586:	90 e0       	ldi	r25, 0x00	; 0
    1588:	02 2e       	mov	r0, r18
    158a:	02 c0       	rjmp	.+4      	; 0x1590 <GPIO_writePin+0x1bc>
    158c:	88 0f       	add	r24, r24
    158e:	99 1f       	adc	r25, r25
    1590:	0a 94       	dec	r0
    1592:	e2 f7       	brpl	.-8      	; 0x158c <GPIO_writePin+0x1b8>
    1594:	80 95       	com	r24
    1596:	84 23       	and	r24, r20
    1598:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    159a:	0f 90       	pop	r0
    159c:	0f 90       	pop	r0
    159e:	0f 90       	pop	r0
    15a0:	0f 90       	pop	r0
    15a2:	0f 90       	pop	r0
    15a4:	cf 91       	pop	r28
    15a6:	df 91       	pop	r29
    15a8:	08 95       	ret

000015aa <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    15aa:	df 93       	push	r29
    15ac:	cf 93       	push	r28
    15ae:	00 d0       	rcall	.+0      	; 0x15b0 <GPIO_readPin+0x6>
    15b0:	00 d0       	rcall	.+0      	; 0x15b2 <GPIO_readPin+0x8>
    15b2:	0f 92       	push	r0
    15b4:	cd b7       	in	r28, 0x3d	; 61
    15b6:	de b7       	in	r29, 0x3e	; 62
    15b8:	8a 83       	std	Y+2, r24	; 0x02
    15ba:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    15bc:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    15be:	8b 81       	ldd	r24, Y+3	; 0x03
    15c0:	88 30       	cpi	r24, 0x08	; 8
    15c2:	08 f0       	brcs	.+2      	; 0x15c6 <GPIO_readPin+0x1c>
    15c4:	84 c0       	rjmp	.+264    	; 0x16ce <GPIO_readPin+0x124>
    15c6:	8a 81       	ldd	r24, Y+2	; 0x02
    15c8:	84 30       	cpi	r24, 0x04	; 4
    15ca:	08 f0       	brcs	.+2      	; 0x15ce <GPIO_readPin+0x24>
    15cc:	80 c0       	rjmp	.+256    	; 0x16ce <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    15ce:	8a 81       	ldd	r24, Y+2	; 0x02
    15d0:	28 2f       	mov	r18, r24
    15d2:	30 e0       	ldi	r19, 0x00	; 0
    15d4:	3d 83       	std	Y+5, r19	; 0x05
    15d6:	2c 83       	std	Y+4, r18	; 0x04
    15d8:	4c 81       	ldd	r20, Y+4	; 0x04
    15da:	5d 81       	ldd	r21, Y+5	; 0x05
    15dc:	41 30       	cpi	r20, 0x01	; 1
    15de:	51 05       	cpc	r21, r1
    15e0:	79 f1       	breq	.+94     	; 0x1640 <GPIO_readPin+0x96>
    15e2:	8c 81       	ldd	r24, Y+4	; 0x04
    15e4:	9d 81       	ldd	r25, Y+5	; 0x05
    15e6:	82 30       	cpi	r24, 0x02	; 2
    15e8:	91 05       	cpc	r25, r1
    15ea:	34 f4       	brge	.+12     	; 0x15f8 <GPIO_readPin+0x4e>
    15ec:	2c 81       	ldd	r18, Y+4	; 0x04
    15ee:	3d 81       	ldd	r19, Y+5	; 0x05
    15f0:	21 15       	cp	r18, r1
    15f2:	31 05       	cpc	r19, r1
    15f4:	69 f0       	breq	.+26     	; 0x1610 <GPIO_readPin+0x66>
    15f6:	6b c0       	rjmp	.+214    	; 0x16ce <GPIO_readPin+0x124>
    15f8:	4c 81       	ldd	r20, Y+4	; 0x04
    15fa:	5d 81       	ldd	r21, Y+5	; 0x05
    15fc:	42 30       	cpi	r20, 0x02	; 2
    15fe:	51 05       	cpc	r21, r1
    1600:	b9 f1       	breq	.+110    	; 0x1670 <GPIO_readPin+0xc6>
    1602:	8c 81       	ldd	r24, Y+4	; 0x04
    1604:	9d 81       	ldd	r25, Y+5	; 0x05
    1606:	83 30       	cpi	r24, 0x03	; 3
    1608:	91 05       	cpc	r25, r1
    160a:	09 f4       	brne	.+2      	; 0x160e <GPIO_readPin+0x64>
    160c:	49 c0       	rjmp	.+146    	; 0x16a0 <GPIO_readPin+0xf6>
    160e:	5f c0       	rjmp	.+190    	; 0x16ce <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1610:	e9 e3       	ldi	r30, 0x39	; 57
    1612:	f0 e0       	ldi	r31, 0x00	; 0
    1614:	80 81       	ld	r24, Z
    1616:	28 2f       	mov	r18, r24
    1618:	30 e0       	ldi	r19, 0x00	; 0
    161a:	8b 81       	ldd	r24, Y+3	; 0x03
    161c:	88 2f       	mov	r24, r24
    161e:	90 e0       	ldi	r25, 0x00	; 0
    1620:	a9 01       	movw	r20, r18
    1622:	02 c0       	rjmp	.+4      	; 0x1628 <GPIO_readPin+0x7e>
    1624:	55 95       	asr	r21
    1626:	47 95       	ror	r20
    1628:	8a 95       	dec	r24
    162a:	e2 f7       	brpl	.-8      	; 0x1624 <GPIO_readPin+0x7a>
    162c:	ca 01       	movw	r24, r20
    162e:	81 70       	andi	r24, 0x01	; 1
    1630:	90 70       	andi	r25, 0x00	; 0
    1632:	88 23       	and	r24, r24
    1634:	19 f0       	breq	.+6      	; 0x163c <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1636:	81 e0       	ldi	r24, 0x01	; 1
    1638:	89 83       	std	Y+1, r24	; 0x01
    163a:	49 c0       	rjmp	.+146    	; 0x16ce <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    163c:	19 82       	std	Y+1, r1	; 0x01
    163e:	47 c0       	rjmp	.+142    	; 0x16ce <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1640:	e6 e3       	ldi	r30, 0x36	; 54
    1642:	f0 e0       	ldi	r31, 0x00	; 0
    1644:	80 81       	ld	r24, Z
    1646:	28 2f       	mov	r18, r24
    1648:	30 e0       	ldi	r19, 0x00	; 0
    164a:	8b 81       	ldd	r24, Y+3	; 0x03
    164c:	88 2f       	mov	r24, r24
    164e:	90 e0       	ldi	r25, 0x00	; 0
    1650:	a9 01       	movw	r20, r18
    1652:	02 c0       	rjmp	.+4      	; 0x1658 <GPIO_readPin+0xae>
    1654:	55 95       	asr	r21
    1656:	47 95       	ror	r20
    1658:	8a 95       	dec	r24
    165a:	e2 f7       	brpl	.-8      	; 0x1654 <GPIO_readPin+0xaa>
    165c:	ca 01       	movw	r24, r20
    165e:	81 70       	andi	r24, 0x01	; 1
    1660:	90 70       	andi	r25, 0x00	; 0
    1662:	88 23       	and	r24, r24
    1664:	19 f0       	breq	.+6      	; 0x166c <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1666:	81 e0       	ldi	r24, 0x01	; 1
    1668:	89 83       	std	Y+1, r24	; 0x01
    166a:	31 c0       	rjmp	.+98     	; 0x16ce <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    166c:	19 82       	std	Y+1, r1	; 0x01
    166e:	2f c0       	rjmp	.+94     	; 0x16ce <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1670:	e3 e3       	ldi	r30, 0x33	; 51
    1672:	f0 e0       	ldi	r31, 0x00	; 0
    1674:	80 81       	ld	r24, Z
    1676:	28 2f       	mov	r18, r24
    1678:	30 e0       	ldi	r19, 0x00	; 0
    167a:	8b 81       	ldd	r24, Y+3	; 0x03
    167c:	88 2f       	mov	r24, r24
    167e:	90 e0       	ldi	r25, 0x00	; 0
    1680:	a9 01       	movw	r20, r18
    1682:	02 c0       	rjmp	.+4      	; 0x1688 <GPIO_readPin+0xde>
    1684:	55 95       	asr	r21
    1686:	47 95       	ror	r20
    1688:	8a 95       	dec	r24
    168a:	e2 f7       	brpl	.-8      	; 0x1684 <GPIO_readPin+0xda>
    168c:	ca 01       	movw	r24, r20
    168e:	81 70       	andi	r24, 0x01	; 1
    1690:	90 70       	andi	r25, 0x00	; 0
    1692:	88 23       	and	r24, r24
    1694:	19 f0       	breq	.+6      	; 0x169c <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1696:	81 e0       	ldi	r24, 0x01	; 1
    1698:	89 83       	std	Y+1, r24	; 0x01
    169a:	19 c0       	rjmp	.+50     	; 0x16ce <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    169c:	19 82       	std	Y+1, r1	; 0x01
    169e:	17 c0       	rjmp	.+46     	; 0x16ce <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    16a0:	e0 e3       	ldi	r30, 0x30	; 48
    16a2:	f0 e0       	ldi	r31, 0x00	; 0
    16a4:	80 81       	ld	r24, Z
    16a6:	28 2f       	mov	r18, r24
    16a8:	30 e0       	ldi	r19, 0x00	; 0
    16aa:	8b 81       	ldd	r24, Y+3	; 0x03
    16ac:	88 2f       	mov	r24, r24
    16ae:	90 e0       	ldi	r25, 0x00	; 0
    16b0:	a9 01       	movw	r20, r18
    16b2:	02 c0       	rjmp	.+4      	; 0x16b8 <GPIO_readPin+0x10e>
    16b4:	55 95       	asr	r21
    16b6:	47 95       	ror	r20
    16b8:	8a 95       	dec	r24
    16ba:	e2 f7       	brpl	.-8      	; 0x16b4 <GPIO_readPin+0x10a>
    16bc:	ca 01       	movw	r24, r20
    16be:	81 70       	andi	r24, 0x01	; 1
    16c0:	90 70       	andi	r25, 0x00	; 0
    16c2:	88 23       	and	r24, r24
    16c4:	19 f0       	breq	.+6      	; 0x16cc <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    16c6:	81 e0       	ldi	r24, 0x01	; 1
    16c8:	89 83       	std	Y+1, r24	; 0x01
    16ca:	01 c0       	rjmp	.+2      	; 0x16ce <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    16cc:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    16ce:	89 81       	ldd	r24, Y+1	; 0x01
}
    16d0:	0f 90       	pop	r0
    16d2:	0f 90       	pop	r0
    16d4:	0f 90       	pop	r0
    16d6:	0f 90       	pop	r0
    16d8:	0f 90       	pop	r0
    16da:	cf 91       	pop	r28
    16dc:	df 91       	pop	r29
    16de:	08 95       	ret

000016e0 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    16e0:	df 93       	push	r29
    16e2:	cf 93       	push	r28
    16e4:	00 d0       	rcall	.+0      	; 0x16e6 <GPIO_setupPortDirection+0x6>
    16e6:	00 d0       	rcall	.+0      	; 0x16e8 <GPIO_setupPortDirection+0x8>
    16e8:	cd b7       	in	r28, 0x3d	; 61
    16ea:	de b7       	in	r29, 0x3e	; 62
    16ec:	89 83       	std	Y+1, r24	; 0x01
    16ee:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    16f0:	89 81       	ldd	r24, Y+1	; 0x01
    16f2:	84 30       	cpi	r24, 0x04	; 4
    16f4:	90 f5       	brcc	.+100    	; 0x175a <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    16f6:	89 81       	ldd	r24, Y+1	; 0x01
    16f8:	28 2f       	mov	r18, r24
    16fa:	30 e0       	ldi	r19, 0x00	; 0
    16fc:	3c 83       	std	Y+4, r19	; 0x04
    16fe:	2b 83       	std	Y+3, r18	; 0x03
    1700:	8b 81       	ldd	r24, Y+3	; 0x03
    1702:	9c 81       	ldd	r25, Y+4	; 0x04
    1704:	81 30       	cpi	r24, 0x01	; 1
    1706:	91 05       	cpc	r25, r1
    1708:	d1 f0       	breq	.+52     	; 0x173e <GPIO_setupPortDirection+0x5e>
    170a:	2b 81       	ldd	r18, Y+3	; 0x03
    170c:	3c 81       	ldd	r19, Y+4	; 0x04
    170e:	22 30       	cpi	r18, 0x02	; 2
    1710:	31 05       	cpc	r19, r1
    1712:	2c f4       	brge	.+10     	; 0x171e <GPIO_setupPortDirection+0x3e>
    1714:	8b 81       	ldd	r24, Y+3	; 0x03
    1716:	9c 81       	ldd	r25, Y+4	; 0x04
    1718:	00 97       	sbiw	r24, 0x00	; 0
    171a:	61 f0       	breq	.+24     	; 0x1734 <GPIO_setupPortDirection+0x54>
    171c:	1e c0       	rjmp	.+60     	; 0x175a <GPIO_setupPortDirection+0x7a>
    171e:	2b 81       	ldd	r18, Y+3	; 0x03
    1720:	3c 81       	ldd	r19, Y+4	; 0x04
    1722:	22 30       	cpi	r18, 0x02	; 2
    1724:	31 05       	cpc	r19, r1
    1726:	81 f0       	breq	.+32     	; 0x1748 <GPIO_setupPortDirection+0x68>
    1728:	8b 81       	ldd	r24, Y+3	; 0x03
    172a:	9c 81       	ldd	r25, Y+4	; 0x04
    172c:	83 30       	cpi	r24, 0x03	; 3
    172e:	91 05       	cpc	r25, r1
    1730:	81 f0       	breq	.+32     	; 0x1752 <GPIO_setupPortDirection+0x72>
    1732:	13 c0       	rjmp	.+38     	; 0x175a <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1734:	ea e3       	ldi	r30, 0x3A	; 58
    1736:	f0 e0       	ldi	r31, 0x00	; 0
    1738:	8a 81       	ldd	r24, Y+2	; 0x02
    173a:	80 83       	st	Z, r24
    173c:	0e c0       	rjmp	.+28     	; 0x175a <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    173e:	e7 e3       	ldi	r30, 0x37	; 55
    1740:	f0 e0       	ldi	r31, 0x00	; 0
    1742:	8a 81       	ldd	r24, Y+2	; 0x02
    1744:	80 83       	st	Z, r24
    1746:	09 c0       	rjmp	.+18     	; 0x175a <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1748:	e4 e3       	ldi	r30, 0x34	; 52
    174a:	f0 e0       	ldi	r31, 0x00	; 0
    174c:	8a 81       	ldd	r24, Y+2	; 0x02
    174e:	80 83       	st	Z, r24
    1750:	04 c0       	rjmp	.+8      	; 0x175a <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1752:	e1 e3       	ldi	r30, 0x31	; 49
    1754:	f0 e0       	ldi	r31, 0x00	; 0
    1756:	8a 81       	ldd	r24, Y+2	; 0x02
    1758:	80 83       	st	Z, r24
			break;
		}
	}
}
    175a:	0f 90       	pop	r0
    175c:	0f 90       	pop	r0
    175e:	0f 90       	pop	r0
    1760:	0f 90       	pop	r0
    1762:	cf 91       	pop	r28
    1764:	df 91       	pop	r29
    1766:	08 95       	ret

00001768 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1768:	df 93       	push	r29
    176a:	cf 93       	push	r28
    176c:	00 d0       	rcall	.+0      	; 0x176e <GPIO_writePort+0x6>
    176e:	00 d0       	rcall	.+0      	; 0x1770 <GPIO_writePort+0x8>
    1770:	cd b7       	in	r28, 0x3d	; 61
    1772:	de b7       	in	r29, 0x3e	; 62
    1774:	89 83       	std	Y+1, r24	; 0x01
    1776:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1778:	89 81       	ldd	r24, Y+1	; 0x01
    177a:	84 30       	cpi	r24, 0x04	; 4
    177c:	90 f5       	brcc	.+100    	; 0x17e2 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    177e:	89 81       	ldd	r24, Y+1	; 0x01
    1780:	28 2f       	mov	r18, r24
    1782:	30 e0       	ldi	r19, 0x00	; 0
    1784:	3c 83       	std	Y+4, r19	; 0x04
    1786:	2b 83       	std	Y+3, r18	; 0x03
    1788:	8b 81       	ldd	r24, Y+3	; 0x03
    178a:	9c 81       	ldd	r25, Y+4	; 0x04
    178c:	81 30       	cpi	r24, 0x01	; 1
    178e:	91 05       	cpc	r25, r1
    1790:	d1 f0       	breq	.+52     	; 0x17c6 <GPIO_writePort+0x5e>
    1792:	2b 81       	ldd	r18, Y+3	; 0x03
    1794:	3c 81       	ldd	r19, Y+4	; 0x04
    1796:	22 30       	cpi	r18, 0x02	; 2
    1798:	31 05       	cpc	r19, r1
    179a:	2c f4       	brge	.+10     	; 0x17a6 <GPIO_writePort+0x3e>
    179c:	8b 81       	ldd	r24, Y+3	; 0x03
    179e:	9c 81       	ldd	r25, Y+4	; 0x04
    17a0:	00 97       	sbiw	r24, 0x00	; 0
    17a2:	61 f0       	breq	.+24     	; 0x17bc <GPIO_writePort+0x54>
    17a4:	1e c0       	rjmp	.+60     	; 0x17e2 <GPIO_writePort+0x7a>
    17a6:	2b 81       	ldd	r18, Y+3	; 0x03
    17a8:	3c 81       	ldd	r19, Y+4	; 0x04
    17aa:	22 30       	cpi	r18, 0x02	; 2
    17ac:	31 05       	cpc	r19, r1
    17ae:	81 f0       	breq	.+32     	; 0x17d0 <GPIO_writePort+0x68>
    17b0:	8b 81       	ldd	r24, Y+3	; 0x03
    17b2:	9c 81       	ldd	r25, Y+4	; 0x04
    17b4:	83 30       	cpi	r24, 0x03	; 3
    17b6:	91 05       	cpc	r25, r1
    17b8:	81 f0       	breq	.+32     	; 0x17da <GPIO_writePort+0x72>
    17ba:	13 c0       	rjmp	.+38     	; 0x17e2 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    17bc:	eb e3       	ldi	r30, 0x3B	; 59
    17be:	f0 e0       	ldi	r31, 0x00	; 0
    17c0:	8a 81       	ldd	r24, Y+2	; 0x02
    17c2:	80 83       	st	Z, r24
    17c4:	0e c0       	rjmp	.+28     	; 0x17e2 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    17c6:	e8 e3       	ldi	r30, 0x38	; 56
    17c8:	f0 e0       	ldi	r31, 0x00	; 0
    17ca:	8a 81       	ldd	r24, Y+2	; 0x02
    17cc:	80 83       	st	Z, r24
    17ce:	09 c0       	rjmp	.+18     	; 0x17e2 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    17d0:	e5 e3       	ldi	r30, 0x35	; 53
    17d2:	f0 e0       	ldi	r31, 0x00	; 0
    17d4:	8a 81       	ldd	r24, Y+2	; 0x02
    17d6:	80 83       	st	Z, r24
    17d8:	04 c0       	rjmp	.+8      	; 0x17e2 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    17da:	e2 e3       	ldi	r30, 0x32	; 50
    17dc:	f0 e0       	ldi	r31, 0x00	; 0
    17de:	8a 81       	ldd	r24, Y+2	; 0x02
    17e0:	80 83       	st	Z, r24
			break;
		}
	}
}
    17e2:	0f 90       	pop	r0
    17e4:	0f 90       	pop	r0
    17e6:	0f 90       	pop	r0
    17e8:	0f 90       	pop	r0
    17ea:	cf 91       	pop	r28
    17ec:	df 91       	pop	r29
    17ee:	08 95       	ret

000017f0 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    17f0:	df 93       	push	r29
    17f2:	cf 93       	push	r28
    17f4:	00 d0       	rcall	.+0      	; 0x17f6 <GPIO_readPort+0x6>
    17f6:	00 d0       	rcall	.+0      	; 0x17f8 <GPIO_readPort+0x8>
    17f8:	cd b7       	in	r28, 0x3d	; 61
    17fa:	de b7       	in	r29, 0x3e	; 62
    17fc:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    17fe:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1800:	8a 81       	ldd	r24, Y+2	; 0x02
    1802:	84 30       	cpi	r24, 0x04	; 4
    1804:	90 f5       	brcc	.+100    	; 0x186a <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1806:	8a 81       	ldd	r24, Y+2	; 0x02
    1808:	28 2f       	mov	r18, r24
    180a:	30 e0       	ldi	r19, 0x00	; 0
    180c:	3c 83       	std	Y+4, r19	; 0x04
    180e:	2b 83       	std	Y+3, r18	; 0x03
    1810:	8b 81       	ldd	r24, Y+3	; 0x03
    1812:	9c 81       	ldd	r25, Y+4	; 0x04
    1814:	81 30       	cpi	r24, 0x01	; 1
    1816:	91 05       	cpc	r25, r1
    1818:	d1 f0       	breq	.+52     	; 0x184e <GPIO_readPort+0x5e>
    181a:	2b 81       	ldd	r18, Y+3	; 0x03
    181c:	3c 81       	ldd	r19, Y+4	; 0x04
    181e:	22 30       	cpi	r18, 0x02	; 2
    1820:	31 05       	cpc	r19, r1
    1822:	2c f4       	brge	.+10     	; 0x182e <GPIO_readPort+0x3e>
    1824:	8b 81       	ldd	r24, Y+3	; 0x03
    1826:	9c 81       	ldd	r25, Y+4	; 0x04
    1828:	00 97       	sbiw	r24, 0x00	; 0
    182a:	61 f0       	breq	.+24     	; 0x1844 <GPIO_readPort+0x54>
    182c:	1e c0       	rjmp	.+60     	; 0x186a <GPIO_readPort+0x7a>
    182e:	2b 81       	ldd	r18, Y+3	; 0x03
    1830:	3c 81       	ldd	r19, Y+4	; 0x04
    1832:	22 30       	cpi	r18, 0x02	; 2
    1834:	31 05       	cpc	r19, r1
    1836:	81 f0       	breq	.+32     	; 0x1858 <GPIO_readPort+0x68>
    1838:	8b 81       	ldd	r24, Y+3	; 0x03
    183a:	9c 81       	ldd	r25, Y+4	; 0x04
    183c:	83 30       	cpi	r24, 0x03	; 3
    183e:	91 05       	cpc	r25, r1
    1840:	81 f0       	breq	.+32     	; 0x1862 <GPIO_readPort+0x72>
    1842:	13 c0       	rjmp	.+38     	; 0x186a <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1844:	e9 e3       	ldi	r30, 0x39	; 57
    1846:	f0 e0       	ldi	r31, 0x00	; 0
    1848:	80 81       	ld	r24, Z
    184a:	89 83       	std	Y+1, r24	; 0x01
    184c:	0e c0       	rjmp	.+28     	; 0x186a <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    184e:	e6 e3       	ldi	r30, 0x36	; 54
    1850:	f0 e0       	ldi	r31, 0x00	; 0
    1852:	80 81       	ld	r24, Z
    1854:	89 83       	std	Y+1, r24	; 0x01
    1856:	09 c0       	rjmp	.+18     	; 0x186a <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1858:	e3 e3       	ldi	r30, 0x33	; 51
    185a:	f0 e0       	ldi	r31, 0x00	; 0
    185c:	80 81       	ld	r24, Z
    185e:	89 83       	std	Y+1, r24	; 0x01
    1860:	04 c0       	rjmp	.+8      	; 0x186a <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1862:	e0 e3       	ldi	r30, 0x30	; 48
    1864:	f0 e0       	ldi	r31, 0x00	; 0
    1866:	80 81       	ld	r24, Z
    1868:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    186a:	89 81       	ldd	r24, Y+1	; 0x01
}
    186c:	0f 90       	pop	r0
    186e:	0f 90       	pop	r0
    1870:	0f 90       	pop	r0
    1872:	0f 90       	pop	r0
    1874:	cf 91       	pop	r28
    1876:	df 91       	pop	r29
    1878:	08 95       	ret

0000187a <TWI_init>:
#include <avr/io.h>

#define F_CPU 8000000UL  // CPU frquency
TWI_ConfigType I2C_config={.address=MY_ADDRESS,.bit_rate=TWI_BIT_RATE_400KHZ};

void TWI_init(const TWI_ConfigType *config) {
    187a:	0f 93       	push	r16
    187c:	1f 93       	push	r17
    187e:	df 93       	push	r29
    1880:	cf 93       	push	r28
    1882:	00 d0       	rcall	.+0      	; 0x1884 <TWI_init+0xa>
    1884:	cd b7       	in	r28, 0x3d	; 61
    1886:	de b7       	in	r29, 0x3e	; 62
    1888:	9a 83       	std	Y+2, r25	; 0x02
    188a:	89 83       	std	Y+1, r24	; 0x01
    // Set the bit rate for TWI communication
    TWSR = 0x00; // Clear prescaler bits
    188c:	e1 e2       	ldi	r30, 0x21	; 33
    188e:	f0 e0       	ldi	r31, 0x00	; 0
    1890:	10 82       	st	Z, r1
    TWBR = (uint8)(((F_CPU / config->bit_rate) - 16) / 2); // Set bit rate register
    1892:	00 e2       	ldi	r16, 0x20	; 32
    1894:	10 e0       	ldi	r17, 0x00	; 0
    1896:	e9 81       	ldd	r30, Y+1	; 0x01
    1898:	fa 81       	ldd	r31, Y+2	; 0x02
    189a:	21 81       	ldd	r18, Z+1	; 0x01
    189c:	32 81       	ldd	r19, Z+2	; 0x02
    189e:	43 81       	ldd	r20, Z+3	; 0x03
    18a0:	54 81       	ldd	r21, Z+4	; 0x04
    18a2:	80 e0       	ldi	r24, 0x00	; 0
    18a4:	92 e1       	ldi	r25, 0x12	; 18
    18a6:	aa e7       	ldi	r26, 0x7A	; 122
    18a8:	b0 e0       	ldi	r27, 0x00	; 0
    18aa:	bc 01       	movw	r22, r24
    18ac:	cd 01       	movw	r24, r26
    18ae:	0e 94 bc 14 	call	0x2978	; 0x2978 <__udivmodsi4>
    18b2:	da 01       	movw	r26, r20
    18b4:	c9 01       	movw	r24, r18
    18b6:	40 97       	sbiw	r24, 0x10	; 16
    18b8:	a1 09       	sbc	r26, r1
    18ba:	b1 09       	sbc	r27, r1
    18bc:	b6 95       	lsr	r27
    18be:	a7 95       	ror	r26
    18c0:	97 95       	ror	r25
    18c2:	87 95       	ror	r24
    18c4:	f8 01       	movw	r30, r16
    18c6:	80 83       	st	Z, r24

    // Set the TWI address
    TWAR = (config->address << 1); // Load address into TWAR (shifted left by 1 to fit TWI format)
    18c8:	a2 e2       	ldi	r26, 0x22	; 34
    18ca:	b0 e0       	ldi	r27, 0x00	; 0
    18cc:	e9 81       	ldd	r30, Y+1	; 0x01
    18ce:	fa 81       	ldd	r31, Y+2	; 0x02
    18d0:	80 81       	ld	r24, Z
    18d2:	88 0f       	add	r24, r24
    18d4:	8c 93       	st	X, r24

    // Enable the TWI module
    TWCR = (1 << TWEN);
    18d6:	e6 e5       	ldi	r30, 0x56	; 86
    18d8:	f0 e0       	ldi	r31, 0x00	; 0
    18da:	84 e0       	ldi	r24, 0x04	; 4
    18dc:	80 83       	st	Z, r24
}
    18de:	0f 90       	pop	r0
    18e0:	0f 90       	pop	r0
    18e2:	cf 91       	pop	r28
    18e4:	df 91       	pop	r29
    18e6:	1f 91       	pop	r17
    18e8:	0f 91       	pop	r16
    18ea:	08 95       	ret

000018ec <TWI_start>:

void TWI_start(void)
{
    18ec:	df 93       	push	r29
    18ee:	cf 93       	push	r28
    18f0:	cd b7       	in	r28, 0x3d	; 61
    18f2:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    18f4:	e6 e5       	ldi	r30, 0x56	; 86
    18f6:	f0 e0       	ldi	r31, 0x00	; 0
    18f8:	84 ea       	ldi	r24, 0xA4	; 164
    18fa:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    18fc:	e6 e5       	ldi	r30, 0x56	; 86
    18fe:	f0 e0       	ldi	r31, 0x00	; 0
    1900:	80 81       	ld	r24, Z
    1902:	88 23       	and	r24, r24
    1904:	dc f7       	brge	.-10     	; 0x18fc <TWI_start+0x10>
}
    1906:	cf 91       	pop	r28
    1908:	df 91       	pop	r29
    190a:	08 95       	ret

0000190c <TWI_stop>:

void TWI_stop(void)
{
    190c:	df 93       	push	r29
    190e:	cf 93       	push	r28
    1910:	cd b7       	in	r28, 0x3d	; 61
    1912:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    1914:	e6 e5       	ldi	r30, 0x56	; 86
    1916:	f0 e0       	ldi	r31, 0x00	; 0
    1918:	84 e9       	ldi	r24, 0x94	; 148
    191a:	80 83       	st	Z, r24
}
    191c:	cf 91       	pop	r28
    191e:	df 91       	pop	r29
    1920:	08 95       	ret

00001922 <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
    1922:	df 93       	push	r29
    1924:	cf 93       	push	r28
    1926:	0f 92       	push	r0
    1928:	cd b7       	in	r28, 0x3d	; 61
    192a:	de b7       	in	r29, 0x3e	; 62
    192c:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    192e:	e3 e2       	ldi	r30, 0x23	; 35
    1930:	f0 e0       	ldi	r31, 0x00	; 0
    1932:	89 81       	ldd	r24, Y+1	; 0x01
    1934:	80 83       	st	Z, r24
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN);
    1936:	e6 e5       	ldi	r30, 0x56	; 86
    1938:	f0 e0       	ldi	r31, 0x00	; 0
    193a:	84 e8       	ldi	r24, 0x84	; 132
    193c:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    193e:	e6 e5       	ldi	r30, 0x56	; 86
    1940:	f0 e0       	ldi	r31, 0x00	; 0
    1942:	80 81       	ld	r24, Z
    1944:	88 23       	and	r24, r24
    1946:	dc f7       	brge	.-10     	; 0x193e <TWI_writeByte+0x1c>
}
    1948:	0f 90       	pop	r0
    194a:	cf 91       	pop	r28
    194c:	df 91       	pop	r29
    194e:	08 95       	ret

00001950 <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void)
{
    1950:	df 93       	push	r29
    1952:	cf 93       	push	r28
    1954:	cd b7       	in	r28, 0x3d	; 61
    1956:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    1958:	e6 e5       	ldi	r30, 0x56	; 86
    195a:	f0 e0       	ldi	r31, 0x00	; 0
    195c:	84 ec       	ldi	r24, 0xC4	; 196
    195e:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1960:	e6 e5       	ldi	r30, 0x56	; 86
    1962:	f0 e0       	ldi	r31, 0x00	; 0
    1964:	80 81       	ld	r24, Z
    1966:	88 23       	and	r24, r24
    1968:	dc f7       	brge	.-10     	; 0x1960 <TWI_readByteWithACK+0x10>
    /* Read Data */
    return TWDR;
    196a:	e3 e2       	ldi	r30, 0x23	; 35
    196c:	f0 e0       	ldi	r31, 0x00	; 0
    196e:	80 81       	ld	r24, Z
}
    1970:	cf 91       	pop	r28
    1972:	df 91       	pop	r29
    1974:	08 95       	ret

00001976 <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void)
{
    1976:	df 93       	push	r29
    1978:	cf 93       	push	r28
    197a:	cd b7       	in	r28, 0x3d	; 61
    197c:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    197e:	e6 e5       	ldi	r30, 0x56	; 86
    1980:	f0 e0       	ldi	r31, 0x00	; 0
    1982:	84 e8       	ldi	r24, 0x84	; 132
    1984:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1986:	e6 e5       	ldi	r30, 0x56	; 86
    1988:	f0 e0       	ldi	r31, 0x00	; 0
    198a:	80 81       	ld	r24, Z
    198c:	88 23       	and	r24, r24
    198e:	dc f7       	brge	.-10     	; 0x1986 <TWI_readByteWithNACK+0x10>
    /* Read Data */
    return TWDR;
    1990:	e3 e2       	ldi	r30, 0x23	; 35
    1992:	f0 e0       	ldi	r31, 0x00	; 0
    1994:	80 81       	ld	r24, Z
}
    1996:	cf 91       	pop	r28
    1998:	df 91       	pop	r29
    199a:	08 95       	ret

0000199c <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    199c:	df 93       	push	r29
    199e:	cf 93       	push	r28
    19a0:	0f 92       	push	r0
    19a2:	cd b7       	in	r28, 0x3d	; 61
    19a4:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    19a6:	e1 e2       	ldi	r30, 0x21	; 33
    19a8:	f0 e0       	ldi	r31, 0x00	; 0
    19aa:	80 81       	ld	r24, Z
    19ac:	88 7f       	andi	r24, 0xF8	; 248
    19ae:	89 83       	std	Y+1, r24	; 0x01
    return status;
    19b0:	89 81       	ldd	r24, Y+1	; 0x01
}
    19b2:	0f 90       	pop	r0
    19b4:	cf 91       	pop	r28
    19b6:	df 91       	pop	r29
    19b8:	08 95       	ret

000019ba <UART_init>:
 * Functional responsible for Initialize the UART device by:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(UART_ConfigType *config) {
    19ba:	df 93       	push	r29
    19bc:	cf 93       	push	r28
    19be:	00 d0       	rcall	.+0      	; 0x19c0 <UART_init+0x6>
    19c0:	00 d0       	rcall	.+0      	; 0x19c2 <UART_init+0x8>
    19c2:	cd b7       	in	r28, 0x3d	; 61
    19c4:	de b7       	in	r29, 0x3e	; 62
    19c6:	9c 83       	std	Y+4, r25	; 0x04
    19c8:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    19ca:	1a 82       	std	Y+2, r1	; 0x02
    19cc:	19 82       	std	Y+1, r1	; 0x01
	/* U2X = 1 for double transmission speed */
	UCSRA = (1 << U2X);
    19ce:	eb e2       	ldi	r30, 0x2B	; 43
    19d0:	f0 e0       	ldi	r31, 0x00	; 0
    19d2:	82 e0       	ldi	r24, 0x02	; 2
    19d4:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/
	UCSRB = (1 << RXEN) | (1 << TXEN);
    19d6:	ea e2       	ldi	r30, 0x2A	; 42
    19d8:	f0 e0       	ldi	r31, 0x00	; 0
    19da:	88 e1       	ldi	r24, 0x18	; 24
    19dc:	80 83       	st	Z, r24
	 * USBS    = 0 One stop bit
	 * USBS    = 1 Two stop bits
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/
	UCSRC = (1 << URSEL) ;
    19de:	e0 e4       	ldi	r30, 0x40	; 64
    19e0:	f0 e0       	ldi	r31, 0x00	; 0
    19e2:	80 e8       	ldi	r24, 0x80	; 128
    19e4:	80 83       	st	Z, r24
	// Set data bits
	    if (config->UART_BitDateType == UART_8Bit) {
    19e6:	eb 81       	ldd	r30, Y+3	; 0x03
    19e8:	fc 81       	ldd	r31, Y+4	; 0x04
    19ea:	80 81       	ld	r24, Z
    19ec:	83 30       	cpi	r24, 0x03	; 3
    19ee:	41 f4       	brne	.+16     	; 0x1a00 <UART_init+0x46>
	        UCSRC |= (1 << UCSZ0) | (1 << UCSZ1);
    19f0:	a0 e4       	ldi	r26, 0x40	; 64
    19f2:	b0 e0       	ldi	r27, 0x00	; 0
    19f4:	e0 e4       	ldi	r30, 0x40	; 64
    19f6:	f0 e0       	ldi	r31, 0x00	; 0
    19f8:	80 81       	ld	r24, Z
    19fa:	86 60       	ori	r24, 0x06	; 6
    19fc:	8c 93       	st	X, r24
    19fe:	0c c0       	rjmp	.+24     	; 0x1a18 <UART_init+0x5e>
	    } else if (config->UART_BitDateType == UART_7Bit) {
    1a00:	eb 81       	ldd	r30, Y+3	; 0x03
    1a02:	fc 81       	ldd	r31, Y+4	; 0x04
    1a04:	80 81       	ld	r24, Z
    1a06:	82 30       	cpi	r24, 0x02	; 2
    1a08:	39 f4       	brne	.+14     	; 0x1a18 <UART_init+0x5e>
	        UCSRC |= (1 << UCSZ1);
    1a0a:	a0 e4       	ldi	r26, 0x40	; 64
    1a0c:	b0 e0       	ldi	r27, 0x00	; 0
    1a0e:	e0 e4       	ldi	r30, 0x40	; 64
    1a10:	f0 e0       	ldi	r31, 0x00	; 0
    1a12:	80 81       	ld	r24, Z
    1a14:	84 60       	ori	r24, 0x04	; 4
    1a16:	8c 93       	st	X, r24
	    }

	    // Set parity mode
	       if (config->UART_ParityType == UART_Parity_Even) {
    1a18:	eb 81       	ldd	r30, Y+3	; 0x03
    1a1a:	fc 81       	ldd	r31, Y+4	; 0x04
    1a1c:	81 81       	ldd	r24, Z+1	; 0x01
    1a1e:	82 30       	cpi	r24, 0x02	; 2
    1a20:	41 f4       	brne	.+16     	; 0x1a32 <UART_init+0x78>
	           UCSRC |= (1 << UPM1);
    1a22:	a0 e4       	ldi	r26, 0x40	; 64
    1a24:	b0 e0       	ldi	r27, 0x00	; 0
    1a26:	e0 e4       	ldi	r30, 0x40	; 64
    1a28:	f0 e0       	ldi	r31, 0x00	; 0
    1a2a:	80 81       	ld	r24, Z
    1a2c:	80 62       	ori	r24, 0x20	; 32
    1a2e:	8c 93       	st	X, r24
    1a30:	0c c0       	rjmp	.+24     	; 0x1a4a <UART_init+0x90>
	       } else if (config->UART_ParityType == UART_Parity_Odd) {
    1a32:	eb 81       	ldd	r30, Y+3	; 0x03
    1a34:	fc 81       	ldd	r31, Y+4	; 0x04
    1a36:	81 81       	ldd	r24, Z+1	; 0x01
    1a38:	83 30       	cpi	r24, 0x03	; 3
    1a3a:	39 f4       	brne	.+14     	; 0x1a4a <UART_init+0x90>
	           UCSRC |= (1 << UPM1) | (1 << UPM0);
    1a3c:	a0 e4       	ldi	r26, 0x40	; 64
    1a3e:	b0 e0       	ldi	r27, 0x00	; 0
    1a40:	e0 e4       	ldi	r30, 0x40	; 64
    1a42:	f0 e0       	ldi	r31, 0x00	; 0
    1a44:	80 81       	ld	r24, Z
    1a46:	80 63       	ori	r24, 0x30	; 48
    1a48:	8c 93       	st	X, r24
	       }

	       // Set stop bits
	          if (config->UART_StopBitType == UART_TWO_STOP_BITS) {
    1a4a:	eb 81       	ldd	r30, Y+3	; 0x03
    1a4c:	fc 81       	ldd	r31, Y+4	; 0x04
    1a4e:	82 81       	ldd	r24, Z+2	; 0x02
    1a50:	81 30       	cpi	r24, 0x01	; 1
    1a52:	39 f4       	brne	.+14     	; 0x1a62 <UART_init+0xa8>
	              UCSRC |= (1 << USBS);
    1a54:	a0 e4       	ldi	r26, 0x40	; 64
    1a56:	b0 e0       	ldi	r27, 0x00	; 0
    1a58:	e0 e4       	ldi	r30, 0x40	; 64
    1a5a:	f0 e0       	ldi	r31, 0x00	; 0
    1a5c:	80 81       	ld	r24, Z
    1a5e:	88 60       	ori	r24, 0x08	; 8
    1a60:	8c 93       	st	X, r24
	          }
	/* Calculate the UBRR register value */
	ubrr_value = (uint16) (((F_CPU / (config->BaudRateType * 8UL))) - 1);
    1a62:	eb 81       	ldd	r30, Y+3	; 0x03
    1a64:	fc 81       	ldd	r31, Y+4	; 0x04
    1a66:	83 81       	ldd	r24, Z+3	; 0x03
    1a68:	94 81       	ldd	r25, Z+4	; 0x04
    1a6a:	a5 81       	ldd	r26, Z+5	; 0x05
    1a6c:	b6 81       	ldd	r27, Z+6	; 0x06
    1a6e:	88 0f       	add	r24, r24
    1a70:	99 1f       	adc	r25, r25
    1a72:	aa 1f       	adc	r26, r26
    1a74:	bb 1f       	adc	r27, r27
    1a76:	88 0f       	add	r24, r24
    1a78:	99 1f       	adc	r25, r25
    1a7a:	aa 1f       	adc	r26, r26
    1a7c:	bb 1f       	adc	r27, r27
    1a7e:	88 0f       	add	r24, r24
    1a80:	99 1f       	adc	r25, r25
    1a82:	aa 1f       	adc	r26, r26
    1a84:	bb 1f       	adc	r27, r27
    1a86:	9c 01       	movw	r18, r24
    1a88:	ad 01       	movw	r20, r26
    1a8a:	80 e0       	ldi	r24, 0x00	; 0
    1a8c:	92 e1       	ldi	r25, 0x12	; 18
    1a8e:	aa e7       	ldi	r26, 0x7A	; 122
    1a90:	b0 e0       	ldi	r27, 0x00	; 0
    1a92:	bc 01       	movw	r22, r24
    1a94:	cd 01       	movw	r24, r26
    1a96:	0e 94 bc 14 	call	0x2978	; 0x2978 <__udivmodsi4>
    1a9a:	da 01       	movw	r26, r20
    1a9c:	c9 01       	movw	r24, r18
    1a9e:	01 97       	sbiw	r24, 0x01	; 1
    1aa0:	9a 83       	std	Y+2, r25	; 0x02
    1aa2:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value >> 8;
    1aa4:	e0 e4       	ldi	r30, 0x40	; 64
    1aa6:	f0 e0       	ldi	r31, 0x00	; 0
    1aa8:	89 81       	ldd	r24, Y+1	; 0x01
    1aaa:	9a 81       	ldd	r25, Y+2	; 0x02
    1aac:	89 2f       	mov	r24, r25
    1aae:	99 27       	eor	r25, r25
    1ab0:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    1ab2:	e9 e2       	ldi	r30, 0x29	; 41
    1ab4:	f0 e0       	ldi	r31, 0x00	; 0
    1ab6:	89 81       	ldd	r24, Y+1	; 0x01
    1ab8:	80 83       	st	Z, r24
}
    1aba:	0f 90       	pop	r0
    1abc:	0f 90       	pop	r0
    1abe:	0f 90       	pop	r0
    1ac0:	0f 90       	pop	r0
    1ac2:	cf 91       	pop	r28
    1ac4:	df 91       	pop	r29
    1ac6:	08 95       	ret

00001ac8 <UART_sendByte>:

/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data) {
    1ac8:	df 93       	push	r29
    1aca:	cf 93       	push	r28
    1acc:	0f 92       	push	r0
    1ace:	cd b7       	in	r28, 0x3d	; 61
    1ad0:	de b7       	in	r29, 0x3e	; 62
    1ad2:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while (BIT_IS_CLEAR(UCSRA, UDRE)) {
    1ad4:	eb e2       	ldi	r30, 0x2B	; 43
    1ad6:	f0 e0       	ldi	r31, 0x00	; 0
    1ad8:	80 81       	ld	r24, Z
    1ada:	88 2f       	mov	r24, r24
    1adc:	90 e0       	ldi	r25, 0x00	; 0
    1ade:	80 72       	andi	r24, 0x20	; 32
    1ae0:	90 70       	andi	r25, 0x00	; 0
    1ae2:	00 97       	sbiw	r24, 0x00	; 0
    1ae4:	b9 f3       	breq	.-18     	; 0x1ad4 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    1ae6:	ec e2       	ldi	r30, 0x2C	; 44
    1ae8:	f0 e0       	ldi	r31, 0x00	; 0
    1aea:	89 81       	ldd	r24, Y+1	; 0x01
    1aec:	80 83       	st	Z, r24
	/************************* Another Method *************************
	 UDR = data;
	 while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	 SET_BIT(UCSRA,TXC); // Clear the TXC flag
	 *******************************************************************/
}
    1aee:	0f 90       	pop	r0
    1af0:	cf 91       	pop	r28
    1af2:	df 91       	pop	r29
    1af4:	08 95       	ret

00001af6 <UART_recieveByte>:

/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void) {
    1af6:	df 93       	push	r29
    1af8:	cf 93       	push	r28
    1afa:	cd b7       	in	r28, 0x3d	; 61
    1afc:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while (BIT_IS_CLEAR(UCSRA, RXC)) {
    1afe:	eb e2       	ldi	r30, 0x2B	; 43
    1b00:	f0 e0       	ldi	r31, 0x00	; 0
    1b02:	80 81       	ld	r24, Z
    1b04:	88 23       	and	r24, r24
    1b06:	dc f7       	brge	.-10     	; 0x1afe <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
	return UDR;
    1b08:	ec e2       	ldi	r30, 0x2C	; 44
    1b0a:	f0 e0       	ldi	r31, 0x00	; 0
    1b0c:	80 81       	ld	r24, Z
}
    1b0e:	cf 91       	pop	r28
    1b10:	df 91       	pop	r29
    1b12:	08 95       	ret

00001b14 <UART_sendString>:

/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str) {
    1b14:	df 93       	push	r29
    1b16:	cf 93       	push	r28
    1b18:	00 d0       	rcall	.+0      	; 0x1b1a <UART_sendString+0x6>
    1b1a:	0f 92       	push	r0
    1b1c:	cd b7       	in	r28, 0x3d	; 61
    1b1e:	de b7       	in	r29, 0x3e	; 62
    1b20:	9b 83       	std	Y+3, r25	; 0x03
    1b22:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1b24:	19 82       	std	Y+1, r1	; 0x01
    1b26:	0e c0       	rjmp	.+28     	; 0x1b44 <UART_sendString+0x30>

	/* Send the whole string */
	while (Str[i] != '\0') {
		UART_sendByte(Str[i]);
    1b28:	89 81       	ldd	r24, Y+1	; 0x01
    1b2a:	28 2f       	mov	r18, r24
    1b2c:	30 e0       	ldi	r19, 0x00	; 0
    1b2e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b30:	9b 81       	ldd	r25, Y+3	; 0x03
    1b32:	fc 01       	movw	r30, r24
    1b34:	e2 0f       	add	r30, r18
    1b36:	f3 1f       	adc	r31, r19
    1b38:	80 81       	ld	r24, Z
    1b3a:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <UART_sendByte>
		i++;
    1b3e:	89 81       	ldd	r24, Y+1	; 0x01
    1b40:	8f 5f       	subi	r24, 0xFF	; 255
    1b42:	89 83       	std	Y+1, r24	; 0x01
 */
void UART_sendString(const uint8 *Str) {
	uint8 i = 0;

	/* Send the whole string */
	while (Str[i] != '\0') {
    1b44:	89 81       	ldd	r24, Y+1	; 0x01
    1b46:	28 2f       	mov	r18, r24
    1b48:	30 e0       	ldi	r19, 0x00	; 0
    1b4a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b4c:	9b 81       	ldd	r25, Y+3	; 0x03
    1b4e:	fc 01       	movw	r30, r24
    1b50:	e2 0f       	add	r30, r18
    1b52:	f3 1f       	adc	r31, r19
    1b54:	80 81       	ld	r24, Z
    1b56:	88 23       	and	r24, r24
    1b58:	39 f7       	brne	.-50     	; 0x1b28 <UART_sendString+0x14>
	 {
	 UART_sendByte(*Str);
	 Str++;
	 }
	 *******************************************************************/
}
    1b5a:	0f 90       	pop	r0
    1b5c:	0f 90       	pop	r0
    1b5e:	0f 90       	pop	r0
    1b60:	cf 91       	pop	r28
    1b62:	df 91       	pop	r29
    1b64:	08 95       	ret

00001b66 <UART_receiveString>:

/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str) {
    1b66:	0f 93       	push	r16
    1b68:	1f 93       	push	r17
    1b6a:	df 93       	push	r29
    1b6c:	cf 93       	push	r28
    1b6e:	00 d0       	rcall	.+0      	; 0x1b70 <UART_receiveString+0xa>
    1b70:	0f 92       	push	r0
    1b72:	cd b7       	in	r28, 0x3d	; 61
    1b74:	de b7       	in	r29, 0x3e	; 62
    1b76:	9b 83       	std	Y+3, r25	; 0x03
    1b78:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1b7a:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    1b7c:	89 81       	ldd	r24, Y+1	; 0x01
    1b7e:	28 2f       	mov	r18, r24
    1b80:	30 e0       	ldi	r19, 0x00	; 0
    1b82:	8a 81       	ldd	r24, Y+2	; 0x02
    1b84:	9b 81       	ldd	r25, Y+3	; 0x03
    1b86:	8c 01       	movw	r16, r24
    1b88:	02 0f       	add	r16, r18
    1b8a:	13 1f       	adc	r17, r19
    1b8c:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <UART_recieveByte>
    1b90:	f8 01       	movw	r30, r16
    1b92:	80 83       	st	Z, r24
    1b94:	0f c0       	rjmp	.+30     	; 0x1bb4 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while (Str[i] != '#') {
		i++;
    1b96:	89 81       	ldd	r24, Y+1	; 0x01
    1b98:	8f 5f       	subi	r24, 0xFF	; 255
    1b9a:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    1b9c:	89 81       	ldd	r24, Y+1	; 0x01
    1b9e:	28 2f       	mov	r18, r24
    1ba0:	30 e0       	ldi	r19, 0x00	; 0
    1ba2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ba4:	9b 81       	ldd	r25, Y+3	; 0x03
    1ba6:	8c 01       	movw	r16, r24
    1ba8:	02 0f       	add	r16, r18
    1baa:	13 1f       	adc	r17, r19
    1bac:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <UART_recieveByte>
    1bb0:	f8 01       	movw	r30, r16
    1bb2:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while (Str[i] != '#') {
    1bb4:	89 81       	ldd	r24, Y+1	; 0x01
    1bb6:	28 2f       	mov	r18, r24
    1bb8:	30 e0       	ldi	r19, 0x00	; 0
    1bba:	8a 81       	ldd	r24, Y+2	; 0x02
    1bbc:	9b 81       	ldd	r25, Y+3	; 0x03
    1bbe:	fc 01       	movw	r30, r24
    1bc0:	e2 0f       	add	r30, r18
    1bc2:	f3 1f       	adc	r31, r19
    1bc4:	80 81       	ld	r24, Z
    1bc6:	83 32       	cpi	r24, 0x23	; 35
    1bc8:	31 f7       	brne	.-52     	; 0x1b96 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    1bca:	89 81       	ldd	r24, Y+1	; 0x01
    1bcc:	28 2f       	mov	r18, r24
    1bce:	30 e0       	ldi	r19, 0x00	; 0
    1bd0:	8a 81       	ldd	r24, Y+2	; 0x02
    1bd2:	9b 81       	ldd	r25, Y+3	; 0x03
    1bd4:	fc 01       	movw	r30, r24
    1bd6:	e2 0f       	add	r30, r18
    1bd8:	f3 1f       	adc	r31, r19
    1bda:	10 82       	st	Z, r1
}
    1bdc:	0f 90       	pop	r0
    1bde:	0f 90       	pop	r0
    1be0:	0f 90       	pop	r0
    1be2:	cf 91       	pop	r28
    1be4:	df 91       	pop	r29
    1be6:	1f 91       	pop	r17
    1be8:	0f 91       	pop	r16
    1bea:	08 95       	ret

00001bec <Buzzer_init>:
 *      Author: Abdelrhman Adel Sakr
 */
#include "Buzzer.h"
#include "../MCAL/gpio.h"

void Buzzer_init(void){
    1bec:	df 93       	push	r29
    1bee:	cf 93       	push	r28
    1bf0:	cd b7       	in	r28, 0x3d	; 61
    1bf2:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(BUZZER_PORT_ID,BUZZER_PIN_ID,PIN_OUTPUT);
    1bf4:	82 e0       	ldi	r24, 0x02	; 2
    1bf6:	67 e0       	ldi	r22, 0x07	; 7
    1bf8:	41 e0       	ldi	r20, 0x01	; 1
    1bfa:	0e 94 ff 08 	call	0x11fe	; 0x11fe <GPIO_setupPinDirection>
}
    1bfe:	cf 91       	pop	r28
    1c00:	df 91       	pop	r29
    1c02:	08 95       	ret

00001c04 <Buzzer_on>:
void Buzzer_on(void){
    1c04:	df 93       	push	r29
    1c06:	cf 93       	push	r28
    1c08:	cd b7       	in	r28, 0x3d	; 61
    1c0a:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID,BUZZER_PIN_ID,LOGIC_HIGH);
    1c0c:	82 e0       	ldi	r24, 0x02	; 2
    1c0e:	67 e0       	ldi	r22, 0x07	; 7
    1c10:	41 e0       	ldi	r20, 0x01	; 1
    1c12:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <GPIO_writePin>
}
    1c16:	cf 91       	pop	r28
    1c18:	df 91       	pop	r29
    1c1a:	08 95       	ret

00001c1c <Buzzer_off>:
void Buzzer_off(void){
    1c1c:	df 93       	push	r29
    1c1e:	cf 93       	push	r28
    1c20:	cd b7       	in	r28, 0x3d	; 61
    1c22:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID,BUZZER_PIN_ID,LOGIC_LOW);
    1c24:	82 e0       	ldi	r24, 0x02	; 2
    1c26:	67 e0       	ldi	r22, 0x07	; 7
    1c28:	40 e0       	ldi	r20, 0x00	; 0
    1c2a:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <GPIO_writePin>
}
    1c2e:	cf 91       	pop	r28
    1c30:	df 91       	pop	r29
    1c32:	08 95       	ret

00001c34 <DcMotor_init>:
#include "DCmotor.h"
#include "../MCAL/gpio.h"
#include "../MCAL/PWM.h"
DcMotor_ID Door = { .DC_MOTOR_PORT = PORTD_ID, .DC_MOTOR_PINA = PIN6_ID,
		.DC_MOTOR_PINB = PIN7_ID,.DC_MOTOR_PORT_EN=PORTB_ID,.DC_MOTOR_PINE = PIN3_ID };
void DcMotor_init(DcMotor_ID *id ){
    1c34:	df 93       	push	r29
    1c36:	cf 93       	push	r28
    1c38:	00 d0       	rcall	.+0      	; 0x1c3a <DcMotor_init+0x6>
    1c3a:	cd b7       	in	r28, 0x3d	; 61
    1c3c:	de b7       	in	r29, 0x3e	; 62
    1c3e:	9a 83       	std	Y+2, r25	; 0x02
    1c40:	89 83       	std	Y+1, r24	; 0x01
	GPIO_setupPinDirection(id->DC_MOTOR_PORT,id->DC_MOTOR_PINA,PIN_OUTPUT);
    1c42:	e9 81       	ldd	r30, Y+1	; 0x01
    1c44:	fa 81       	ldd	r31, Y+2	; 0x02
    1c46:	80 81       	ld	r24, Z
    1c48:	e9 81       	ldd	r30, Y+1	; 0x01
    1c4a:	fa 81       	ldd	r31, Y+2	; 0x02
    1c4c:	91 81       	ldd	r25, Z+1	; 0x01
    1c4e:	69 2f       	mov	r22, r25
    1c50:	41 e0       	ldi	r20, 0x01	; 1
    1c52:	0e 94 ff 08 	call	0x11fe	; 0x11fe <GPIO_setupPinDirection>
	GPIO_setupPinDirection(id->DC_MOTOR_PORT,id->DC_MOTOR_PINB,PIN_OUTPUT);
    1c56:	e9 81       	ldd	r30, Y+1	; 0x01
    1c58:	fa 81       	ldd	r31, Y+2	; 0x02
    1c5a:	80 81       	ld	r24, Z
    1c5c:	e9 81       	ldd	r30, Y+1	; 0x01
    1c5e:	fa 81       	ldd	r31, Y+2	; 0x02
    1c60:	92 81       	ldd	r25, Z+2	; 0x02
    1c62:	69 2f       	mov	r22, r25
    1c64:	41 e0       	ldi	r20, 0x01	; 1
    1c66:	0e 94 ff 08 	call	0x11fe	; 0x11fe <GPIO_setupPinDirection>
	GPIO_setupPinDirection(id->DC_MOTOR_PORT_EN,id->DC_MOTOR_PINE,PIN_OUTPUT);
    1c6a:	e9 81       	ldd	r30, Y+1	; 0x01
    1c6c:	fa 81       	ldd	r31, Y+2	; 0x02
    1c6e:	83 81       	ldd	r24, Z+3	; 0x03
    1c70:	e9 81       	ldd	r30, Y+1	; 0x01
    1c72:	fa 81       	ldd	r31, Y+2	; 0x02
    1c74:	94 81       	ldd	r25, Z+4	; 0x04
    1c76:	69 2f       	mov	r22, r25
    1c78:	41 e0       	ldi	r20, 0x01	; 1
    1c7a:	0e 94 ff 08 	call	0x11fe	; 0x11fe <GPIO_setupPinDirection>
}
    1c7e:	0f 90       	pop	r0
    1c80:	0f 90       	pop	r0
    1c82:	cf 91       	pop	r28
    1c84:	df 91       	pop	r29
    1c86:	08 95       	ret

00001c88 <DcMotor_Rotate>:
void DcMotor_Rotate(DcMotor_ID *motor,MOTOR_MODE state,uint8 speed){
    1c88:	df 93       	push	r29
    1c8a:	cf 93       	push	r28
    1c8c:	00 d0       	rcall	.+0      	; 0x1c8e <DcMotor_Rotate+0x6>
    1c8e:	00 d0       	rcall	.+0      	; 0x1c90 <DcMotor_Rotate+0x8>
    1c90:	cd b7       	in	r28, 0x3d	; 61
    1c92:	de b7       	in	r29, 0x3e	; 62
    1c94:	9a 83       	std	Y+2, r25	; 0x02
    1c96:	89 83       	std	Y+1, r24	; 0x01
    1c98:	6b 83       	std	Y+3, r22	; 0x03
    1c9a:	4c 83       	std	Y+4, r20	; 0x04
	PWM_Timer0_Start(speed);
    1c9c:	8c 81       	ldd	r24, Y+4	; 0x04
    1c9e:	0e 94 a3 05 	call	0xb46	; 0xb46 <PWM_Timer0_Start>
if(state==stop){
    1ca2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ca4:	88 23       	and	r24, r24
    1ca6:	a9 f4       	brne	.+42     	; 0x1cd2 <DcMotor_Rotate+0x4a>
	GPIO_writePin(motor->DC_MOTOR_PORT,motor->DC_MOTOR_PINA,LOGIC_LOW);
    1ca8:	e9 81       	ldd	r30, Y+1	; 0x01
    1caa:	fa 81       	ldd	r31, Y+2	; 0x02
    1cac:	80 81       	ld	r24, Z
    1cae:	e9 81       	ldd	r30, Y+1	; 0x01
    1cb0:	fa 81       	ldd	r31, Y+2	; 0x02
    1cb2:	91 81       	ldd	r25, Z+1	; 0x01
    1cb4:	69 2f       	mov	r22, r25
    1cb6:	40 e0       	ldi	r20, 0x00	; 0
    1cb8:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <GPIO_writePin>
	GPIO_writePin(motor->DC_MOTOR_PORT,motor->DC_MOTOR_PINB,LOGIC_LOW);
    1cbc:	e9 81       	ldd	r30, Y+1	; 0x01
    1cbe:	fa 81       	ldd	r31, Y+2	; 0x02
    1cc0:	80 81       	ld	r24, Z
    1cc2:	e9 81       	ldd	r30, Y+1	; 0x01
    1cc4:	fa 81       	ldd	r31, Y+2	; 0x02
    1cc6:	92 81       	ldd	r25, Z+2	; 0x02
    1cc8:	69 2f       	mov	r22, r25
    1cca:	40 e0       	ldi	r20, 0x00	; 0
    1ccc:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <GPIO_writePin>
    1cd0:	2f c0       	rjmp	.+94     	; 0x1d30 <DcMotor_Rotate+0xa8>
}
else if(state==Clockwise){
    1cd2:	8b 81       	ldd	r24, Y+3	; 0x03
    1cd4:	81 30       	cpi	r24, 0x01	; 1
    1cd6:	a9 f4       	brne	.+42     	; 0x1d02 <DcMotor_Rotate+0x7a>
	GPIO_writePin(motor->DC_MOTOR_PORT,motor->DC_MOTOR_PINA,LOGIC_HIGH);
    1cd8:	e9 81       	ldd	r30, Y+1	; 0x01
    1cda:	fa 81       	ldd	r31, Y+2	; 0x02
    1cdc:	80 81       	ld	r24, Z
    1cde:	e9 81       	ldd	r30, Y+1	; 0x01
    1ce0:	fa 81       	ldd	r31, Y+2	; 0x02
    1ce2:	91 81       	ldd	r25, Z+1	; 0x01
    1ce4:	69 2f       	mov	r22, r25
    1ce6:	41 e0       	ldi	r20, 0x01	; 1
    1ce8:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <GPIO_writePin>
	GPIO_writePin(motor->DC_MOTOR_PORT,motor->DC_MOTOR_PINB,LOGIC_LOW);
    1cec:	e9 81       	ldd	r30, Y+1	; 0x01
    1cee:	fa 81       	ldd	r31, Y+2	; 0x02
    1cf0:	80 81       	ld	r24, Z
    1cf2:	e9 81       	ldd	r30, Y+1	; 0x01
    1cf4:	fa 81       	ldd	r31, Y+2	; 0x02
    1cf6:	92 81       	ldd	r25, Z+2	; 0x02
    1cf8:	69 2f       	mov	r22, r25
    1cfa:	40 e0       	ldi	r20, 0x00	; 0
    1cfc:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <GPIO_writePin>
    1d00:	17 c0       	rjmp	.+46     	; 0x1d30 <DcMotor_Rotate+0xa8>
}
else if(state==Anti_clockwise){
    1d02:	8b 81       	ldd	r24, Y+3	; 0x03
    1d04:	82 30       	cpi	r24, 0x02	; 2
    1d06:	a1 f4       	brne	.+40     	; 0x1d30 <DcMotor_Rotate+0xa8>
	GPIO_writePin(motor->DC_MOTOR_PORT,motor->DC_MOTOR_PINA,LOGIC_LOW);
    1d08:	e9 81       	ldd	r30, Y+1	; 0x01
    1d0a:	fa 81       	ldd	r31, Y+2	; 0x02
    1d0c:	80 81       	ld	r24, Z
    1d0e:	e9 81       	ldd	r30, Y+1	; 0x01
    1d10:	fa 81       	ldd	r31, Y+2	; 0x02
    1d12:	91 81       	ldd	r25, Z+1	; 0x01
    1d14:	69 2f       	mov	r22, r25
    1d16:	40 e0       	ldi	r20, 0x00	; 0
    1d18:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <GPIO_writePin>
	GPIO_writePin(motor->DC_MOTOR_PORT,motor->DC_MOTOR_PINB,LOGIC_HIGH);
    1d1c:	e9 81       	ldd	r30, Y+1	; 0x01
    1d1e:	fa 81       	ldd	r31, Y+2	; 0x02
    1d20:	80 81       	ld	r24, Z
    1d22:	e9 81       	ldd	r30, Y+1	; 0x01
    1d24:	fa 81       	ldd	r31, Y+2	; 0x02
    1d26:	92 81       	ldd	r25, Z+2	; 0x02
    1d28:	69 2f       	mov	r22, r25
    1d2a:	41 e0       	ldi	r20, 0x01	; 1
    1d2c:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <GPIO_writePin>
}
}
    1d30:	0f 90       	pop	r0
    1d32:	0f 90       	pop	r0
    1d34:	0f 90       	pop	r0
    1d36:	0f 90       	pop	r0
    1d38:	cf 91       	pop	r28
    1d3a:	df 91       	pop	r29
    1d3c:	08 95       	ret

00001d3e <PIR_init>:
 */
#include "PIR.h"
#include <avr/io.h>
#include "../MCAL/gpio.h"
PIR_ConfigType pir_config={.PIR_PORT=PORTC_ID,.PIR_PIN=PIN2_ID};
void PIR_init(const PIR_ConfigType *config) {
    1d3e:	df 93       	push	r29
    1d40:	cf 93       	push	r28
    1d42:	00 d0       	rcall	.+0      	; 0x1d44 <PIR_init+0x6>
    1d44:	cd b7       	in	r28, 0x3d	; 61
    1d46:	de b7       	in	r29, 0x3e	; 62
    1d48:	9a 83       	std	Y+2, r25	; 0x02
    1d4a:	89 83       	std	Y+1, r24	; 0x01
    // Set PIR_SENSOR_PIN as input
	GPIO_setupPinDirection(config->PIR_PORT,config->PIR_PIN,PIN_INPUT);
    1d4c:	e9 81       	ldd	r30, Y+1	; 0x01
    1d4e:	fa 81       	ldd	r31, Y+2	; 0x02
    1d50:	80 81       	ld	r24, Z
    1d52:	e9 81       	ldd	r30, Y+1	; 0x01
    1d54:	fa 81       	ldd	r31, Y+2	; 0x02
    1d56:	91 81       	ldd	r25, Z+1	; 0x01
    1d58:	69 2f       	mov	r22, r25
    1d5a:	40 e0       	ldi	r20, 0x00	; 0
    1d5c:	0e 94 ff 08 	call	0x11fe	; 0x11fe <GPIO_setupPinDirection>
}
    1d60:	0f 90       	pop	r0
    1d62:	0f 90       	pop	r0
    1d64:	cf 91       	pop	r28
    1d66:	df 91       	pop	r29
    1d68:	08 95       	ret

00001d6a <PIR_getState>:

uint8_t PIR_getState(void) {
    1d6a:	df 93       	push	r29
    1d6c:	cf 93       	push	r28
    1d6e:	cd b7       	in	r28, 0x3d	; 61
    1d70:	de b7       	in	r29, 0x3e	; 62
    // Return the state of the PIR sensor (0: no motion, 1: motion detected)
    return GPIO_readPin(pir_config.PIR_PORT, pir_config.PIR_PIN);
    1d72:	80 91 7a 00 	lds	r24, 0x007A
    1d76:	90 91 7b 00 	lds	r25, 0x007B
    1d7a:	69 2f       	mov	r22, r25
    1d7c:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <GPIO_readPin>
}
    1d80:	cf 91       	pop	r28
    1d82:	df 91       	pop	r29
    1d84:	08 95       	ret

00001d86 <EEPROM_writeByte>:
 *******************************************************************************/
#include "external_eeprom.h"
#include "../MCAL/twi.h"

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    1d86:	df 93       	push	r29
    1d88:	cf 93       	push	r28
    1d8a:	00 d0       	rcall	.+0      	; 0x1d8c <EEPROM_writeByte+0x6>
    1d8c:	00 d0       	rcall	.+0      	; 0x1d8e <EEPROM_writeByte+0x8>
    1d8e:	cd b7       	in	r28, 0x3d	; 61
    1d90:	de b7       	in	r29, 0x3e	; 62
    1d92:	9a 83       	std	Y+2, r25	; 0x02
    1d94:	89 83       	std	Y+1, r24	; 0x01
    1d96:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    1d98:	0e 94 76 0c 	call	0x18ec	; 0x18ec <TWI_start>
    if (TWI_getStatus() != TWI_START)
    1d9c:	0e 94 ce 0c 	call	0x199c	; 0x199c <TWI_getStatus>
    1da0:	88 30       	cpi	r24, 0x08	; 8
    1da2:	11 f0       	breq	.+4      	; 0x1da8 <EEPROM_writeByte+0x22>
        return ERROR;
    1da4:	1c 82       	std	Y+4, r1	; 0x04
    1da6:	28 c0       	rjmp	.+80     	; 0x1df8 <EEPROM_writeByte+0x72>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    1da8:	89 81       	ldd	r24, Y+1	; 0x01
    1daa:	9a 81       	ldd	r25, Y+2	; 0x02
    1dac:	80 70       	andi	r24, 0x00	; 0
    1dae:	97 70       	andi	r25, 0x07	; 7
    1db0:	88 0f       	add	r24, r24
    1db2:	89 2f       	mov	r24, r25
    1db4:	88 1f       	adc	r24, r24
    1db6:	99 0b       	sbc	r25, r25
    1db8:	91 95       	neg	r25
    1dba:	80 6a       	ori	r24, 0xA0	; 160
    1dbc:	0e 94 91 0c 	call	0x1922	; 0x1922 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    1dc0:	0e 94 ce 0c 	call	0x199c	; 0x199c <TWI_getStatus>
    1dc4:	88 31       	cpi	r24, 0x18	; 24
    1dc6:	11 f0       	breq	.+4      	; 0x1dcc <EEPROM_writeByte+0x46>
        return ERROR; 
    1dc8:	1c 82       	std	Y+4, r1	; 0x04
    1dca:	16 c0       	rjmp	.+44     	; 0x1df8 <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    1dcc:	89 81       	ldd	r24, Y+1	; 0x01
    1dce:	0e 94 91 0c 	call	0x1922	; 0x1922 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1dd2:	0e 94 ce 0c 	call	0x199c	; 0x199c <TWI_getStatus>
    1dd6:	88 32       	cpi	r24, 0x28	; 40
    1dd8:	11 f0       	breq	.+4      	; 0x1dde <EEPROM_writeByte+0x58>
        return ERROR;
    1dda:	1c 82       	std	Y+4, r1	; 0x04
    1ddc:	0d c0       	rjmp	.+26     	; 0x1df8 <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    TWI_writeByte(u8data);
    1dde:	8b 81       	ldd	r24, Y+3	; 0x03
    1de0:	0e 94 91 0c 	call	0x1922	; 0x1922 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1de4:	0e 94 ce 0c 	call	0x199c	; 0x199c <TWI_getStatus>
    1de8:	88 32       	cpi	r24, 0x28	; 40
    1dea:	11 f0       	breq	.+4      	; 0x1df0 <EEPROM_writeByte+0x6a>
        return ERROR;
    1dec:	1c 82       	std	Y+4, r1	; 0x04
    1dee:	04 c0       	rjmp	.+8      	; 0x1df8 <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    1df0:	0e 94 86 0c 	call	0x190c	; 0x190c <TWI_stop>
	
    return SUCCESS;
    1df4:	81 e0       	ldi	r24, 0x01	; 1
    1df6:	8c 83       	std	Y+4, r24	; 0x04
    1df8:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1dfa:	0f 90       	pop	r0
    1dfc:	0f 90       	pop	r0
    1dfe:	0f 90       	pop	r0
    1e00:	0f 90       	pop	r0
    1e02:	cf 91       	pop	r28
    1e04:	df 91       	pop	r29
    1e06:	08 95       	ret

00001e08 <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    1e08:	df 93       	push	r29
    1e0a:	cf 93       	push	r28
    1e0c:	00 d0       	rcall	.+0      	; 0x1e0e <EEPROM_readByte+0x6>
    1e0e:	00 d0       	rcall	.+0      	; 0x1e10 <EEPROM_readByte+0x8>
    1e10:	0f 92       	push	r0
    1e12:	cd b7       	in	r28, 0x3d	; 61
    1e14:	de b7       	in	r29, 0x3e	; 62
    1e16:	9a 83       	std	Y+2, r25	; 0x02
    1e18:	89 83       	std	Y+1, r24	; 0x01
    1e1a:	7c 83       	std	Y+4, r23	; 0x04
    1e1c:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    1e1e:	0e 94 76 0c 	call	0x18ec	; 0x18ec <TWI_start>
    if (TWI_getStatus() != TWI_START)
    1e22:	0e 94 ce 0c 	call	0x199c	; 0x199c <TWI_getStatus>
    1e26:	88 30       	cpi	r24, 0x08	; 8
    1e28:	11 f0       	breq	.+4      	; 0x1e2e <EEPROM_readByte+0x26>
        return ERROR;
    1e2a:	1d 82       	std	Y+5, r1	; 0x05
    1e2c:	44 c0       	rjmp	.+136    	; 0x1eb6 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    1e2e:	89 81       	ldd	r24, Y+1	; 0x01
    1e30:	9a 81       	ldd	r25, Y+2	; 0x02
    1e32:	80 70       	andi	r24, 0x00	; 0
    1e34:	97 70       	andi	r25, 0x07	; 7
    1e36:	88 0f       	add	r24, r24
    1e38:	89 2f       	mov	r24, r25
    1e3a:	88 1f       	adc	r24, r24
    1e3c:	99 0b       	sbc	r25, r25
    1e3e:	91 95       	neg	r25
    1e40:	80 6a       	ori	r24, 0xA0	; 160
    1e42:	0e 94 91 0c 	call	0x1922	; 0x1922 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    1e46:	0e 94 ce 0c 	call	0x199c	; 0x199c <TWI_getStatus>
    1e4a:	88 31       	cpi	r24, 0x18	; 24
    1e4c:	11 f0       	breq	.+4      	; 0x1e52 <EEPROM_readByte+0x4a>
        return ERROR;
    1e4e:	1d 82       	std	Y+5, r1	; 0x05
    1e50:	32 c0       	rjmp	.+100    	; 0x1eb6 <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    1e52:	89 81       	ldd	r24, Y+1	; 0x01
    1e54:	0e 94 91 0c 	call	0x1922	; 0x1922 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1e58:	0e 94 ce 0c 	call	0x199c	; 0x199c <TWI_getStatus>
    1e5c:	88 32       	cpi	r24, 0x28	; 40
    1e5e:	11 f0       	breq	.+4      	; 0x1e64 <EEPROM_readByte+0x5c>
        return ERROR;
    1e60:	1d 82       	std	Y+5, r1	; 0x05
    1e62:	29 c0       	rjmp	.+82     	; 0x1eb6 <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
    1e64:	0e 94 76 0c 	call	0x18ec	; 0x18ec <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
    1e68:	0e 94 ce 0c 	call	0x199c	; 0x199c <TWI_getStatus>
    1e6c:	80 31       	cpi	r24, 0x10	; 16
    1e6e:	11 f0       	breq	.+4      	; 0x1e74 <EEPROM_readByte+0x6c>
        return ERROR;
    1e70:	1d 82       	std	Y+5, r1	; 0x05
    1e72:	21 c0       	rjmp	.+66     	; 0x1eb6 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    1e74:	89 81       	ldd	r24, Y+1	; 0x01
    1e76:	9a 81       	ldd	r25, Y+2	; 0x02
    1e78:	80 70       	andi	r24, 0x00	; 0
    1e7a:	97 70       	andi	r25, 0x07	; 7
    1e7c:	88 0f       	add	r24, r24
    1e7e:	89 2f       	mov	r24, r25
    1e80:	88 1f       	adc	r24, r24
    1e82:	99 0b       	sbc	r25, r25
    1e84:	91 95       	neg	r25
    1e86:	81 6a       	ori	r24, 0xA1	; 161
    1e88:	0e 94 91 0c 	call	0x1922	; 0x1922 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    1e8c:	0e 94 ce 0c 	call	0x199c	; 0x199c <TWI_getStatus>
    1e90:	80 34       	cpi	r24, 0x40	; 64
    1e92:	11 f0       	breq	.+4      	; 0x1e98 <EEPROM_readByte+0x90>
        return ERROR;
    1e94:	1d 82       	std	Y+5, r1	; 0x05
    1e96:	0f c0       	rjmp	.+30     	; 0x1eb6 <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
    1e98:	0e 94 bb 0c 	call	0x1976	; 0x1976 <TWI_readByteWithNACK>
    1e9c:	eb 81       	ldd	r30, Y+3	; 0x03
    1e9e:	fc 81       	ldd	r31, Y+4	; 0x04
    1ea0:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
    1ea2:	0e 94 ce 0c 	call	0x199c	; 0x199c <TWI_getStatus>
    1ea6:	88 35       	cpi	r24, 0x58	; 88
    1ea8:	11 f0       	breq	.+4      	; 0x1eae <EEPROM_readByte+0xa6>
        return ERROR;
    1eaa:	1d 82       	std	Y+5, r1	; 0x05
    1eac:	04 c0       	rjmp	.+8      	; 0x1eb6 <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    1eae:	0e 94 86 0c 	call	0x190c	; 0x190c <TWI_stop>

    return SUCCESS;
    1eb2:	81 e0       	ldi	r24, 0x01	; 1
    1eb4:	8d 83       	std	Y+5, r24	; 0x05
    1eb6:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1eb8:	0f 90       	pop	r0
    1eba:	0f 90       	pop	r0
    1ebc:	0f 90       	pop	r0
    1ebe:	0f 90       	pop	r0
    1ec0:	0f 90       	pop	r0
    1ec2:	cf 91       	pop	r28
    1ec4:	df 91       	pop	r29
    1ec6:	08 95       	ret

00001ec8 <main>:
uint8 tick = 0;
uint8 attempt_count = 0;

void timer_callback();

int main(void) {
    1ec8:	0f 93       	push	r16
    1eca:	1f 93       	push	r17
    1ecc:	df 93       	push	r29
    1ece:	cf 93       	push	r28
    1ed0:	cd b7       	in	r28, 0x3d	; 61
    1ed2:	de b7       	in	r29, 0x3e	; 62
    1ed4:	cc 57       	subi	r28, 0x7C	; 124
    1ed6:	d0 40       	sbci	r29, 0x00	; 0
    1ed8:	0f b6       	in	r0, 0x3f	; 63
    1eda:	f8 94       	cli
    1edc:	de bf       	out	0x3e, r29	; 62
    1ede:	0f be       	out	0x3f, r0	; 63
    1ee0:	cd bf       	out	0x3d, r28	; 61
	SREG |= (1 << 7);
    1ee2:	af e5       	ldi	r26, 0x5F	; 95
    1ee4:	b0 e0       	ldi	r27, 0x00	; 0
    1ee6:	ef e5       	ldi	r30, 0x5F	; 95
    1ee8:	f0 e0       	ldi	r31, 0x00	; 0
    1eea:	80 81       	ld	r24, Z
    1eec:	80 68       	ori	r24, 0x80	; 128
    1eee:	8c 93       	st	X, r24
	Buzzer_init();
    1ef0:	0e 94 f6 0d 	call	0x1bec	; 0x1bec <Buzzer_init>
	UART_ConfigType uart_config = { UART_8Bit, UART_Parity_disable,
			UART_ONE_STOP_BIT, UART_BaudRate };
    1ef4:	ce 01       	movw	r24, r28
    1ef6:	8c 5a       	subi	r24, 0xAC	; 172
    1ef8:	9f 4f       	sbci	r25, 0xFF	; 255
    1efa:	e5 96       	adiw	r28, 0x35	; 53
    1efc:	9f af       	std	Y+63, r25	; 0x3f
    1efe:	8e af       	std	Y+62, r24	; 0x3e
    1f00:	e5 97       	sbiw	r28, 0x35	; 53
    1f02:	23 e8       	ldi	r18, 0x83	; 131
    1f04:	30 e0       	ldi	r19, 0x00	; 0
    1f06:	e7 96       	adiw	r28, 0x37	; 55
    1f08:	3f af       	std	Y+63, r19	; 0x3f
    1f0a:	2e af       	std	Y+62, r18	; 0x3e
    1f0c:	e7 97       	sbiw	r28, 0x37	; 55
    1f0e:	37 e0       	ldi	r19, 0x07	; 7
    1f10:	e8 96       	adiw	r28, 0x38	; 56
    1f12:	3f af       	std	Y+63, r19	; 0x3f
    1f14:	e8 97       	sbiw	r28, 0x38	; 56
    1f16:	e7 96       	adiw	r28, 0x37	; 55
    1f18:	ee ad       	ldd	r30, Y+62	; 0x3e
    1f1a:	ff ad       	ldd	r31, Y+63	; 0x3f
    1f1c:	e7 97       	sbiw	r28, 0x37	; 55
    1f1e:	00 80       	ld	r0, Z
    1f20:	e7 96       	adiw	r28, 0x37	; 55
    1f22:	2e ad       	ldd	r18, Y+62	; 0x3e
    1f24:	3f ad       	ldd	r19, Y+63	; 0x3f
    1f26:	e7 97       	sbiw	r28, 0x37	; 55
    1f28:	2f 5f       	subi	r18, 0xFF	; 255
    1f2a:	3f 4f       	sbci	r19, 0xFF	; 255
    1f2c:	e7 96       	adiw	r28, 0x37	; 55
    1f2e:	3f af       	std	Y+63, r19	; 0x3f
    1f30:	2e af       	std	Y+62, r18	; 0x3e
    1f32:	e7 97       	sbiw	r28, 0x37	; 55
    1f34:	e5 96       	adiw	r28, 0x35	; 53
    1f36:	ee ad       	ldd	r30, Y+62	; 0x3e
    1f38:	ff ad       	ldd	r31, Y+63	; 0x3f
    1f3a:	e5 97       	sbiw	r28, 0x35	; 53
    1f3c:	00 82       	st	Z, r0
    1f3e:	e5 96       	adiw	r28, 0x35	; 53
    1f40:	2e ad       	ldd	r18, Y+62	; 0x3e
    1f42:	3f ad       	ldd	r19, Y+63	; 0x3f
    1f44:	e5 97       	sbiw	r28, 0x35	; 53
    1f46:	2f 5f       	subi	r18, 0xFF	; 255
    1f48:	3f 4f       	sbci	r19, 0xFF	; 255
    1f4a:	e5 96       	adiw	r28, 0x35	; 53
    1f4c:	3f af       	std	Y+63, r19	; 0x3f
    1f4e:	2e af       	std	Y+62, r18	; 0x3e
    1f50:	e5 97       	sbiw	r28, 0x35	; 53
    1f52:	e8 96       	adiw	r28, 0x38	; 56
    1f54:	3f ad       	ldd	r19, Y+63	; 0x3f
    1f56:	e8 97       	sbiw	r28, 0x38	; 56
    1f58:	31 50       	subi	r19, 0x01	; 1
    1f5a:	e8 96       	adiw	r28, 0x38	; 56
    1f5c:	3f af       	std	Y+63, r19	; 0x3f
    1f5e:	e8 97       	sbiw	r28, 0x38	; 56
    1f60:	e8 96       	adiw	r28, 0x38	; 56
    1f62:	8f ad       	ldd	r24, Y+63	; 0x3f
    1f64:	e8 97       	sbiw	r28, 0x38	; 56
    1f66:	88 23       	and	r24, r24
    1f68:	b1 f6       	brne	.-84     	; 0x1f16 <main+0x4e>
	UART_init(&uart_config);
    1f6a:	ce 01       	movw	r24, r28
    1f6c:	8c 5a       	subi	r24, 0xAC	; 172
    1f6e:	9f 4f       	sbci	r25, 0xFF	; 255
    1f70:	0e 94 dd 0c 	call	0x19ba	; 0x19ba <UART_init>
	DcMotor_init(&Door);
    1f74:	84 e7       	ldi	r24, 0x74	; 116
    1f76:	90 e0       	ldi	r25, 0x00	; 0
    1f78:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <DcMotor_init>
	PIR_init(&pir_config);
    1f7c:	8a e7       	ldi	r24, 0x7A	; 122
    1f7e:	90 e0       	ldi	r25, 0x00	; 0
    1f80:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <PIR_init>
	Timer_ConfigType timer_config = { 0, 7813, TIMER1, NO_CLOCK, COMPARE_MODE };
    1f84:	ce 01       	movw	r24, r28
    1f86:	85 5a       	subi	r24, 0xA5	; 165
    1f88:	9f 4f       	sbci	r25, 0xFF	; 255
    1f8a:	ea 96       	adiw	r28, 0x3a	; 58
    1f8c:	9f af       	std	Y+63, r25	; 0x3f
    1f8e:	8e af       	std	Y+62, r24	; 0x3e
    1f90:	ea 97       	sbiw	r28, 0x3a	; 58
    1f92:	ec e7       	ldi	r30, 0x7C	; 124
    1f94:	f0 e0       	ldi	r31, 0x00	; 0
    1f96:	ec 96       	adiw	r28, 0x3c	; 60
    1f98:	ff af       	std	Y+63, r31	; 0x3f
    1f9a:	ee af       	std	Y+62, r30	; 0x3e
    1f9c:	ec 97       	sbiw	r28, 0x3c	; 60
    1f9e:	f7 e0       	ldi	r31, 0x07	; 7
    1fa0:	ed 96       	adiw	r28, 0x3d	; 61
    1fa2:	ff af       	std	Y+63, r31	; 0x3f
    1fa4:	ed 97       	sbiw	r28, 0x3d	; 61
    1fa6:	ec 96       	adiw	r28, 0x3c	; 60
    1fa8:	ee ad       	ldd	r30, Y+62	; 0x3e
    1faa:	ff ad       	ldd	r31, Y+63	; 0x3f
    1fac:	ec 97       	sbiw	r28, 0x3c	; 60
    1fae:	00 80       	ld	r0, Z
    1fb0:	ec 96       	adiw	r28, 0x3c	; 60
    1fb2:	2e ad       	ldd	r18, Y+62	; 0x3e
    1fb4:	3f ad       	ldd	r19, Y+63	; 0x3f
    1fb6:	ec 97       	sbiw	r28, 0x3c	; 60
    1fb8:	2f 5f       	subi	r18, 0xFF	; 255
    1fba:	3f 4f       	sbci	r19, 0xFF	; 255
    1fbc:	ec 96       	adiw	r28, 0x3c	; 60
    1fbe:	3f af       	std	Y+63, r19	; 0x3f
    1fc0:	2e af       	std	Y+62, r18	; 0x3e
    1fc2:	ec 97       	sbiw	r28, 0x3c	; 60
    1fc4:	ea 96       	adiw	r28, 0x3a	; 58
    1fc6:	ee ad       	ldd	r30, Y+62	; 0x3e
    1fc8:	ff ad       	ldd	r31, Y+63	; 0x3f
    1fca:	ea 97       	sbiw	r28, 0x3a	; 58
    1fcc:	00 82       	st	Z, r0
    1fce:	ea 96       	adiw	r28, 0x3a	; 58
    1fd0:	2e ad       	ldd	r18, Y+62	; 0x3e
    1fd2:	3f ad       	ldd	r19, Y+63	; 0x3f
    1fd4:	ea 97       	sbiw	r28, 0x3a	; 58
    1fd6:	2f 5f       	subi	r18, 0xFF	; 255
    1fd8:	3f 4f       	sbci	r19, 0xFF	; 255
    1fda:	ea 96       	adiw	r28, 0x3a	; 58
    1fdc:	3f af       	std	Y+63, r19	; 0x3f
    1fde:	2e af       	std	Y+62, r18	; 0x3e
    1fe0:	ea 97       	sbiw	r28, 0x3a	; 58
    1fe2:	ed 96       	adiw	r28, 0x3d	; 61
    1fe4:	3f ad       	ldd	r19, Y+63	; 0x3f
    1fe6:	ed 97       	sbiw	r28, 0x3d	; 61
    1fe8:	31 50       	subi	r19, 0x01	; 1
    1fea:	ed 96       	adiw	r28, 0x3d	; 61
    1fec:	3f af       	std	Y+63, r19	; 0x3f
    1fee:	ed 97       	sbiw	r28, 0x3d	; 61
    1ff0:	ed 96       	adiw	r28, 0x3d	; 61
    1ff2:	8f ad       	ldd	r24, Y+63	; 0x3f
    1ff4:	ed 97       	sbiw	r28, 0x3d	; 61
    1ff6:	88 23       	and	r24, r24
    1ff8:	b1 f6       	brne	.-84     	; 0x1fa6 <main+0xde>
	Timer_init(&timer_config);
    1ffa:	ce 01       	movw	r24, r28
    1ffc:	85 5a       	subi	r24, 0xA5	; 165
    1ffe:	9f 4f       	sbci	r25, 0xFF	; 255
    2000:	0e 94 14 06 	call	0xc28	; 0xc28 <Timer_init>
	Timer_setCallBack(timer_callback, TIMER1);
    2004:	8c e9       	ldi	r24, 0x9C	; 156
    2006:	94 e1       	ldi	r25, 0x14	; 20
    2008:	61 e0       	ldi	r22, 0x01	; 1
    200a:	0e 94 21 07 	call	0xe42	; 0xe42 <Timer_setCallBack>
	uint8 stored_password[PASSWORD_LENGTH];
	uint8 match;
	uint8 mood;

	while (1) {
		switch (state) {
    200e:	80 91 90 00 	lds	r24, 0x0090
    2012:	e8 2f       	mov	r30, r24
    2014:	f0 e0       	ldi	r31, 0x00	; 0
    2016:	e3 96       	adiw	r28, 0x33	; 51
    2018:	ff af       	std	Y+63, r31	; 0x3f
    201a:	ee af       	std	Y+62, r30	; 0x3e
    201c:	e3 97       	sbiw	r28, 0x33	; 51
    201e:	e3 96       	adiw	r28, 0x33	; 51
    2020:	2e ad       	ldd	r18, Y+62	; 0x3e
    2022:	3f ad       	ldd	r19, Y+63	; 0x3f
    2024:	e3 97       	sbiw	r28, 0x33	; 51
    2026:	23 30       	cpi	r18, 0x03	; 3
    2028:	31 05       	cpc	r19, r1
    202a:	09 f4       	brne	.+2      	; 0x202e <main+0x166>
    202c:	9a c2       	rjmp	.+1332   	; 0x2562 <main+0x69a>
    202e:	e3 96       	adiw	r28, 0x33	; 51
    2030:	8e ad       	ldd	r24, Y+62	; 0x3e
    2032:	9f ad       	ldd	r25, Y+63	; 0x3f
    2034:	e3 97       	sbiw	r28, 0x33	; 51
    2036:	84 30       	cpi	r24, 0x04	; 4
    2038:	91 05       	cpc	r25, r1
    203a:	bc f4       	brge	.+46     	; 0x206a <main+0x1a2>
    203c:	e3 96       	adiw	r28, 0x33	; 51
    203e:	ee ad       	ldd	r30, Y+62	; 0x3e
    2040:	ff ad       	ldd	r31, Y+63	; 0x3f
    2042:	e3 97       	sbiw	r28, 0x33	; 51
    2044:	e1 30       	cpi	r30, 0x01	; 1
    2046:	f1 05       	cpc	r31, r1
    2048:	09 f4       	brne	.+2      	; 0x204c <main+0x184>
    204a:	74 c0       	rjmp	.+232    	; 0x2134 <main+0x26c>
    204c:	e3 96       	adiw	r28, 0x33	; 51
    204e:	2e ad       	ldd	r18, Y+62	; 0x3e
    2050:	3f ad       	ldd	r19, Y+63	; 0x3f
    2052:	e3 97       	sbiw	r28, 0x33	; 51
    2054:	22 30       	cpi	r18, 0x02	; 2
    2056:	31 05       	cpc	r19, r1
    2058:	0c f0       	brlt	.+2      	; 0x205c <main+0x194>
    205a:	79 c1       	rjmp	.+754    	; 0x234e <main+0x486>
    205c:	e3 96       	adiw	r28, 0x33	; 51
    205e:	8e ad       	ldd	r24, Y+62	; 0x3e
    2060:	9f ad       	ldd	r25, Y+63	; 0x3f
    2062:	e3 97       	sbiw	r28, 0x33	; 51
    2064:	00 97       	sbiw	r24, 0x00	; 0
    2066:	d1 f0       	breq	.+52     	; 0x209c <main+0x1d4>
    2068:	d2 cf       	rjmp	.-92     	; 0x200e <main+0x146>
    206a:	e3 96       	adiw	r28, 0x33	; 51
    206c:	ee ad       	ldd	r30, Y+62	; 0x3e
    206e:	ff ad       	ldd	r31, Y+63	; 0x3f
    2070:	e3 97       	sbiw	r28, 0x33	; 51
    2072:	e5 30       	cpi	r30, 0x05	; 5
    2074:	f1 05       	cpc	r31, r1
    2076:	09 f4       	brne	.+2      	; 0x207a <main+0x1b2>
    2078:	2f c4       	rjmp	.+2142   	; 0x28d8 <main+0xa10>
    207a:	e3 96       	adiw	r28, 0x33	; 51
    207c:	2e ad       	ldd	r18, Y+62	; 0x3e
    207e:	3f ad       	ldd	r19, Y+63	; 0x3f
    2080:	e3 97       	sbiw	r28, 0x33	; 51
    2082:	25 30       	cpi	r18, 0x05	; 5
    2084:	31 05       	cpc	r19, r1
    2086:	0c f4       	brge	.+2      	; 0x208a <main+0x1c2>
    2088:	1b c3       	rjmp	.+1590   	; 0x26c0 <main+0x7f8>
    208a:	e3 96       	adiw	r28, 0x33	; 51
    208c:	8e ad       	ldd	r24, Y+62	; 0x3e
    208e:	9f ad       	ldd	r25, Y+63	; 0x3f
    2090:	e3 97       	sbiw	r28, 0x33	; 51
    2092:	86 30       	cpi	r24, 0x06	; 6
    2094:	91 05       	cpc	r25, r1
    2096:	09 f4       	brne	.+2      	; 0x209a <main+0x1d2>
    2098:	38 c4       	rjmp	.+2160   	; 0x290a <main+0xa42>
    209a:	b9 cf       	rjmp	.-142    	; 0x200e <main+0x146>
		case IDLE:
			// Receive passwords from HMI ECU
			for (uint8 i = 0; i < PASSWORD_LENGTH; i++) {
    209c:	fe 01       	movw	r30, r28
    209e:	e0 5b       	subi	r30, 0xB0	; 176
    20a0:	ff 4f       	sbci	r31, 0xFF	; 255
    20a2:	10 82       	st	Z, r1
    20a4:	19 c0       	rjmp	.+50     	; 0x20d8 <main+0x210>
				password1[i] = UART_recieveByte();
    20a6:	fe 01       	movw	r30, r28
    20a8:	e0 5b       	subi	r30, 0xB0	; 176
    20aa:	ff 4f       	sbci	r31, 0xFF	; 255
    20ac:	80 81       	ld	r24, Z
    20ae:	08 2f       	mov	r16, r24
    20b0:	10 e0       	ldi	r17, 0x00	; 0
    20b2:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <UART_recieveByte>
    20b6:	28 2f       	mov	r18, r24
    20b8:	ce 01       	movw	r24, r28
    20ba:	8e 59       	subi	r24, 0x9E	; 158
    20bc:	9f 4f       	sbci	r25, 0xFF	; 255
    20be:	fc 01       	movw	r30, r24
    20c0:	e0 0f       	add	r30, r16
    20c2:	f1 1f       	adc	r31, r17
    20c4:	20 83       	st	Z, r18

	while (1) {
		switch (state) {
		case IDLE:
			// Receive passwords from HMI ECU
			for (uint8 i = 0; i < PASSWORD_LENGTH; i++) {
    20c6:	de 01       	movw	r26, r28
    20c8:	a0 5b       	subi	r26, 0xB0	; 176
    20ca:	bf 4f       	sbci	r27, 0xFF	; 255
    20cc:	fe 01       	movw	r30, r28
    20ce:	e0 5b       	subi	r30, 0xB0	; 176
    20d0:	ff 4f       	sbci	r31, 0xFF	; 255
    20d2:	80 81       	ld	r24, Z
    20d4:	8f 5f       	subi	r24, 0xFF	; 255
    20d6:	8c 93       	st	X, r24
    20d8:	fe 01       	movw	r30, r28
    20da:	e0 5b       	subi	r30, 0xB0	; 176
    20dc:	ff 4f       	sbci	r31, 0xFF	; 255
    20de:	80 81       	ld	r24, Z
    20e0:	85 30       	cpi	r24, 0x05	; 5
    20e2:	08 f3       	brcs	.-62     	; 0x20a6 <main+0x1de>
				password1[i] = UART_recieveByte();
			}
			for (uint8 j = 0; j < PASSWORD_LENGTH; j++) {
    20e4:	fe 01       	movw	r30, r28
    20e6:	e1 5b       	subi	r30, 0xB1	; 177
    20e8:	ff 4f       	sbci	r31, 0xFF	; 255
    20ea:	10 82       	st	Z, r1
    20ec:	19 c0       	rjmp	.+50     	; 0x2120 <main+0x258>
				password2[j] = UART_recieveByte();
    20ee:	fe 01       	movw	r30, r28
    20f0:	e1 5b       	subi	r30, 0xB1	; 177
    20f2:	ff 4f       	sbci	r31, 0xFF	; 255
    20f4:	80 81       	ld	r24, Z
    20f6:	08 2f       	mov	r16, r24
    20f8:	10 e0       	ldi	r17, 0x00	; 0
    20fa:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <UART_recieveByte>
    20fe:	28 2f       	mov	r18, r24
    2100:	ce 01       	movw	r24, r28
    2102:	89 59       	subi	r24, 0x99	; 153
    2104:	9f 4f       	sbci	r25, 0xFF	; 255
    2106:	fc 01       	movw	r30, r24
    2108:	e0 0f       	add	r30, r16
    210a:	f1 1f       	adc	r31, r17
    210c:	20 83       	st	Z, r18
		case IDLE:
			// Receive passwords from HMI ECU
			for (uint8 i = 0; i < PASSWORD_LENGTH; i++) {
				password1[i] = UART_recieveByte();
			}
			for (uint8 j = 0; j < PASSWORD_LENGTH; j++) {
    210e:	de 01       	movw	r26, r28
    2110:	a1 5b       	subi	r26, 0xB1	; 177
    2112:	bf 4f       	sbci	r27, 0xFF	; 255
    2114:	fe 01       	movw	r30, r28
    2116:	e1 5b       	subi	r30, 0xB1	; 177
    2118:	ff 4f       	sbci	r31, 0xFF	; 255
    211a:	80 81       	ld	r24, Z
    211c:	8f 5f       	subi	r24, 0xFF	; 255
    211e:	8c 93       	st	X, r24
    2120:	fe 01       	movw	r30, r28
    2122:	e1 5b       	subi	r30, 0xB1	; 177
    2124:	ff 4f       	sbci	r31, 0xFF	; 255
    2126:	80 81       	ld	r24, Z
    2128:	85 30       	cpi	r24, 0x05	; 5
    212a:	08 f3       	brcs	.-62     	; 0x20ee <main+0x226>
				password2[j] = UART_recieveByte();
			}
			state = VERIFY_PASSWORD;
    212c:	81 e0       	ldi	r24, 0x01	; 1
    212e:	80 93 90 00 	sts	0x0090, r24
    2132:	6d cf       	rjmp	.-294    	; 0x200e <main+0x146>
			break;

		case VERIFY_PASSWORD:
			match = 1;
    2134:	fe 01       	movw	r30, r28
    2136:	ed 5a       	subi	r30, 0xAD	; 173
    2138:	ff 4f       	sbci	r31, 0xFF	; 255
    213a:	81 e0       	ldi	r24, 0x01	; 1
    213c:	80 83       	st	Z, r24
			for (uint8 i = 0; i < PASSWORD_LENGTH; i++) {
    213e:	fe 01       	movw	r30, r28
    2140:	e2 5b       	subi	r30, 0xB2	; 178
    2142:	ff 4f       	sbci	r31, 0xFF	; 255
    2144:	10 82       	st	Z, r1
    2146:	2a c0       	rjmp	.+84     	; 0x219c <main+0x2d4>
				if (password1[i] != password2[i]) {
    2148:	fe 01       	movw	r30, r28
    214a:	e2 5b       	subi	r30, 0xB2	; 178
    214c:	ff 4f       	sbci	r31, 0xFF	; 255
    214e:	80 81       	ld	r24, Z
    2150:	28 2f       	mov	r18, r24
    2152:	30 e0       	ldi	r19, 0x00	; 0
    2154:	ce 01       	movw	r24, r28
    2156:	8e 59       	subi	r24, 0x9E	; 158
    2158:	9f 4f       	sbci	r25, 0xFF	; 255
    215a:	fc 01       	movw	r30, r24
    215c:	e2 0f       	add	r30, r18
    215e:	f3 1f       	adc	r31, r19
    2160:	40 81       	ld	r20, Z
    2162:	fe 01       	movw	r30, r28
    2164:	e2 5b       	subi	r30, 0xB2	; 178
    2166:	ff 4f       	sbci	r31, 0xFF	; 255
    2168:	80 81       	ld	r24, Z
    216a:	28 2f       	mov	r18, r24
    216c:	30 e0       	ldi	r19, 0x00	; 0
    216e:	ce 01       	movw	r24, r28
    2170:	89 59       	subi	r24, 0x99	; 153
    2172:	9f 4f       	sbci	r25, 0xFF	; 255
    2174:	fc 01       	movw	r30, r24
    2176:	e2 0f       	add	r30, r18
    2178:	f3 1f       	adc	r31, r19
    217a:	80 81       	ld	r24, Z
    217c:	48 17       	cp	r20, r24
    217e:	29 f0       	breq	.+10     	; 0x218a <main+0x2c2>
					match = 0;
    2180:	fe 01       	movw	r30, r28
    2182:	ed 5a       	subi	r30, 0xAD	; 173
    2184:	ff 4f       	sbci	r31, 0xFF	; 255
    2186:	10 82       	st	Z, r1
    2188:	0f c0       	rjmp	.+30     	; 0x21a8 <main+0x2e0>
			state = VERIFY_PASSWORD;
			break;

		case VERIFY_PASSWORD:
			match = 1;
			for (uint8 i = 0; i < PASSWORD_LENGTH; i++) {
    218a:	de 01       	movw	r26, r28
    218c:	a2 5b       	subi	r26, 0xB2	; 178
    218e:	bf 4f       	sbci	r27, 0xFF	; 255
    2190:	fe 01       	movw	r30, r28
    2192:	e2 5b       	subi	r30, 0xB2	; 178
    2194:	ff 4f       	sbci	r31, 0xFF	; 255
    2196:	80 81       	ld	r24, Z
    2198:	8f 5f       	subi	r24, 0xFF	; 255
    219a:	8c 93       	st	X, r24
    219c:	fe 01       	movw	r30, r28
    219e:	e2 5b       	subi	r30, 0xB2	; 178
    21a0:	ff 4f       	sbci	r31, 0xFF	; 255
    21a2:	80 81       	ld	r24, Z
    21a4:	85 30       	cpi	r24, 0x05	; 5
    21a6:	80 f2       	brcs	.-96     	; 0x2148 <main+0x280>
					match = 0;
					break;
				}
			}

			UART_sendByte(match);  // Send match result
    21a8:	fe 01       	movw	r30, r28
    21aa:	ed 5a       	subi	r30, 0xAD	; 173
    21ac:	ff 4f       	sbci	r31, 0xFF	; 255
    21ae:	80 81       	ld	r24, Z
    21b0:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <UART_sendByte>
			if (match) {
    21b4:	fe 01       	movw	r30, r28
    21b6:	ed 5a       	subi	r30, 0xAD	; 173
    21b8:	ff 4f       	sbci	r31, 0xFF	; 255
    21ba:	80 81       	ld	r24, Z
    21bc:	88 23       	and	r24, r24
    21be:	09 f4       	brne	.+2      	; 0x21c2 <main+0x2fa>
    21c0:	c3 c0       	rjmp	.+390    	; 0x2348 <main+0x480>
				// Store password in EEPROM
				for (uint8 z = 0; z < PASSWORD_LENGTH; z++) {
    21c2:	fe 01       	movw	r30, r28
    21c4:	e3 5b       	subi	r30, 0xB3	; 179
    21c6:	ff 4f       	sbci	r31, 0xFF	; 255
    21c8:	10 82       	st	Z, r1
    21ca:	b3 c0       	rjmp	.+358    	; 0x2332 <main+0x46a>
					uint8 status = EEPROM_writeByte(EEPROM_ADDRESS_START + z,
							password1[z]);
    21cc:	fe 01       	movw	r30, r28
    21ce:	e3 5b       	subi	r30, 0xB3	; 179
    21d0:	ff 4f       	sbci	r31, 0xFF	; 255
    21d2:	80 81       	ld	r24, Z
    21d4:	88 2f       	mov	r24, r24
    21d6:	90 e0       	ldi	r25, 0x00	; 0
    21d8:	8f 5e       	subi	r24, 0xEF	; 239
    21da:	9c 4f       	sbci	r25, 0xFC	; 252
    21dc:	ac 01       	movw	r20, r24
    21de:	fe 01       	movw	r30, r28
    21e0:	e3 5b       	subi	r30, 0xB3	; 179
    21e2:	ff 4f       	sbci	r31, 0xFF	; 255
    21e4:	80 81       	ld	r24, Z
    21e6:	28 2f       	mov	r18, r24
    21e8:	30 e0       	ldi	r19, 0x00	; 0
    21ea:	ce 01       	movw	r24, r28
    21ec:	8e 59       	subi	r24, 0x9E	; 158
    21ee:	9f 4f       	sbci	r25, 0xFF	; 255
    21f0:	fc 01       	movw	r30, r24
    21f2:	e2 0f       	add	r30, r18
    21f4:	f3 1f       	adc	r31, r19
    21f6:	20 81       	ld	r18, Z
    21f8:	ca 01       	movw	r24, r20
    21fa:	62 2f       	mov	r22, r18
    21fc:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <EEPROM_writeByte>
    2200:	fe 01       	movw	r30, r28
    2202:	e4 5b       	subi	r30, 0xB4	; 180
    2204:	ff 4f       	sbci	r31, 0xFF	; 255
    2206:	80 83       	st	Z, r24
					if (status != SUCCESS) {
    2208:	fe 01       	movw	r30, r28
    220a:	e4 5b       	subi	r30, 0xB4	; 180
    220c:	ff 4f       	sbci	r31, 0xFF	; 255
    220e:	80 81       	ld	r24, Z
    2210:	81 30       	cpi	r24, 0x01	; 1
    2212:	09 f0       	breq	.+2      	; 0x2216 <main+0x34e>
    2214:	ff cf       	rjmp	.-2      	; 0x2214 <main+0x34c>
						while (1)
							; // Halt on error
    2216:	fe 01       	movw	r30, r28
    2218:	ed 5b       	subi	r30, 0xBD	; 189
    221a:	ff 4f       	sbci	r31, 0xFF	; 255
    221c:	80 e0       	ldi	r24, 0x00	; 0
    221e:	90 e0       	ldi	r25, 0x00	; 0
    2220:	a0 e2       	ldi	r26, 0x20	; 32
    2222:	b1 e4       	ldi	r27, 0x41	; 65
    2224:	80 83       	st	Z, r24
    2226:	91 83       	std	Z+1, r25	; 0x01
    2228:	a2 83       	std	Z+2, r26	; 0x02
    222a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    222c:	8e 01       	movw	r16, r28
    222e:	01 5c       	subi	r16, 0xC1	; 193
    2230:	1f 4f       	sbci	r17, 0xFF	; 255
    2232:	fe 01       	movw	r30, r28
    2234:	ed 5b       	subi	r30, 0xBD	; 189
    2236:	ff 4f       	sbci	r31, 0xFF	; 255
    2238:	60 81       	ld	r22, Z
    223a:	71 81       	ldd	r23, Z+1	; 0x01
    223c:	82 81       	ldd	r24, Z+2	; 0x02
    223e:	93 81       	ldd	r25, Z+3	; 0x03
    2240:	20 e0       	ldi	r18, 0x00	; 0
    2242:	30 e0       	ldi	r19, 0x00	; 0
    2244:	4a ef       	ldi	r20, 0xFA	; 250
    2246:	54 e4       	ldi	r21, 0x44	; 68
    2248:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    224c:	dc 01       	movw	r26, r24
    224e:	cb 01       	movw	r24, r22
    2250:	f8 01       	movw	r30, r16
    2252:	80 83       	st	Z, r24
    2254:	91 83       	std	Z+1, r25	; 0x01
    2256:	a2 83       	std	Z+2, r26	; 0x02
    2258:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    225a:	fe 01       	movw	r30, r28
    225c:	ff 96       	adiw	r30, 0x3f	; 63
    225e:	60 81       	ld	r22, Z
    2260:	71 81       	ldd	r23, Z+1	; 0x01
    2262:	82 81       	ldd	r24, Z+2	; 0x02
    2264:	93 81       	ldd	r25, Z+3	; 0x03
    2266:	20 e0       	ldi	r18, 0x00	; 0
    2268:	30 e0       	ldi	r19, 0x00	; 0
    226a:	40 e8       	ldi	r20, 0x80	; 128
    226c:	5f e3       	ldi	r21, 0x3F	; 63
    226e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2272:	88 23       	and	r24, r24
    2274:	2c f4       	brge	.+10     	; 0x2280 <main+0x3b8>
		__ticks = 1;
    2276:	81 e0       	ldi	r24, 0x01	; 1
    2278:	90 e0       	ldi	r25, 0x00	; 0
    227a:	9e af       	std	Y+62, r25	; 0x3e
    227c:	8d af       	std	Y+61, r24	; 0x3d
    227e:	46 c0       	rjmp	.+140    	; 0x230c <main+0x444>
	else if (__tmp > 65535)
    2280:	fe 01       	movw	r30, r28
    2282:	ff 96       	adiw	r30, 0x3f	; 63
    2284:	60 81       	ld	r22, Z
    2286:	71 81       	ldd	r23, Z+1	; 0x01
    2288:	82 81       	ldd	r24, Z+2	; 0x02
    228a:	93 81       	ldd	r25, Z+3	; 0x03
    228c:	20 e0       	ldi	r18, 0x00	; 0
    228e:	3f ef       	ldi	r19, 0xFF	; 255
    2290:	4f e7       	ldi	r20, 0x7F	; 127
    2292:	57 e4       	ldi	r21, 0x47	; 71
    2294:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2298:	18 16       	cp	r1, r24
    229a:	64 f5       	brge	.+88     	; 0x22f4 <main+0x42c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    229c:	fe 01       	movw	r30, r28
    229e:	ed 5b       	subi	r30, 0xBD	; 189
    22a0:	ff 4f       	sbci	r31, 0xFF	; 255
    22a2:	60 81       	ld	r22, Z
    22a4:	71 81       	ldd	r23, Z+1	; 0x01
    22a6:	82 81       	ldd	r24, Z+2	; 0x02
    22a8:	93 81       	ldd	r25, Z+3	; 0x03
    22aa:	20 e0       	ldi	r18, 0x00	; 0
    22ac:	30 e0       	ldi	r19, 0x00	; 0
    22ae:	40 e2       	ldi	r20, 0x20	; 32
    22b0:	51 e4       	ldi	r21, 0x41	; 65
    22b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22b6:	dc 01       	movw	r26, r24
    22b8:	cb 01       	movw	r24, r22
    22ba:	bc 01       	movw	r22, r24
    22bc:	cd 01       	movw	r24, r26
    22be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22c2:	dc 01       	movw	r26, r24
    22c4:	cb 01       	movw	r24, r22
    22c6:	9e af       	std	Y+62, r25	; 0x3e
    22c8:	8d af       	std	Y+61, r24	; 0x3d
    22ca:	0f c0       	rjmp	.+30     	; 0x22ea <main+0x422>
    22cc:	88 ec       	ldi	r24, 0xC8	; 200
    22ce:	90 e0       	ldi	r25, 0x00	; 0
    22d0:	9c af       	std	Y+60, r25	; 0x3c
    22d2:	8b af       	std	Y+59, r24	; 0x3b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    22d4:	8b ad       	ldd	r24, Y+59	; 0x3b
    22d6:	9c ad       	ldd	r25, Y+60	; 0x3c
    22d8:	01 97       	sbiw	r24, 0x01	; 1
    22da:	f1 f7       	brne	.-4      	; 0x22d8 <main+0x410>
    22dc:	9c af       	std	Y+60, r25	; 0x3c
    22de:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22e0:	8d ad       	ldd	r24, Y+61	; 0x3d
    22e2:	9e ad       	ldd	r25, Y+62	; 0x3e
    22e4:	01 97       	sbiw	r24, 0x01	; 1
    22e6:	9e af       	std	Y+62, r25	; 0x3e
    22e8:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22ea:	8d ad       	ldd	r24, Y+61	; 0x3d
    22ec:	9e ad       	ldd	r25, Y+62	; 0x3e
    22ee:	00 97       	sbiw	r24, 0x00	; 0
    22f0:	69 f7       	brne	.-38     	; 0x22cc <main+0x404>
    22f2:	16 c0       	rjmp	.+44     	; 0x2320 <main+0x458>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22f4:	fe 01       	movw	r30, r28
    22f6:	ff 96       	adiw	r30, 0x3f	; 63
    22f8:	60 81       	ld	r22, Z
    22fa:	71 81       	ldd	r23, Z+1	; 0x01
    22fc:	82 81       	ldd	r24, Z+2	; 0x02
    22fe:	93 81       	ldd	r25, Z+3	; 0x03
    2300:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2304:	dc 01       	movw	r26, r24
    2306:	cb 01       	movw	r24, r22
    2308:	9e af       	std	Y+62, r25	; 0x3e
    230a:	8d af       	std	Y+61, r24	; 0x3d
    230c:	8d ad       	ldd	r24, Y+61	; 0x3d
    230e:	9e ad       	ldd	r25, Y+62	; 0x3e
    2310:	9a af       	std	Y+58, r25	; 0x3a
    2312:	89 af       	std	Y+57, r24	; 0x39
    2314:	89 ad       	ldd	r24, Y+57	; 0x39
    2316:	9a ad       	ldd	r25, Y+58	; 0x3a
    2318:	01 97       	sbiw	r24, 0x01	; 1
    231a:	f1 f7       	brne	.-4      	; 0x2318 <main+0x450>
    231c:	9a af       	std	Y+58, r25	; 0x3a
    231e:	89 af       	std	Y+57, r24	; 0x39
			}

			UART_sendByte(match);  // Send match result
			if (match) {
				// Store password in EEPROM
				for (uint8 z = 0; z < PASSWORD_LENGTH; z++) {
    2320:	de 01       	movw	r26, r28
    2322:	a3 5b       	subi	r26, 0xB3	; 179
    2324:	bf 4f       	sbci	r27, 0xFF	; 255
    2326:	fe 01       	movw	r30, r28
    2328:	e3 5b       	subi	r30, 0xB3	; 179
    232a:	ff 4f       	sbci	r31, 0xFF	; 255
    232c:	80 81       	ld	r24, Z
    232e:	8f 5f       	subi	r24, 0xFF	; 255
    2330:	8c 93       	st	X, r24
    2332:	fe 01       	movw	r30, r28
    2334:	e3 5b       	subi	r30, 0xB3	; 179
    2336:	ff 4f       	sbci	r31, 0xFF	; 255
    2338:	80 81       	ld	r24, Z
    233a:	85 30       	cpi	r24, 0x05	; 5
    233c:	08 f4       	brcc	.+2      	; 0x2340 <main+0x478>
    233e:	46 cf       	rjmp	.-372    	; 0x21cc <main+0x304>
						while (1)
							; // Halt on error
					}
					_delay_ms(10);
				}
				state = ENTER_PASSWORD;
    2340:	82 e0       	ldi	r24, 0x02	; 2
    2342:	80 93 90 00 	sts	0x0090, r24
    2346:	63 ce       	rjmp	.-826    	; 0x200e <main+0x146>
			} else {
				state = IDLE;
    2348:	10 92 90 00 	sts	0x0090, r1
    234c:	60 ce       	rjmp	.-832    	; 0x200e <main+0x146>
			}
			break;

		case ENTER_PASSWORD:
			mood = UART_recieveByte();
    234e:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <UART_recieveByte>
    2352:	fe 01       	movw	r30, r28
    2354:	ee 5a       	subi	r30, 0xAE	; 174
    2356:	ff 4f       	sbci	r31, 0xFF	; 255
    2358:	80 83       	st	Z, r24
			// Load stored password from EEPROM
			for (uint8 z = 0; z < PASSWORD_LENGTH; z++) {
    235a:	fe 01       	movw	r30, r28
    235c:	e5 5b       	subi	r30, 0xB5	; 181
    235e:	ff 4f       	sbci	r31, 0xFF	; 255
    2360:	10 82       	st	Z, r1
    2362:	21 c0       	rjmp	.+66     	; 0x23a6 <main+0x4de>
				EEPROM_readByte(EEPROM_ADDRESS_START + z, &stored_password[z]);
    2364:	fe 01       	movw	r30, r28
    2366:	e5 5b       	subi	r30, 0xB5	; 181
    2368:	ff 4f       	sbci	r31, 0xFF	; 255
    236a:	80 81       	ld	r24, Z
    236c:	88 2f       	mov	r24, r24
    236e:	90 e0       	ldi	r25, 0x00	; 0
    2370:	8f 5e       	subi	r24, 0xEF	; 239
    2372:	9c 4f       	sbci	r25, 0xFC	; 252
    2374:	ac 01       	movw	r20, r24
    2376:	fe 01       	movw	r30, r28
    2378:	e5 5b       	subi	r30, 0xB5	; 181
    237a:	ff 4f       	sbci	r31, 0xFF	; 255
    237c:	80 81       	ld	r24, Z
    237e:	88 2f       	mov	r24, r24
    2380:	90 e0       	ldi	r25, 0x00	; 0
    2382:	9e 01       	movw	r18, r28
    2384:	24 59       	subi	r18, 0x94	; 148
    2386:	3f 4f       	sbci	r19, 0xFF	; 255
    2388:	28 0f       	add	r18, r24
    238a:	39 1f       	adc	r19, r25
    238c:	ca 01       	movw	r24, r20
    238e:	b9 01       	movw	r22, r18
    2390:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <EEPROM_readByte>
			break;

		case ENTER_PASSWORD:
			mood = UART_recieveByte();
			// Load stored password from EEPROM
			for (uint8 z = 0; z < PASSWORD_LENGTH; z++) {
    2394:	de 01       	movw	r26, r28
    2396:	a5 5b       	subi	r26, 0xB5	; 181
    2398:	bf 4f       	sbci	r27, 0xFF	; 255
    239a:	fe 01       	movw	r30, r28
    239c:	e5 5b       	subi	r30, 0xB5	; 181
    239e:	ff 4f       	sbci	r31, 0xFF	; 255
    23a0:	80 81       	ld	r24, Z
    23a2:	8f 5f       	subi	r24, 0xFF	; 255
    23a4:	8c 93       	st	X, r24
    23a6:	fe 01       	movw	r30, r28
    23a8:	e5 5b       	subi	r30, 0xB5	; 181
    23aa:	ff 4f       	sbci	r31, 0xFF	; 255
    23ac:	80 81       	ld	r24, Z
    23ae:	85 30       	cpi	r24, 0x05	; 5
    23b0:	c8 f2       	brcs	.-78     	; 0x2364 <main+0x49c>
				EEPROM_readByte(EEPROM_ADDRESS_START + z, &stored_password[z]);
			}

			uint8 match2 = 1;
    23b2:	fe 01       	movw	r30, r28
    23b4:	ef 5a       	subi	r30, 0xAF	; 175
    23b6:	ff 4f       	sbci	r31, 0xFF	; 255
    23b8:	81 e0       	ldi	r24, 0x01	; 1
    23ba:	80 83       	st	Z, r24
			for (uint8 x = 0; x < PASSWORD_LENGTH; x++) {
    23bc:	fe 01       	movw	r30, r28
    23be:	e6 5b       	subi	r30, 0xB6	; 182
    23c0:	ff 4f       	sbci	r31, 0xFF	; 255
    23c2:	10 82       	st	Z, r1
    23c4:	98 c0       	rjmp	.+304    	; 0x24f6 <main+0x62e>
				uint8 K = UART_recieveByte();
    23c6:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <UART_recieveByte>
    23ca:	fe 01       	movw	r30, r28
    23cc:	e7 5b       	subi	r30, 0xB7	; 183
    23ce:	ff 4f       	sbci	r31, 0xFF	; 255
    23d0:	80 83       	st	Z, r24
    23d2:	80 e0       	ldi	r24, 0x00	; 0
    23d4:	90 e0       	ldi	r25, 0x00	; 0
    23d6:	a0 ea       	ldi	r26, 0xA0	; 160
    23d8:	b1 e4       	ldi	r27, 0x41	; 65
    23da:	8d ab       	std	Y+53, r24	; 0x35
    23dc:	9e ab       	std	Y+54, r25	; 0x36
    23de:	af ab       	std	Y+55, r26	; 0x37
    23e0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23e2:	6d a9       	ldd	r22, Y+53	; 0x35
    23e4:	7e a9       	ldd	r23, Y+54	; 0x36
    23e6:	8f a9       	ldd	r24, Y+55	; 0x37
    23e8:	98 ad       	ldd	r25, Y+56	; 0x38
    23ea:	20 e0       	ldi	r18, 0x00	; 0
    23ec:	30 e0       	ldi	r19, 0x00	; 0
    23ee:	4a ef       	ldi	r20, 0xFA	; 250
    23f0:	54 e4       	ldi	r21, 0x44	; 68
    23f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23f6:	dc 01       	movw	r26, r24
    23f8:	cb 01       	movw	r24, r22
    23fa:	89 ab       	std	Y+49, r24	; 0x31
    23fc:	9a ab       	std	Y+50, r25	; 0x32
    23fe:	ab ab       	std	Y+51, r26	; 0x33
    2400:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2402:	69 a9       	ldd	r22, Y+49	; 0x31
    2404:	7a a9       	ldd	r23, Y+50	; 0x32
    2406:	8b a9       	ldd	r24, Y+51	; 0x33
    2408:	9c a9       	ldd	r25, Y+52	; 0x34
    240a:	20 e0       	ldi	r18, 0x00	; 0
    240c:	30 e0       	ldi	r19, 0x00	; 0
    240e:	40 e8       	ldi	r20, 0x80	; 128
    2410:	5f e3       	ldi	r21, 0x3F	; 63
    2412:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2416:	88 23       	and	r24, r24
    2418:	2c f4       	brge	.+10     	; 0x2424 <main+0x55c>
		__ticks = 1;
    241a:	81 e0       	ldi	r24, 0x01	; 1
    241c:	90 e0       	ldi	r25, 0x00	; 0
    241e:	98 ab       	std	Y+48, r25	; 0x30
    2420:	8f a7       	std	Y+47, r24	; 0x2f
    2422:	3f c0       	rjmp	.+126    	; 0x24a2 <main+0x5da>
	else if (__tmp > 65535)
    2424:	69 a9       	ldd	r22, Y+49	; 0x31
    2426:	7a a9       	ldd	r23, Y+50	; 0x32
    2428:	8b a9       	ldd	r24, Y+51	; 0x33
    242a:	9c a9       	ldd	r25, Y+52	; 0x34
    242c:	20 e0       	ldi	r18, 0x00	; 0
    242e:	3f ef       	ldi	r19, 0xFF	; 255
    2430:	4f e7       	ldi	r20, 0x7F	; 127
    2432:	57 e4       	ldi	r21, 0x47	; 71
    2434:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2438:	18 16       	cp	r1, r24
    243a:	4c f5       	brge	.+82     	; 0x248e <main+0x5c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    243c:	6d a9       	ldd	r22, Y+53	; 0x35
    243e:	7e a9       	ldd	r23, Y+54	; 0x36
    2440:	8f a9       	ldd	r24, Y+55	; 0x37
    2442:	98 ad       	ldd	r25, Y+56	; 0x38
    2444:	20 e0       	ldi	r18, 0x00	; 0
    2446:	30 e0       	ldi	r19, 0x00	; 0
    2448:	40 e2       	ldi	r20, 0x20	; 32
    244a:	51 e4       	ldi	r21, 0x41	; 65
    244c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2450:	dc 01       	movw	r26, r24
    2452:	cb 01       	movw	r24, r22
    2454:	bc 01       	movw	r22, r24
    2456:	cd 01       	movw	r24, r26
    2458:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    245c:	dc 01       	movw	r26, r24
    245e:	cb 01       	movw	r24, r22
    2460:	98 ab       	std	Y+48, r25	; 0x30
    2462:	8f a7       	std	Y+47, r24	; 0x2f
    2464:	0f c0       	rjmp	.+30     	; 0x2484 <main+0x5bc>
    2466:	88 ec       	ldi	r24, 0xC8	; 200
    2468:	90 e0       	ldi	r25, 0x00	; 0
    246a:	9e a7       	std	Y+46, r25	; 0x2e
    246c:	8d a7       	std	Y+45, r24	; 0x2d
    246e:	8d a5       	ldd	r24, Y+45	; 0x2d
    2470:	9e a5       	ldd	r25, Y+46	; 0x2e
    2472:	01 97       	sbiw	r24, 0x01	; 1
    2474:	f1 f7       	brne	.-4      	; 0x2472 <main+0x5aa>
    2476:	9e a7       	std	Y+46, r25	; 0x2e
    2478:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    247a:	8f a5       	ldd	r24, Y+47	; 0x2f
    247c:	98 a9       	ldd	r25, Y+48	; 0x30
    247e:	01 97       	sbiw	r24, 0x01	; 1
    2480:	98 ab       	std	Y+48, r25	; 0x30
    2482:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2484:	8f a5       	ldd	r24, Y+47	; 0x2f
    2486:	98 a9       	ldd	r25, Y+48	; 0x30
    2488:	00 97       	sbiw	r24, 0x00	; 0
    248a:	69 f7       	brne	.-38     	; 0x2466 <main+0x59e>
    248c:	14 c0       	rjmp	.+40     	; 0x24b6 <main+0x5ee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    248e:	69 a9       	ldd	r22, Y+49	; 0x31
    2490:	7a a9       	ldd	r23, Y+50	; 0x32
    2492:	8b a9       	ldd	r24, Y+51	; 0x33
    2494:	9c a9       	ldd	r25, Y+52	; 0x34
    2496:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    249a:	dc 01       	movw	r26, r24
    249c:	cb 01       	movw	r24, r22
    249e:	98 ab       	std	Y+48, r25	; 0x30
    24a0:	8f a7       	std	Y+47, r24	; 0x2f
    24a2:	8f a5       	ldd	r24, Y+47	; 0x2f
    24a4:	98 a9       	ldd	r25, Y+48	; 0x30
    24a6:	9c a7       	std	Y+44, r25	; 0x2c
    24a8:	8b a7       	std	Y+43, r24	; 0x2b
    24aa:	8b a5       	ldd	r24, Y+43	; 0x2b
    24ac:	9c a5       	ldd	r25, Y+44	; 0x2c
    24ae:	01 97       	sbiw	r24, 0x01	; 1
    24b0:	f1 f7       	brne	.-4      	; 0x24ae <main+0x5e6>
    24b2:	9c a7       	std	Y+44, r25	; 0x2c
    24b4:	8b a7       	std	Y+43, r24	; 0x2b
				_delay_ms(20);
				if (K != stored_password[x]) {
    24b6:	fe 01       	movw	r30, r28
    24b8:	e6 5b       	subi	r30, 0xB6	; 182
    24ba:	ff 4f       	sbci	r31, 0xFF	; 255
    24bc:	80 81       	ld	r24, Z
    24be:	28 2f       	mov	r18, r24
    24c0:	30 e0       	ldi	r19, 0x00	; 0
    24c2:	ce 01       	movw	r24, r28
    24c4:	84 59       	subi	r24, 0x94	; 148
    24c6:	9f 4f       	sbci	r25, 0xFF	; 255
    24c8:	fc 01       	movw	r30, r24
    24ca:	e2 0f       	add	r30, r18
    24cc:	f3 1f       	adc	r31, r19
    24ce:	90 81       	ld	r25, Z
    24d0:	fe 01       	movw	r30, r28
    24d2:	e7 5b       	subi	r30, 0xB7	; 183
    24d4:	ff 4f       	sbci	r31, 0xFF	; 255
    24d6:	80 81       	ld	r24, Z
    24d8:	98 17       	cp	r25, r24
    24da:	21 f0       	breq	.+8      	; 0x24e4 <main+0x61c>
					match2 = 0;
    24dc:	fe 01       	movw	r30, r28
    24de:	ef 5a       	subi	r30, 0xAF	; 175
    24e0:	ff 4f       	sbci	r31, 0xFF	; 255
    24e2:	10 82       	st	Z, r1
			for (uint8 z = 0; z < PASSWORD_LENGTH; z++) {
				EEPROM_readByte(EEPROM_ADDRESS_START + z, &stored_password[z]);
			}

			uint8 match2 = 1;
			for (uint8 x = 0; x < PASSWORD_LENGTH; x++) {
    24e4:	de 01       	movw	r26, r28
    24e6:	a6 5b       	subi	r26, 0xB6	; 182
    24e8:	bf 4f       	sbci	r27, 0xFF	; 255
    24ea:	fe 01       	movw	r30, r28
    24ec:	e6 5b       	subi	r30, 0xB6	; 182
    24ee:	ff 4f       	sbci	r31, 0xFF	; 255
    24f0:	80 81       	ld	r24, Z
    24f2:	8f 5f       	subi	r24, 0xFF	; 255
    24f4:	8c 93       	st	X, r24
    24f6:	fe 01       	movw	r30, r28
    24f8:	e6 5b       	subi	r30, 0xB6	; 182
    24fa:	ff 4f       	sbci	r31, 0xFF	; 255
    24fc:	80 81       	ld	r24, Z
    24fe:	85 30       	cpi	r24, 0x05	; 5
    2500:	08 f4       	brcc	.+2      	; 0x2504 <main+0x63c>
    2502:	61 cf       	rjmp	.-318    	; 0x23c6 <main+0x4fe>
				if (K != stored_password[x]) {
					match2 = 0;
				}
			}

			if (match2) {
    2504:	fe 01       	movw	r30, r28
    2506:	ef 5a       	subi	r30, 0xAF	; 175
    2508:	ff 4f       	sbci	r31, 0xFF	; 255
    250a:	80 81       	ld	r24, Z
    250c:	88 23       	and	r24, r24
    250e:	99 f0       	breq	.+38     	; 0x2536 <main+0x66e>
				attempt_count = 0;
    2510:	10 92 92 00 	sts	0x0092, r1
				UART_sendByte(1);
    2514:	81 e0       	ldi	r24, 0x01	; 1
    2516:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <UART_sendByte>
				if (mood == 0) {//see which mood the user choose
    251a:	fe 01       	movw	r30, r28
    251c:	ee 5a       	subi	r30, 0xAE	; 174
    251e:	ff 4f       	sbci	r31, 0xFF	; 255
    2520:	80 81       	ld	r24, Z
    2522:	88 23       	and	r24, r24
    2524:	21 f4       	brne	.+8      	; 0x252e <main+0x666>
					state = DOOR_OPEN;
    2526:	84 e0       	ldi	r24, 0x04	; 4
    2528:	80 93 90 00 	sts	0x0090, r24
    252c:	70 cd       	rjmp	.-1312   	; 0x200e <main+0x146>
				} else {
					state = CHANGE_PASSWORD;
    252e:	83 e0       	ldi	r24, 0x03	; 3
    2530:	80 93 90 00 	sts	0x0090, r24
    2534:	6c cd       	rjmp	.-1320   	; 0x200e <main+0x146>
				}
			} else {
				attempt_count++;
    2536:	80 91 92 00 	lds	r24, 0x0092
    253a:	8f 5f       	subi	r24, 0xFF	; 255
    253c:	80 93 92 00 	sts	0x0092, r24
				if (attempt_count == MAX_ATTEMPTS) {
    2540:	80 91 92 00 	lds	r24, 0x0092
    2544:	83 30       	cpi	r24, 0x03	; 3
    2546:	31 f4       	brne	.+12     	; 0x2554 <main+0x68c>
					state = LOCKOUT;
    2548:	86 e0       	ldi	r24, 0x06	; 6
    254a:	80 93 90 00 	sts	0x0090, r24
					attempt_count = 0;
    254e:	10 92 92 00 	sts	0x0092, r1
    2552:	03 c0       	rjmp	.+6      	; 0x255a <main+0x692>
				}else{
					state = ENTER_PASSWORD;
    2554:	82 e0       	ldi	r24, 0x02	; 2
    2556:	80 93 90 00 	sts	0x0090, r24
				}
				UART_sendByte(0);
    255a:	80 e0       	ldi	r24, 0x00	; 0
    255c:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <UART_sendByte>
    2560:	56 cd       	rjmp	.-1364   	; 0x200e <main+0x146>
			}
			break;
		case CHANGE_PASSWORD:

			// Store password in EEPROM
			for (uint8 z = 0; z < PASSWORD_LENGTH; z++) {
    2562:	fe 01       	movw	r30, r28
    2564:	e8 5b       	subi	r30, 0xB8	; 184
    2566:	ff 4f       	sbci	r31, 0xFF	; 255
    2568:	10 82       	st	Z, r1
    256a:	a0 c0       	rjmp	.+320    	; 0x26ac <main+0x7e4>
				uint8 status = EEPROM_writeByte(EEPROM_ADDRESS_START + z,
						password1[z]);
    256c:	fe 01       	movw	r30, r28
    256e:	e8 5b       	subi	r30, 0xB8	; 184
    2570:	ff 4f       	sbci	r31, 0xFF	; 255
    2572:	80 81       	ld	r24, Z
    2574:	88 2f       	mov	r24, r24
    2576:	90 e0       	ldi	r25, 0x00	; 0
    2578:	8f 5e       	subi	r24, 0xEF	; 239
    257a:	9c 4f       	sbci	r25, 0xFC	; 252
    257c:	ac 01       	movw	r20, r24
    257e:	fe 01       	movw	r30, r28
    2580:	e8 5b       	subi	r30, 0xB8	; 184
    2582:	ff 4f       	sbci	r31, 0xFF	; 255
    2584:	80 81       	ld	r24, Z
    2586:	28 2f       	mov	r18, r24
    2588:	30 e0       	ldi	r19, 0x00	; 0
    258a:	ce 01       	movw	r24, r28
    258c:	8e 59       	subi	r24, 0x9E	; 158
    258e:	9f 4f       	sbci	r25, 0xFF	; 255
    2590:	fc 01       	movw	r30, r24
    2592:	e2 0f       	add	r30, r18
    2594:	f3 1f       	adc	r31, r19
    2596:	20 81       	ld	r18, Z
    2598:	ca 01       	movw	r24, r20
    259a:	62 2f       	mov	r22, r18
    259c:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <EEPROM_writeByte>
    25a0:	fe 01       	movw	r30, r28
    25a2:	e9 5b       	subi	r30, 0xB9	; 185
    25a4:	ff 4f       	sbci	r31, 0xFF	; 255
    25a6:	80 83       	st	Z, r24
				if (status != SUCCESS) {
    25a8:	fe 01       	movw	r30, r28
    25aa:	e9 5b       	subi	r30, 0xB9	; 185
    25ac:	ff 4f       	sbci	r31, 0xFF	; 255
    25ae:	80 81       	ld	r24, Z
    25b0:	81 30       	cpi	r24, 0x01	; 1
    25b2:	09 f0       	breq	.+2      	; 0x25b6 <main+0x6ee>
    25b4:	ff cf       	rjmp	.-2      	; 0x25b4 <main+0x6ec>
					while (1)
						; // Halt on error
    25b6:	80 e0       	ldi	r24, 0x00	; 0
    25b8:	90 e0       	ldi	r25, 0x00	; 0
    25ba:	a0 e2       	ldi	r26, 0x20	; 32
    25bc:	b1 e4       	ldi	r27, 0x41	; 65
    25be:	8f a3       	std	Y+39, r24	; 0x27
    25c0:	98 a7       	std	Y+40, r25	; 0x28
    25c2:	a9 a7       	std	Y+41, r26	; 0x29
    25c4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25c6:	6f a1       	ldd	r22, Y+39	; 0x27
    25c8:	78 a5       	ldd	r23, Y+40	; 0x28
    25ca:	89 a5       	ldd	r24, Y+41	; 0x29
    25cc:	9a a5       	ldd	r25, Y+42	; 0x2a
    25ce:	20 e0       	ldi	r18, 0x00	; 0
    25d0:	30 e0       	ldi	r19, 0x00	; 0
    25d2:	4a ef       	ldi	r20, 0xFA	; 250
    25d4:	54 e4       	ldi	r21, 0x44	; 68
    25d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25da:	dc 01       	movw	r26, r24
    25dc:	cb 01       	movw	r24, r22
    25de:	8b a3       	std	Y+35, r24	; 0x23
    25e0:	9c a3       	std	Y+36, r25	; 0x24
    25e2:	ad a3       	std	Y+37, r26	; 0x25
    25e4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    25e6:	6b a1       	ldd	r22, Y+35	; 0x23
    25e8:	7c a1       	ldd	r23, Y+36	; 0x24
    25ea:	8d a1       	ldd	r24, Y+37	; 0x25
    25ec:	9e a1       	ldd	r25, Y+38	; 0x26
    25ee:	20 e0       	ldi	r18, 0x00	; 0
    25f0:	30 e0       	ldi	r19, 0x00	; 0
    25f2:	40 e8       	ldi	r20, 0x80	; 128
    25f4:	5f e3       	ldi	r21, 0x3F	; 63
    25f6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    25fa:	88 23       	and	r24, r24
    25fc:	2c f4       	brge	.+10     	; 0x2608 <main+0x740>
		__ticks = 1;
    25fe:	81 e0       	ldi	r24, 0x01	; 1
    2600:	90 e0       	ldi	r25, 0x00	; 0
    2602:	9a a3       	std	Y+34, r25	; 0x22
    2604:	89 a3       	std	Y+33, r24	; 0x21
    2606:	3f c0       	rjmp	.+126    	; 0x2686 <main+0x7be>
	else if (__tmp > 65535)
    2608:	6b a1       	ldd	r22, Y+35	; 0x23
    260a:	7c a1       	ldd	r23, Y+36	; 0x24
    260c:	8d a1       	ldd	r24, Y+37	; 0x25
    260e:	9e a1       	ldd	r25, Y+38	; 0x26
    2610:	20 e0       	ldi	r18, 0x00	; 0
    2612:	3f ef       	ldi	r19, 0xFF	; 255
    2614:	4f e7       	ldi	r20, 0x7F	; 127
    2616:	57 e4       	ldi	r21, 0x47	; 71
    2618:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    261c:	18 16       	cp	r1, r24
    261e:	4c f5       	brge	.+82     	; 0x2672 <main+0x7aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2620:	6f a1       	ldd	r22, Y+39	; 0x27
    2622:	78 a5       	ldd	r23, Y+40	; 0x28
    2624:	89 a5       	ldd	r24, Y+41	; 0x29
    2626:	9a a5       	ldd	r25, Y+42	; 0x2a
    2628:	20 e0       	ldi	r18, 0x00	; 0
    262a:	30 e0       	ldi	r19, 0x00	; 0
    262c:	40 e2       	ldi	r20, 0x20	; 32
    262e:	51 e4       	ldi	r21, 0x41	; 65
    2630:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2634:	dc 01       	movw	r26, r24
    2636:	cb 01       	movw	r24, r22
    2638:	bc 01       	movw	r22, r24
    263a:	cd 01       	movw	r24, r26
    263c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2640:	dc 01       	movw	r26, r24
    2642:	cb 01       	movw	r24, r22
    2644:	9a a3       	std	Y+34, r25	; 0x22
    2646:	89 a3       	std	Y+33, r24	; 0x21
    2648:	0f c0       	rjmp	.+30     	; 0x2668 <main+0x7a0>
    264a:	88 ec       	ldi	r24, 0xC8	; 200
    264c:	90 e0       	ldi	r25, 0x00	; 0
    264e:	98 a3       	std	Y+32, r25	; 0x20
    2650:	8f 8f       	std	Y+31, r24	; 0x1f
    2652:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2654:	98 a1       	ldd	r25, Y+32	; 0x20
    2656:	01 97       	sbiw	r24, 0x01	; 1
    2658:	f1 f7       	brne	.-4      	; 0x2656 <main+0x78e>
    265a:	98 a3       	std	Y+32, r25	; 0x20
    265c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    265e:	89 a1       	ldd	r24, Y+33	; 0x21
    2660:	9a a1       	ldd	r25, Y+34	; 0x22
    2662:	01 97       	sbiw	r24, 0x01	; 1
    2664:	9a a3       	std	Y+34, r25	; 0x22
    2666:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2668:	89 a1       	ldd	r24, Y+33	; 0x21
    266a:	9a a1       	ldd	r25, Y+34	; 0x22
    266c:	00 97       	sbiw	r24, 0x00	; 0
    266e:	69 f7       	brne	.-38     	; 0x264a <main+0x782>
    2670:	14 c0       	rjmp	.+40     	; 0x269a <main+0x7d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2672:	6b a1       	ldd	r22, Y+35	; 0x23
    2674:	7c a1       	ldd	r23, Y+36	; 0x24
    2676:	8d a1       	ldd	r24, Y+37	; 0x25
    2678:	9e a1       	ldd	r25, Y+38	; 0x26
    267a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    267e:	dc 01       	movw	r26, r24
    2680:	cb 01       	movw	r24, r22
    2682:	9a a3       	std	Y+34, r25	; 0x22
    2684:	89 a3       	std	Y+33, r24	; 0x21
    2686:	89 a1       	ldd	r24, Y+33	; 0x21
    2688:	9a a1       	ldd	r25, Y+34	; 0x22
    268a:	9e 8f       	std	Y+30, r25	; 0x1e
    268c:	8d 8f       	std	Y+29, r24	; 0x1d
    268e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2690:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2692:	01 97       	sbiw	r24, 0x01	; 1
    2694:	f1 f7       	brne	.-4      	; 0x2692 <main+0x7ca>
    2696:	9e 8f       	std	Y+30, r25	; 0x1e
    2698:	8d 8f       	std	Y+29, r24	; 0x1d
			}
			break;
		case CHANGE_PASSWORD:

			// Store password in EEPROM
			for (uint8 z = 0; z < PASSWORD_LENGTH; z++) {
    269a:	de 01       	movw	r26, r28
    269c:	a8 5b       	subi	r26, 0xB8	; 184
    269e:	bf 4f       	sbci	r27, 0xFF	; 255
    26a0:	fe 01       	movw	r30, r28
    26a2:	e8 5b       	subi	r30, 0xB8	; 184
    26a4:	ff 4f       	sbci	r31, 0xFF	; 255
    26a6:	80 81       	ld	r24, Z
    26a8:	8f 5f       	subi	r24, 0xFF	; 255
    26aa:	8c 93       	st	X, r24
    26ac:	fe 01       	movw	r30, r28
    26ae:	e8 5b       	subi	r30, 0xB8	; 184
    26b0:	ff 4f       	sbci	r31, 0xFF	; 255
    26b2:	80 81       	ld	r24, Z
    26b4:	85 30       	cpi	r24, 0x05	; 5
    26b6:	08 f4       	brcc	.+2      	; 0x26ba <main+0x7f2>
    26b8:	59 cf       	rjmp	.-334    	; 0x256c <main+0x6a4>
					while (1)
						; // Halt on error
				}
				_delay_ms(10);
			}
			state = IDLE;
    26ba:	10 92 90 00 	sts	0x0090, r1
    26be:	a7 cc       	rjmp	.-1714   	; 0x200e <main+0x146>
			break;
		case DOOR_OPEN:
			tick = 0;
    26c0:	10 92 91 00 	sts	0x0091, r1
			DcMotor_Rotate(&Door, Clockwise, 100);  // Open the door
    26c4:	84 e7       	ldi	r24, 0x74	; 116
    26c6:	90 e0       	ldi	r25, 0x00	; 0
    26c8:	61 e0       	ldi	r22, 0x01	; 1
    26ca:	44 e6       	ldi	r20, 0x64	; 100
    26cc:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <DcMotor_Rotate>
			Timer_start(TIMER1, F_CPU_1024);
    26d0:	81 e0       	ldi	r24, 0x01	; 1
    26d2:	65 e0       	ldi	r22, 0x05	; 5
    26d4:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <Timer_start>
			UART_sendByte(1);
    26d8:	81 e0       	ldi	r24, 0x01	; 1
    26da:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <UART_sendByte>
    26de:	80 e0       	ldi	r24, 0x00	; 0
    26e0:	90 e0       	ldi	r25, 0x00	; 0
    26e2:	a8 e4       	ldi	r26, 0x48	; 72
    26e4:	b2 e4       	ldi	r27, 0x42	; 66
    26e6:	89 8f       	std	Y+25, r24	; 0x19
    26e8:	9a 8f       	std	Y+26, r25	; 0x1a
    26ea:	ab 8f       	std	Y+27, r26	; 0x1b
    26ec:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26ee:	69 8d       	ldd	r22, Y+25	; 0x19
    26f0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    26f2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    26f4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    26f6:	20 e0       	ldi	r18, 0x00	; 0
    26f8:	30 e0       	ldi	r19, 0x00	; 0
    26fa:	4a ef       	ldi	r20, 0xFA	; 250
    26fc:	54 e4       	ldi	r21, 0x44	; 68
    26fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2702:	dc 01       	movw	r26, r24
    2704:	cb 01       	movw	r24, r22
    2706:	8d 8b       	std	Y+21, r24	; 0x15
    2708:	9e 8b       	std	Y+22, r25	; 0x16
    270a:	af 8b       	std	Y+23, r26	; 0x17
    270c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    270e:	6d 89       	ldd	r22, Y+21	; 0x15
    2710:	7e 89       	ldd	r23, Y+22	; 0x16
    2712:	8f 89       	ldd	r24, Y+23	; 0x17
    2714:	98 8d       	ldd	r25, Y+24	; 0x18
    2716:	20 e0       	ldi	r18, 0x00	; 0
    2718:	30 e0       	ldi	r19, 0x00	; 0
    271a:	40 e8       	ldi	r20, 0x80	; 128
    271c:	5f e3       	ldi	r21, 0x3F	; 63
    271e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2722:	88 23       	and	r24, r24
    2724:	2c f4       	brge	.+10     	; 0x2730 <main+0x868>
		__ticks = 1;
    2726:	81 e0       	ldi	r24, 0x01	; 1
    2728:	90 e0       	ldi	r25, 0x00	; 0
    272a:	9c 8b       	std	Y+20, r25	; 0x14
    272c:	8b 8b       	std	Y+19, r24	; 0x13
    272e:	3f c0       	rjmp	.+126    	; 0x27ae <main+0x8e6>
	else if (__tmp > 65535)
    2730:	6d 89       	ldd	r22, Y+21	; 0x15
    2732:	7e 89       	ldd	r23, Y+22	; 0x16
    2734:	8f 89       	ldd	r24, Y+23	; 0x17
    2736:	98 8d       	ldd	r25, Y+24	; 0x18
    2738:	20 e0       	ldi	r18, 0x00	; 0
    273a:	3f ef       	ldi	r19, 0xFF	; 255
    273c:	4f e7       	ldi	r20, 0x7F	; 127
    273e:	57 e4       	ldi	r21, 0x47	; 71
    2740:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2744:	18 16       	cp	r1, r24
    2746:	4c f5       	brge	.+82     	; 0x279a <main+0x8d2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2748:	69 8d       	ldd	r22, Y+25	; 0x19
    274a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    274c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    274e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2750:	20 e0       	ldi	r18, 0x00	; 0
    2752:	30 e0       	ldi	r19, 0x00	; 0
    2754:	40 e2       	ldi	r20, 0x20	; 32
    2756:	51 e4       	ldi	r21, 0x41	; 65
    2758:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    275c:	dc 01       	movw	r26, r24
    275e:	cb 01       	movw	r24, r22
    2760:	bc 01       	movw	r22, r24
    2762:	cd 01       	movw	r24, r26
    2764:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2768:	dc 01       	movw	r26, r24
    276a:	cb 01       	movw	r24, r22
    276c:	9c 8b       	std	Y+20, r25	; 0x14
    276e:	8b 8b       	std	Y+19, r24	; 0x13
    2770:	0f c0       	rjmp	.+30     	; 0x2790 <main+0x8c8>
    2772:	88 ec       	ldi	r24, 0xC8	; 200
    2774:	90 e0       	ldi	r25, 0x00	; 0
    2776:	9a 8b       	std	Y+18, r25	; 0x12
    2778:	89 8b       	std	Y+17, r24	; 0x11
    277a:	89 89       	ldd	r24, Y+17	; 0x11
    277c:	9a 89       	ldd	r25, Y+18	; 0x12
    277e:	01 97       	sbiw	r24, 0x01	; 1
    2780:	f1 f7       	brne	.-4      	; 0x277e <main+0x8b6>
    2782:	9a 8b       	std	Y+18, r25	; 0x12
    2784:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2786:	8b 89       	ldd	r24, Y+19	; 0x13
    2788:	9c 89       	ldd	r25, Y+20	; 0x14
    278a:	01 97       	sbiw	r24, 0x01	; 1
    278c:	9c 8b       	std	Y+20, r25	; 0x14
    278e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2790:	8b 89       	ldd	r24, Y+19	; 0x13
    2792:	9c 89       	ldd	r25, Y+20	; 0x14
    2794:	00 97       	sbiw	r24, 0x00	; 0
    2796:	69 f7       	brne	.-38     	; 0x2772 <main+0x8aa>
    2798:	14 c0       	rjmp	.+40     	; 0x27c2 <main+0x8fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    279a:	6d 89       	ldd	r22, Y+21	; 0x15
    279c:	7e 89       	ldd	r23, Y+22	; 0x16
    279e:	8f 89       	ldd	r24, Y+23	; 0x17
    27a0:	98 8d       	ldd	r25, Y+24	; 0x18
    27a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27a6:	dc 01       	movw	r26, r24
    27a8:	cb 01       	movw	r24, r22
    27aa:	9c 8b       	std	Y+20, r25	; 0x14
    27ac:	8b 8b       	std	Y+19, r24	; 0x13
    27ae:	8b 89       	ldd	r24, Y+19	; 0x13
    27b0:	9c 89       	ldd	r25, Y+20	; 0x14
    27b2:	98 8b       	std	Y+16, r25	; 0x10
    27b4:	8f 87       	std	Y+15, r24	; 0x0f
    27b6:	8f 85       	ldd	r24, Y+15	; 0x0f
    27b8:	98 89       	ldd	r25, Y+16	; 0x10
    27ba:	01 97       	sbiw	r24, 0x01	; 1
    27bc:	f1 f7       	brne	.-4      	; 0x27ba <main+0x8f2>
    27be:	98 8b       	std	Y+16, r25	; 0x10
    27c0:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(50);
			tick = 0;
    27c2:	10 92 91 00 	sts	0x0091, r1
			while (tick <= DOOR_OPEN_TIME)
    27c6:	80 91 91 00 	lds	r24, 0x0091
    27ca:	80 31       	cpi	r24, 0x10	; 16
    27cc:	e0 f3       	brcs	.-8      	; 0x27c6 <main+0x8fe>
				;  // Stop motor after defined time
			DcMotor_Rotate(&Door, stop, 0);
    27ce:	84 e7       	ldi	r24, 0x74	; 116
    27d0:	90 e0       	ldi	r25, 0x00	; 0
    27d2:	60 e0       	ldi	r22, 0x00	; 0
    27d4:	40 e0       	ldi	r20, 0x00	; 0
    27d6:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <DcMotor_Rotate>
			// Wait for PIR sensor to detect motion
			while (PIR_getState() == 1) {
    27da:	0e 94 b5 0e 	call	0x1d6a	; 0x1d6a <PIR_getState>
    27de:	81 30       	cpi	r24, 0x01	; 1
    27e0:	e1 f3       	breq	.-8      	; 0x27da <main+0x912>
				// Wait until no motion is detected
			}
			UART_sendByte(0);
    27e2:	80 e0       	ldi	r24, 0x00	; 0
    27e4:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <UART_sendByte>
    27e8:	80 e0       	ldi	r24, 0x00	; 0
    27ea:	90 e0       	ldi	r25, 0x00	; 0
    27ec:	a8 e4       	ldi	r26, 0x48	; 72
    27ee:	b2 e4       	ldi	r27, 0x42	; 66
    27f0:	8b 87       	std	Y+11, r24	; 0x0b
    27f2:	9c 87       	std	Y+12, r25	; 0x0c
    27f4:	ad 87       	std	Y+13, r26	; 0x0d
    27f6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27f8:	6b 85       	ldd	r22, Y+11	; 0x0b
    27fa:	7c 85       	ldd	r23, Y+12	; 0x0c
    27fc:	8d 85       	ldd	r24, Y+13	; 0x0d
    27fe:	9e 85       	ldd	r25, Y+14	; 0x0e
    2800:	20 e0       	ldi	r18, 0x00	; 0
    2802:	30 e0       	ldi	r19, 0x00	; 0
    2804:	4a ef       	ldi	r20, 0xFA	; 250
    2806:	54 e4       	ldi	r21, 0x44	; 68
    2808:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    280c:	dc 01       	movw	r26, r24
    280e:	cb 01       	movw	r24, r22
    2810:	8f 83       	std	Y+7, r24	; 0x07
    2812:	98 87       	std	Y+8, r25	; 0x08
    2814:	a9 87       	std	Y+9, r26	; 0x09
    2816:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2818:	6f 81       	ldd	r22, Y+7	; 0x07
    281a:	78 85       	ldd	r23, Y+8	; 0x08
    281c:	89 85       	ldd	r24, Y+9	; 0x09
    281e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2820:	20 e0       	ldi	r18, 0x00	; 0
    2822:	30 e0       	ldi	r19, 0x00	; 0
    2824:	40 e8       	ldi	r20, 0x80	; 128
    2826:	5f e3       	ldi	r21, 0x3F	; 63
    2828:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    282c:	88 23       	and	r24, r24
    282e:	2c f4       	brge	.+10     	; 0x283a <main+0x972>
		__ticks = 1;
    2830:	81 e0       	ldi	r24, 0x01	; 1
    2832:	90 e0       	ldi	r25, 0x00	; 0
    2834:	9e 83       	std	Y+6, r25	; 0x06
    2836:	8d 83       	std	Y+5, r24	; 0x05
    2838:	3f c0       	rjmp	.+126    	; 0x28b8 <main+0x9f0>
	else if (__tmp > 65535)
    283a:	6f 81       	ldd	r22, Y+7	; 0x07
    283c:	78 85       	ldd	r23, Y+8	; 0x08
    283e:	89 85       	ldd	r24, Y+9	; 0x09
    2840:	9a 85       	ldd	r25, Y+10	; 0x0a
    2842:	20 e0       	ldi	r18, 0x00	; 0
    2844:	3f ef       	ldi	r19, 0xFF	; 255
    2846:	4f e7       	ldi	r20, 0x7F	; 127
    2848:	57 e4       	ldi	r21, 0x47	; 71
    284a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    284e:	18 16       	cp	r1, r24
    2850:	4c f5       	brge	.+82     	; 0x28a4 <main+0x9dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2852:	6b 85       	ldd	r22, Y+11	; 0x0b
    2854:	7c 85       	ldd	r23, Y+12	; 0x0c
    2856:	8d 85       	ldd	r24, Y+13	; 0x0d
    2858:	9e 85       	ldd	r25, Y+14	; 0x0e
    285a:	20 e0       	ldi	r18, 0x00	; 0
    285c:	30 e0       	ldi	r19, 0x00	; 0
    285e:	40 e2       	ldi	r20, 0x20	; 32
    2860:	51 e4       	ldi	r21, 0x41	; 65
    2862:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2866:	dc 01       	movw	r26, r24
    2868:	cb 01       	movw	r24, r22
    286a:	bc 01       	movw	r22, r24
    286c:	cd 01       	movw	r24, r26
    286e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2872:	dc 01       	movw	r26, r24
    2874:	cb 01       	movw	r24, r22
    2876:	9e 83       	std	Y+6, r25	; 0x06
    2878:	8d 83       	std	Y+5, r24	; 0x05
    287a:	0f c0       	rjmp	.+30     	; 0x289a <main+0x9d2>
    287c:	88 ec       	ldi	r24, 0xC8	; 200
    287e:	90 e0       	ldi	r25, 0x00	; 0
    2880:	9c 83       	std	Y+4, r25	; 0x04
    2882:	8b 83       	std	Y+3, r24	; 0x03
    2884:	8b 81       	ldd	r24, Y+3	; 0x03
    2886:	9c 81       	ldd	r25, Y+4	; 0x04
    2888:	01 97       	sbiw	r24, 0x01	; 1
    288a:	f1 f7       	brne	.-4      	; 0x2888 <main+0x9c0>
    288c:	9c 83       	std	Y+4, r25	; 0x04
    288e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2890:	8d 81       	ldd	r24, Y+5	; 0x05
    2892:	9e 81       	ldd	r25, Y+6	; 0x06
    2894:	01 97       	sbiw	r24, 0x01	; 1
    2896:	9e 83       	std	Y+6, r25	; 0x06
    2898:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    289a:	8d 81       	ldd	r24, Y+5	; 0x05
    289c:	9e 81       	ldd	r25, Y+6	; 0x06
    289e:	00 97       	sbiw	r24, 0x00	; 0
    28a0:	69 f7       	brne	.-38     	; 0x287c <main+0x9b4>
    28a2:	14 c0       	rjmp	.+40     	; 0x28cc <main+0xa04>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28a4:	6f 81       	ldd	r22, Y+7	; 0x07
    28a6:	78 85       	ldd	r23, Y+8	; 0x08
    28a8:	89 85       	ldd	r24, Y+9	; 0x09
    28aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    28ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28b0:	dc 01       	movw	r26, r24
    28b2:	cb 01       	movw	r24, r22
    28b4:	9e 83       	std	Y+6, r25	; 0x06
    28b6:	8d 83       	std	Y+5, r24	; 0x05
    28b8:	8d 81       	ldd	r24, Y+5	; 0x05
    28ba:	9e 81       	ldd	r25, Y+6	; 0x06
    28bc:	9a 83       	std	Y+2, r25	; 0x02
    28be:	89 83       	std	Y+1, r24	; 0x01
    28c0:	89 81       	ldd	r24, Y+1	; 0x01
    28c2:	9a 81       	ldd	r25, Y+2	; 0x02
    28c4:	01 97       	sbiw	r24, 0x01	; 1
    28c6:	f1 f7       	brne	.-4      	; 0x28c4 <main+0x9fc>
    28c8:	9a 83       	std	Y+2, r25	; 0x02
    28ca:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(50);
			tick = 0;  // Reset tick for door close timing
    28cc:	10 92 91 00 	sts	0x0091, r1
			state = DOOR_CLOSE;
    28d0:	85 e0       	ldi	r24, 0x05	; 5
    28d2:	80 93 90 00 	sts	0x0090, r24
    28d6:	9b cb       	rjmp	.-2250   	; 0x200e <main+0x146>
			break;

		case DOOR_CLOSE:
			DcMotor_Rotate(&Door, Anti_clockwise, 100);  // Close the door
    28d8:	84 e7       	ldi	r24, 0x74	; 116
    28da:	90 e0       	ldi	r25, 0x00	; 0
    28dc:	62 e0       	ldi	r22, 0x02	; 2
    28de:	44 e6       	ldi	r20, 0x64	; 100
    28e0:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <DcMotor_Rotate>
			while (tick <= DOOR_CLOSE_TIME)
    28e4:	80 91 91 00 	lds	r24, 0x0091
    28e8:	80 31       	cpi	r24, 0x10	; 16
    28ea:	e0 f3       	brcs	.-8      	; 0x28e4 <main+0xa1c>
				;  // Stop motor after defined time
			DcMotor_Rotate(&Door, stop, 0);  // Stop motor
    28ec:	84 e7       	ldi	r24, 0x74	; 116
    28ee:	90 e0       	ldi	r25, 0x00	; 0
    28f0:	60 e0       	ldi	r22, 0x00	; 0
    28f2:	40 e0       	ldi	r20, 0x00	; 0
    28f4:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <DcMotor_Rotate>
			tick = 0;
    28f8:	10 92 91 00 	sts	0x0091, r1
			Timer_stop(TIMER1);
    28fc:	81 e0       	ldi	r24, 0x01	; 1
    28fe:	0e 94 96 07 	call	0xf2c	; 0xf2c <Timer_stop>
			state = ENTER_PASSWORD;
    2902:	82 e0       	ldi	r24, 0x02	; 2
    2904:	80 93 90 00 	sts	0x0090, r24
    2908:	82 cb       	rjmp	.-2300   	; 0x200e <main+0x146>
			break;

		case LOCKOUT:
			Buzzer_on();
    290a:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <Buzzer_on>
			tick = 0;
    290e:	10 92 91 00 	sts	0x0091, r1
			Timer_start(TIMER1, F_CPU_1024);
    2912:	81 e0       	ldi	r24, 0x01	; 1
    2914:	65 e0       	ldi	r22, 0x05	; 5
    2916:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <Timer_start>
			while (tick <= LOCKOUT_TIME)
    291a:	80 91 91 00 	lds	r24, 0x0091
    291e:	8d 33       	cpi	r24, 0x3D	; 61
    2920:	e0 f3       	brcs	.-8      	; 0x291a <main+0xa52>
				; // Wait for lockout duration
			Buzzer_off();
    2922:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <Buzzer_off>
			Timer_stop(TIMER1);
    2926:	81 e0       	ldi	r24, 0x01	; 1
    2928:	0e 94 96 07 	call	0xf2c	; 0xf2c <Timer_stop>
			tick = 0;
    292c:	10 92 91 00 	sts	0x0091, r1
			state = ENTER_PASSWORD;
    2930:	82 e0       	ldi	r24, 0x02	; 2
    2932:	80 93 90 00 	sts	0x0090, r24
    2936:	6b cb       	rjmp	.-2346   	; 0x200e <main+0x146>

00002938 <timer_callback>:
			break;
		}
	}
}

void timer_callback() {
    2938:	df 93       	push	r29
    293a:	cf 93       	push	r28
    293c:	cd b7       	in	r28, 0x3d	; 61
    293e:	de b7       	in	r29, 0x3e	; 62
	tick++;
    2940:	80 91 91 00 	lds	r24, 0x0091
    2944:	8f 5f       	subi	r24, 0xFF	; 255
    2946:	80 93 91 00 	sts	0x0091, r24
}
    294a:	cf 91       	pop	r28
    294c:	df 91       	pop	r29
    294e:	08 95       	ret

00002950 <__udivmodhi4>:
    2950:	aa 1b       	sub	r26, r26
    2952:	bb 1b       	sub	r27, r27
    2954:	51 e1       	ldi	r21, 0x11	; 17
    2956:	07 c0       	rjmp	.+14     	; 0x2966 <__udivmodhi4_ep>

00002958 <__udivmodhi4_loop>:
    2958:	aa 1f       	adc	r26, r26
    295a:	bb 1f       	adc	r27, r27
    295c:	a6 17       	cp	r26, r22
    295e:	b7 07       	cpc	r27, r23
    2960:	10 f0       	brcs	.+4      	; 0x2966 <__udivmodhi4_ep>
    2962:	a6 1b       	sub	r26, r22
    2964:	b7 0b       	sbc	r27, r23

00002966 <__udivmodhi4_ep>:
    2966:	88 1f       	adc	r24, r24
    2968:	99 1f       	adc	r25, r25
    296a:	5a 95       	dec	r21
    296c:	a9 f7       	brne	.-22     	; 0x2958 <__udivmodhi4_loop>
    296e:	80 95       	com	r24
    2970:	90 95       	com	r25
    2972:	bc 01       	movw	r22, r24
    2974:	cd 01       	movw	r24, r26
    2976:	08 95       	ret

00002978 <__udivmodsi4>:
    2978:	a1 e2       	ldi	r26, 0x21	; 33
    297a:	1a 2e       	mov	r1, r26
    297c:	aa 1b       	sub	r26, r26
    297e:	bb 1b       	sub	r27, r27
    2980:	fd 01       	movw	r30, r26
    2982:	0d c0       	rjmp	.+26     	; 0x299e <__udivmodsi4_ep>

00002984 <__udivmodsi4_loop>:
    2984:	aa 1f       	adc	r26, r26
    2986:	bb 1f       	adc	r27, r27
    2988:	ee 1f       	adc	r30, r30
    298a:	ff 1f       	adc	r31, r31
    298c:	a2 17       	cp	r26, r18
    298e:	b3 07       	cpc	r27, r19
    2990:	e4 07       	cpc	r30, r20
    2992:	f5 07       	cpc	r31, r21
    2994:	20 f0       	brcs	.+8      	; 0x299e <__udivmodsi4_ep>
    2996:	a2 1b       	sub	r26, r18
    2998:	b3 0b       	sbc	r27, r19
    299a:	e4 0b       	sbc	r30, r20
    299c:	f5 0b       	sbc	r31, r21

0000299e <__udivmodsi4_ep>:
    299e:	66 1f       	adc	r22, r22
    29a0:	77 1f       	adc	r23, r23
    29a2:	88 1f       	adc	r24, r24
    29a4:	99 1f       	adc	r25, r25
    29a6:	1a 94       	dec	r1
    29a8:	69 f7       	brne	.-38     	; 0x2984 <__udivmodsi4_loop>
    29aa:	60 95       	com	r22
    29ac:	70 95       	com	r23
    29ae:	80 95       	com	r24
    29b0:	90 95       	com	r25
    29b2:	9b 01       	movw	r18, r22
    29b4:	ac 01       	movw	r20, r24
    29b6:	bd 01       	movw	r22, r26
    29b8:	cf 01       	movw	r24, r30
    29ba:	08 95       	ret

000029bc <__prologue_saves__>:
    29bc:	2f 92       	push	r2
    29be:	3f 92       	push	r3
    29c0:	4f 92       	push	r4
    29c2:	5f 92       	push	r5
    29c4:	6f 92       	push	r6
    29c6:	7f 92       	push	r7
    29c8:	8f 92       	push	r8
    29ca:	9f 92       	push	r9
    29cc:	af 92       	push	r10
    29ce:	bf 92       	push	r11
    29d0:	cf 92       	push	r12
    29d2:	df 92       	push	r13
    29d4:	ef 92       	push	r14
    29d6:	ff 92       	push	r15
    29d8:	0f 93       	push	r16
    29da:	1f 93       	push	r17
    29dc:	cf 93       	push	r28
    29de:	df 93       	push	r29
    29e0:	cd b7       	in	r28, 0x3d	; 61
    29e2:	de b7       	in	r29, 0x3e	; 62
    29e4:	ca 1b       	sub	r28, r26
    29e6:	db 0b       	sbc	r29, r27
    29e8:	0f b6       	in	r0, 0x3f	; 63
    29ea:	f8 94       	cli
    29ec:	de bf       	out	0x3e, r29	; 62
    29ee:	0f be       	out	0x3f, r0	; 63
    29f0:	cd bf       	out	0x3d, r28	; 61
    29f2:	09 94       	ijmp

000029f4 <__epilogue_restores__>:
    29f4:	2a 88       	ldd	r2, Y+18	; 0x12
    29f6:	39 88       	ldd	r3, Y+17	; 0x11
    29f8:	48 88       	ldd	r4, Y+16	; 0x10
    29fa:	5f 84       	ldd	r5, Y+15	; 0x0f
    29fc:	6e 84       	ldd	r6, Y+14	; 0x0e
    29fe:	7d 84       	ldd	r7, Y+13	; 0x0d
    2a00:	8c 84       	ldd	r8, Y+12	; 0x0c
    2a02:	9b 84       	ldd	r9, Y+11	; 0x0b
    2a04:	aa 84       	ldd	r10, Y+10	; 0x0a
    2a06:	b9 84       	ldd	r11, Y+9	; 0x09
    2a08:	c8 84       	ldd	r12, Y+8	; 0x08
    2a0a:	df 80       	ldd	r13, Y+7	; 0x07
    2a0c:	ee 80       	ldd	r14, Y+6	; 0x06
    2a0e:	fd 80       	ldd	r15, Y+5	; 0x05
    2a10:	0c 81       	ldd	r16, Y+4	; 0x04
    2a12:	1b 81       	ldd	r17, Y+3	; 0x03
    2a14:	aa 81       	ldd	r26, Y+2	; 0x02
    2a16:	b9 81       	ldd	r27, Y+1	; 0x01
    2a18:	ce 0f       	add	r28, r30
    2a1a:	d1 1d       	adc	r29, r1
    2a1c:	0f b6       	in	r0, 0x3f	; 63
    2a1e:	f8 94       	cli
    2a20:	de bf       	out	0x3e, r29	; 62
    2a22:	0f be       	out	0x3f, r0	; 63
    2a24:	cd bf       	out	0x3d, r28	; 61
    2a26:	ed 01       	movw	r28, r26
    2a28:	08 95       	ret

00002a2a <_exit>:
    2a2a:	f8 94       	cli

00002a2c <__stop_program>:
    2a2c:	ff cf       	rjmp	.-2      	; 0x2a2c <__stop_program>
