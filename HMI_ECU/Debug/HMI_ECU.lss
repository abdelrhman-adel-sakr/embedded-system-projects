
HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003cd4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000dc  00800060  00003cd4  00003d68  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000009  0080013c  0080013c  00003e44  2**0
                  ALLOC
  3 .stab         0000351c  00000000  00000000  00003e44  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000152e  00000000  00000000  00007360  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000888e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000089ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00008b3e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000a787  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000b672  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000c420  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000c580  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000c80d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000cfdb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 5b 08 	jmp	0x10b6	; 0x10b6 <__vector_4>
      14:	0c 94 28 08 	jmp	0x1050	; 0x1050 <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 f5 07 	jmp	0xfea	; 0xfea <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 c2 07 	jmp	0xf84	; 0xf84 <__vector_9>
      28:	0c 94 8f 07 	jmp	0xf1e	; 0xf1e <__vector_10>
      2c:	0c 94 5c 07 	jmp	0xeb8	; 0xeb8 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 ed       	ldi	r30, 0xD4	; 212
      68:	fc e3       	ldi	r31, 0x3C	; 60
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 33       	cpi	r26, 0x3C	; 60
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ac e3       	ldi	r26, 0x3C	; 60
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a5 34       	cpi	r26, 0x45	; 69
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 9a 13 	call	0x2734	; 0x2734 <main>
      8a:	0c 94 68 1e 	jmp	0x3cd0	; 0x3cd0 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 ec 1d 	jmp	0x3bd8	; 0x3bd8 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ae e1       	ldi	r26, 0x1E	; 30
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 08 1e 	jmp	0x3c10	; 0x3c10 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 f8 1d 	jmp	0x3bf0	; 0x3bf0 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 14 1e 	jmp	0x3c28	; 0x3c28 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 f8 1d 	jmp	0x3bf0	; 0x3bf0 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 14 1e 	jmp	0x3c28	; 0x3c28 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 ec 1d 	jmp	0x3bd8	; 0x3bd8 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8e e1       	ldi	r24, 0x1E	; 30
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 08 1e 	jmp	0x3c10	; 0x3c10 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 f8 1d 	jmp	0x3bf0	; 0x3bf0 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 14 1e 	jmp	0x3c28	; 0x3c28 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 f8 1d 	jmp	0x3bf0	; 0x3bf0 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 14 1e 	jmp	0x3c28	; 0x3c28 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 f8 1d 	jmp	0x3bf0	; 0x3bf0 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 14 1e 	jmp	0x3c28	; 0x3c28 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 fc 1d 	jmp	0x3bf8	; 0x3bf8 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 18 1e 	jmp	0x3c30	; 0x3c30 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <Timer_init>:
Timer_ConfigType Timer_cofig={.timer_InitialValue=0,.timer_compare_MatchValue=250,.timer_ID=TIMER0,.timer_clock=F_CPU_8,.timer_mode=COMPARE_MODE};
static void (*g_Timer0CallBack)(void) = NULL_PTR;
static void (*g_Timer1CallBack)(void) = NULL_PTR;
static void (*g_Timer2CallBack)(void) = NULL_PTR;

void Timer_init(const Timer_ConfigType *Config_Ptr) {
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <Timer_init+0x6>
     b4c:	00 d0       	rcall	.+0      	; 0xb4e <Timer_init+0x8>
     b4e:	cd b7       	in	r28, 0x3d	; 61
     b50:	de b7       	in	r29, 0x3e	; 62
     b52:	9a 83       	std	Y+2, r25	; 0x02
     b54:	89 83       	std	Y+1, r24	; 0x01
	SREG|=(1<<7);
     b56:	af e5       	ldi	r26, 0x5F	; 95
     b58:	b0 e0       	ldi	r27, 0x00	; 0
     b5a:	ef e5       	ldi	r30, 0x5F	; 95
     b5c:	f0 e0       	ldi	r31, 0x00	; 0
     b5e:	80 81       	ld	r24, Z
     b60:	80 68       	ori	r24, 0x80	; 128
     b62:	8c 93       	st	X, r24
    switch (Config_Ptr->timer_ID) {
     b64:	e9 81       	ldd	r30, Y+1	; 0x01
     b66:	fa 81       	ldd	r31, Y+2	; 0x02
     b68:	84 81       	ldd	r24, Z+4	; 0x04
     b6a:	28 2f       	mov	r18, r24
     b6c:	30 e0       	ldi	r19, 0x00	; 0
     b6e:	3c 83       	std	Y+4, r19	; 0x04
     b70:	2b 83       	std	Y+3, r18	; 0x03
     b72:	8b 81       	ldd	r24, Y+3	; 0x03
     b74:	9c 81       	ldd	r25, Y+4	; 0x04
     b76:	81 30       	cpi	r24, 0x01	; 1
     b78:	91 05       	cpc	r25, r1
     b7a:	e1 f1       	breq	.+120    	; 0xbf4 <Timer_init+0xae>
     b7c:	2b 81       	ldd	r18, Y+3	; 0x03
     b7e:	3c 81       	ldd	r19, Y+4	; 0x04
     b80:	22 30       	cpi	r18, 0x02	; 2
     b82:	31 05       	cpc	r19, r1
     b84:	09 f4       	brne	.+2      	; 0xb88 <Timer_init+0x42>
     b86:	72 c0       	rjmp	.+228    	; 0xc6c <Timer_init+0x126>
     b88:	8b 81       	ldd	r24, Y+3	; 0x03
     b8a:	9c 81       	ldd	r25, Y+4	; 0x04
     b8c:	00 97       	sbiw	r24, 0x00	; 0
     b8e:	09 f0       	breq	.+2      	; 0xb92 <Timer_init+0x4c>
     b90:	9d c0       	rjmp	.+314    	; 0xccc <Timer_init+0x186>
        case TIMER0:
            TCNT0 = Config_Ptr->timer_InitialValue;
     b92:	a2 e5       	ldi	r26, 0x52	; 82
     b94:	b0 e0       	ldi	r27, 0x00	; 0
     b96:	e9 81       	ldd	r30, Y+1	; 0x01
     b98:	fa 81       	ldd	r31, Y+2	; 0x02
     b9a:	80 81       	ld	r24, Z
     b9c:	91 81       	ldd	r25, Z+1	; 0x01
     b9e:	8c 93       	st	X, r24
            if (Config_Ptr->timer_mode == NORMAL_MODE) {
     ba0:	e9 81       	ldd	r30, Y+1	; 0x01
     ba2:	fa 81       	ldd	r31, Y+2	; 0x02
     ba4:	86 81       	ldd	r24, Z+6	; 0x06
     ba6:	88 23       	and	r24, r24
     ba8:	79 f4       	brne	.+30     	; 0xbc8 <Timer_init+0x82>
                TCCR0 = (1 << FOC0) | Config_Ptr->timer_clock;
     baa:	a3 e5       	ldi	r26, 0x53	; 83
     bac:	b0 e0       	ldi	r27, 0x00	; 0
     bae:	e9 81       	ldd	r30, Y+1	; 0x01
     bb0:	fa 81       	ldd	r31, Y+2	; 0x02
     bb2:	85 81       	ldd	r24, Z+5	; 0x05
     bb4:	80 68       	ori	r24, 0x80	; 128
     bb6:	8c 93       	st	X, r24
                TIMSK |= (1 << TOIE0); // Enable overflow interrupt
     bb8:	a9 e5       	ldi	r26, 0x59	; 89
     bba:	b0 e0       	ldi	r27, 0x00	; 0
     bbc:	e9 e5       	ldi	r30, 0x59	; 89
     bbe:	f0 e0       	ldi	r31, 0x00	; 0
     bc0:	80 81       	ld	r24, Z
     bc2:	81 60       	ori	r24, 0x01	; 1
     bc4:	8c 93       	st	X, r24
     bc6:	82 c0       	rjmp	.+260    	; 0xccc <Timer_init+0x186>
            } else {
                OCR0 = Config_Ptr->timer_compare_MatchValue;
     bc8:	ac e5       	ldi	r26, 0x5C	; 92
     bca:	b0 e0       	ldi	r27, 0x00	; 0
     bcc:	e9 81       	ldd	r30, Y+1	; 0x01
     bce:	fa 81       	ldd	r31, Y+2	; 0x02
     bd0:	82 81       	ldd	r24, Z+2	; 0x02
     bd2:	93 81       	ldd	r25, Z+3	; 0x03
     bd4:	8c 93       	st	X, r24
                TCCR0 = (1 << WGM01) | (1 << FOC0) | Config_Ptr->timer_clock;
     bd6:	a3 e5       	ldi	r26, 0x53	; 83
     bd8:	b0 e0       	ldi	r27, 0x00	; 0
     bda:	e9 81       	ldd	r30, Y+1	; 0x01
     bdc:	fa 81       	ldd	r31, Y+2	; 0x02
     bde:	85 81       	ldd	r24, Z+5	; 0x05
     be0:	88 68       	ori	r24, 0x88	; 136
     be2:	8c 93       	st	X, r24
                TIMSK |= (1 << OCIE0); // Enable compare match interrupt
     be4:	a9 e5       	ldi	r26, 0x59	; 89
     be6:	b0 e0       	ldi	r27, 0x00	; 0
     be8:	e9 e5       	ldi	r30, 0x59	; 89
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	80 81       	ld	r24, Z
     bee:	82 60       	ori	r24, 0x02	; 2
     bf0:	8c 93       	st	X, r24
     bf2:	6c c0       	rjmp	.+216    	; 0xccc <Timer_init+0x186>
            }
            break;

        case TIMER1:
            TCNT1 = Config_Ptr->timer_InitialValue;
     bf4:	ac e4       	ldi	r26, 0x4C	; 76
     bf6:	b0 e0       	ldi	r27, 0x00	; 0
     bf8:	e9 81       	ldd	r30, Y+1	; 0x01
     bfa:	fa 81       	ldd	r31, Y+2	; 0x02
     bfc:	80 81       	ld	r24, Z
     bfe:	91 81       	ldd	r25, Z+1	; 0x01
     c00:	11 96       	adiw	r26, 0x01	; 1
     c02:	9c 93       	st	X, r25
     c04:	8e 93       	st	-X, r24
            if (Config_Ptr->timer_mode == NORMAL_MODE) {
     c06:	e9 81       	ldd	r30, Y+1	; 0x01
     c08:	fa 81       	ldd	r31, Y+2	; 0x02
     c0a:	86 81       	ldd	r24, Z+6	; 0x06
     c0c:	88 23       	and	r24, r24
     c0e:	91 f4       	brne	.+36     	; 0xc34 <Timer_init+0xee>
                TCCR1A = (1 << FOC1A) | (1 << FOC1B);
     c10:	ef e4       	ldi	r30, 0x4F	; 79
     c12:	f0 e0       	ldi	r31, 0x00	; 0
     c14:	8c e0       	ldi	r24, 0x0C	; 12
     c16:	80 83       	st	Z, r24
                TCCR1B = Config_Ptr->timer_clock;
     c18:	ae e4       	ldi	r26, 0x4E	; 78
     c1a:	b0 e0       	ldi	r27, 0x00	; 0
     c1c:	e9 81       	ldd	r30, Y+1	; 0x01
     c1e:	fa 81       	ldd	r31, Y+2	; 0x02
     c20:	85 81       	ldd	r24, Z+5	; 0x05
     c22:	8c 93       	st	X, r24
                TIMSK |= (1 << TOIE1); // Enable overflow interrupt
     c24:	a9 e5       	ldi	r26, 0x59	; 89
     c26:	b0 e0       	ldi	r27, 0x00	; 0
     c28:	e9 e5       	ldi	r30, 0x59	; 89
     c2a:	f0 e0       	ldi	r31, 0x00	; 0
     c2c:	80 81       	ld	r24, Z
     c2e:	84 60       	ori	r24, 0x04	; 4
     c30:	8c 93       	st	X, r24
     c32:	4c c0       	rjmp	.+152    	; 0xccc <Timer_init+0x186>
            } else {
                OCR1A = Config_Ptr->timer_compare_MatchValue;
     c34:	aa e4       	ldi	r26, 0x4A	; 74
     c36:	b0 e0       	ldi	r27, 0x00	; 0
     c38:	e9 81       	ldd	r30, Y+1	; 0x01
     c3a:	fa 81       	ldd	r31, Y+2	; 0x02
     c3c:	82 81       	ldd	r24, Z+2	; 0x02
     c3e:	93 81       	ldd	r25, Z+3	; 0x03
     c40:	11 96       	adiw	r26, 0x01	; 1
     c42:	9c 93       	st	X, r25
     c44:	8e 93       	st	-X, r24
                TCCR1A = (1 << FOC1A) | (1 << FOC1B);
     c46:	ef e4       	ldi	r30, 0x4F	; 79
     c48:	f0 e0       	ldi	r31, 0x00	; 0
     c4a:	8c e0       	ldi	r24, 0x0C	; 12
     c4c:	80 83       	st	Z, r24
                TCCR1B = (1 << WGM12) | Config_Ptr->timer_clock;
     c4e:	ae e4       	ldi	r26, 0x4E	; 78
     c50:	b0 e0       	ldi	r27, 0x00	; 0
     c52:	e9 81       	ldd	r30, Y+1	; 0x01
     c54:	fa 81       	ldd	r31, Y+2	; 0x02
     c56:	85 81       	ldd	r24, Z+5	; 0x05
     c58:	88 60       	ori	r24, 0x08	; 8
     c5a:	8c 93       	st	X, r24
                TIMSK |= (1 << OCIE1A); // Enable compare match interrupt
     c5c:	a9 e5       	ldi	r26, 0x59	; 89
     c5e:	b0 e0       	ldi	r27, 0x00	; 0
     c60:	e9 e5       	ldi	r30, 0x59	; 89
     c62:	f0 e0       	ldi	r31, 0x00	; 0
     c64:	80 81       	ld	r24, Z
     c66:	80 61       	ori	r24, 0x10	; 16
     c68:	8c 93       	st	X, r24
     c6a:	30 c0       	rjmp	.+96     	; 0xccc <Timer_init+0x186>
            }
            break;

        case TIMER2:
            TCNT2 = Config_Ptr->timer_InitialValue;
     c6c:	a4 e4       	ldi	r26, 0x44	; 68
     c6e:	b0 e0       	ldi	r27, 0x00	; 0
     c70:	e9 81       	ldd	r30, Y+1	; 0x01
     c72:	fa 81       	ldd	r31, Y+2	; 0x02
     c74:	80 81       	ld	r24, Z
     c76:	91 81       	ldd	r25, Z+1	; 0x01
     c78:	8c 93       	st	X, r24
            if (Config_Ptr->timer_mode == NORMAL_MODE) {
     c7a:	e9 81       	ldd	r30, Y+1	; 0x01
     c7c:	fa 81       	ldd	r31, Y+2	; 0x02
     c7e:	86 81       	ldd	r24, Z+6	; 0x06
     c80:	88 23       	and	r24, r24
     c82:	79 f4       	brne	.+30     	; 0xca2 <Timer_init+0x15c>
                TCCR2 = (1 << FOC2) | Config_Ptr->timer_clock;
     c84:	a5 e4       	ldi	r26, 0x45	; 69
     c86:	b0 e0       	ldi	r27, 0x00	; 0
     c88:	e9 81       	ldd	r30, Y+1	; 0x01
     c8a:	fa 81       	ldd	r31, Y+2	; 0x02
     c8c:	85 81       	ldd	r24, Z+5	; 0x05
     c8e:	80 68       	ori	r24, 0x80	; 128
     c90:	8c 93       	st	X, r24
                TIMSK |= (1 << TOIE2); // Enable overflow interrupt
     c92:	a9 e5       	ldi	r26, 0x59	; 89
     c94:	b0 e0       	ldi	r27, 0x00	; 0
     c96:	e9 e5       	ldi	r30, 0x59	; 89
     c98:	f0 e0       	ldi	r31, 0x00	; 0
     c9a:	80 81       	ld	r24, Z
     c9c:	80 64       	ori	r24, 0x40	; 64
     c9e:	8c 93       	st	X, r24
     ca0:	15 c0       	rjmp	.+42     	; 0xccc <Timer_init+0x186>
            } else {
                OCR2 = Config_Ptr->timer_compare_MatchValue;
     ca2:	a3 e4       	ldi	r26, 0x43	; 67
     ca4:	b0 e0       	ldi	r27, 0x00	; 0
     ca6:	e9 81       	ldd	r30, Y+1	; 0x01
     ca8:	fa 81       	ldd	r31, Y+2	; 0x02
     caa:	82 81       	ldd	r24, Z+2	; 0x02
     cac:	93 81       	ldd	r25, Z+3	; 0x03
     cae:	8c 93       	st	X, r24
                TCCR2 = (1 << WGM21) | (1 << FOC2) | Config_Ptr->timer_clock;
     cb0:	a5 e4       	ldi	r26, 0x45	; 69
     cb2:	b0 e0       	ldi	r27, 0x00	; 0
     cb4:	e9 81       	ldd	r30, Y+1	; 0x01
     cb6:	fa 81       	ldd	r31, Y+2	; 0x02
     cb8:	85 81       	ldd	r24, Z+5	; 0x05
     cba:	88 68       	ori	r24, 0x88	; 136
     cbc:	8c 93       	st	X, r24
                TIMSK |= (1 << OCIE2); // Enable compare match interrupt
     cbe:	a9 e5       	ldi	r26, 0x59	; 89
     cc0:	b0 e0       	ldi	r27, 0x00	; 0
     cc2:	e9 e5       	ldi	r30, 0x59	; 89
     cc4:	f0 e0       	ldi	r31, 0x00	; 0
     cc6:	80 81       	ld	r24, Z
     cc8:	80 68       	ori	r24, 0x80	; 128
     cca:	8c 93       	st	X, r24
            }
            break;
    }
}
     ccc:	0f 90       	pop	r0
     cce:	0f 90       	pop	r0
     cd0:	0f 90       	pop	r0
     cd2:	0f 90       	pop	r0
     cd4:	cf 91       	pop	r28
     cd6:	df 91       	pop	r29
     cd8:	08 95       	ret

00000cda <Timer_deInit>:

void Timer_deInit(Timer_ID_Type timer_type) {
     cda:	df 93       	push	r29
     cdc:	cf 93       	push	r28
     cde:	00 d0       	rcall	.+0      	; 0xce0 <Timer_deInit+0x6>
     ce0:	0f 92       	push	r0
     ce2:	cd b7       	in	r28, 0x3d	; 61
     ce4:	de b7       	in	r29, 0x3e	; 62
     ce6:	89 83       	std	Y+1, r24	; 0x01
    switch (timer_type) {
     ce8:	89 81       	ldd	r24, Y+1	; 0x01
     cea:	28 2f       	mov	r18, r24
     cec:	30 e0       	ldi	r19, 0x00	; 0
     cee:	3b 83       	std	Y+3, r19	; 0x03
     cf0:	2a 83       	std	Y+2, r18	; 0x02
     cf2:	8a 81       	ldd	r24, Y+2	; 0x02
     cf4:	9b 81       	ldd	r25, Y+3	; 0x03
     cf6:	81 30       	cpi	r24, 0x01	; 1
     cf8:	91 05       	cpc	r25, r1
     cfa:	a1 f0       	breq	.+40     	; 0xd24 <Timer_deInit+0x4a>
     cfc:	2a 81       	ldd	r18, Y+2	; 0x02
     cfe:	3b 81       	ldd	r19, Y+3	; 0x03
     d00:	22 30       	cpi	r18, 0x02	; 2
     d02:	31 05       	cpc	r19, r1
     d04:	e9 f0       	breq	.+58     	; 0xd40 <Timer_deInit+0x66>
     d06:	8a 81       	ldd	r24, Y+2	; 0x02
     d08:	9b 81       	ldd	r25, Y+3	; 0x03
     d0a:	00 97       	sbiw	r24, 0x00	; 0
     d0c:	19 f5       	brne	.+70     	; 0xd54 <Timer_deInit+0x7a>
        case TIMER0:
            TCCR0 = 0;
     d0e:	e3 e5       	ldi	r30, 0x53	; 83
     d10:	f0 e0       	ldi	r31, 0x00	; 0
     d12:	10 82       	st	Z, r1
            TIMSK &= ~(1 << TOIE0) & ~(1 << OCIE0); // Disable all TIMER0 interrupts
     d14:	a9 e5       	ldi	r26, 0x59	; 89
     d16:	b0 e0       	ldi	r27, 0x00	; 0
     d18:	e9 e5       	ldi	r30, 0x59	; 89
     d1a:	f0 e0       	ldi	r31, 0x00	; 0
     d1c:	80 81       	ld	r24, Z
     d1e:	8c 7f       	andi	r24, 0xFC	; 252
     d20:	8c 93       	st	X, r24
     d22:	18 c0       	rjmp	.+48     	; 0xd54 <Timer_deInit+0x7a>
            break;

        case TIMER1:
            TCCR1A = 0;
     d24:	ef e4       	ldi	r30, 0x4F	; 79
     d26:	f0 e0       	ldi	r31, 0x00	; 0
     d28:	10 82       	st	Z, r1
            TCCR1B = 0;
     d2a:	ee e4       	ldi	r30, 0x4E	; 78
     d2c:	f0 e0       	ldi	r31, 0x00	; 0
     d2e:	10 82       	st	Z, r1
            TIMSK &= ~(1 << TOIE1) & ~(1 << OCIE1A); // Disable all TIMER1 interrupts
     d30:	a9 e5       	ldi	r26, 0x59	; 89
     d32:	b0 e0       	ldi	r27, 0x00	; 0
     d34:	e9 e5       	ldi	r30, 0x59	; 89
     d36:	f0 e0       	ldi	r31, 0x00	; 0
     d38:	80 81       	ld	r24, Z
     d3a:	8b 7e       	andi	r24, 0xEB	; 235
     d3c:	8c 93       	st	X, r24
     d3e:	0a c0       	rjmp	.+20     	; 0xd54 <Timer_deInit+0x7a>
            break;

        case TIMER2:
            TCCR2 = 0;
     d40:	e5 e4       	ldi	r30, 0x45	; 69
     d42:	f0 e0       	ldi	r31, 0x00	; 0
     d44:	10 82       	st	Z, r1
            TIMSK &= ~(1 << TOIE2) & ~(1 << OCIE2); // Disable all TIMER2 interrupts
     d46:	a9 e5       	ldi	r26, 0x59	; 89
     d48:	b0 e0       	ldi	r27, 0x00	; 0
     d4a:	e9 e5       	ldi	r30, 0x59	; 89
     d4c:	f0 e0       	ldi	r31, 0x00	; 0
     d4e:	80 81       	ld	r24, Z
     d50:	8f 73       	andi	r24, 0x3F	; 63
     d52:	8c 93       	st	X, r24
            break;
    }
}
     d54:	0f 90       	pop	r0
     d56:	0f 90       	pop	r0
     d58:	0f 90       	pop	r0
     d5a:	cf 91       	pop	r28
     d5c:	df 91       	pop	r29
     d5e:	08 95       	ret

00000d60 <Timer_setCallBack>:

void Timer_setCallBack(void(*a_ptr)(void), Timer_ID_Type a_timer_ID) {
     d60:	df 93       	push	r29
     d62:	cf 93       	push	r28
     d64:	00 d0       	rcall	.+0      	; 0xd66 <Timer_setCallBack+0x6>
     d66:	00 d0       	rcall	.+0      	; 0xd68 <Timer_setCallBack+0x8>
     d68:	0f 92       	push	r0
     d6a:	cd b7       	in	r28, 0x3d	; 61
     d6c:	de b7       	in	r29, 0x3e	; 62
     d6e:	9a 83       	std	Y+2, r25	; 0x02
     d70:	89 83       	std	Y+1, r24	; 0x01
     d72:	6b 83       	std	Y+3, r22	; 0x03
    switch (a_timer_ID) {
     d74:	8b 81       	ldd	r24, Y+3	; 0x03
     d76:	28 2f       	mov	r18, r24
     d78:	30 e0       	ldi	r19, 0x00	; 0
     d7a:	3d 83       	std	Y+5, r19	; 0x05
     d7c:	2c 83       	std	Y+4, r18	; 0x04
     d7e:	8c 81       	ldd	r24, Y+4	; 0x04
     d80:	9d 81       	ldd	r25, Y+5	; 0x05
     d82:	81 30       	cpi	r24, 0x01	; 1
     d84:	91 05       	cpc	r25, r1
     d86:	81 f0       	breq	.+32     	; 0xda8 <Timer_setCallBack+0x48>
     d88:	2c 81       	ldd	r18, Y+4	; 0x04
     d8a:	3d 81       	ldd	r19, Y+5	; 0x05
     d8c:	22 30       	cpi	r18, 0x02	; 2
     d8e:	31 05       	cpc	r19, r1
     d90:	91 f0       	breq	.+36     	; 0xdb6 <Timer_setCallBack+0x56>
     d92:	8c 81       	ldd	r24, Y+4	; 0x04
     d94:	9d 81       	ldd	r25, Y+5	; 0x05
     d96:	00 97       	sbiw	r24, 0x00	; 0
     d98:	a1 f4       	brne	.+40     	; 0xdc2 <Timer_setCallBack+0x62>
        case TIMER0:
            g_Timer0CallBack = a_ptr;
     d9a:	89 81       	ldd	r24, Y+1	; 0x01
     d9c:	9a 81       	ldd	r25, Y+2	; 0x02
     d9e:	90 93 3d 01 	sts	0x013D, r25
     da2:	80 93 3c 01 	sts	0x013C, r24
     da6:	0d c0       	rjmp	.+26     	; 0xdc2 <Timer_setCallBack+0x62>
            break;
        case TIMER1:
            g_Timer1CallBack = a_ptr;
     da8:	89 81       	ldd	r24, Y+1	; 0x01
     daa:	9a 81       	ldd	r25, Y+2	; 0x02
     dac:	90 93 3f 01 	sts	0x013F, r25
     db0:	80 93 3e 01 	sts	0x013E, r24
     db4:	06 c0       	rjmp	.+12     	; 0xdc2 <Timer_setCallBack+0x62>
            break;
        case TIMER2:
            g_Timer2CallBack = a_ptr;
     db6:	89 81       	ldd	r24, Y+1	; 0x01
     db8:	9a 81       	ldd	r25, Y+2	; 0x02
     dba:	90 93 41 01 	sts	0x0141, r25
     dbe:	80 93 40 01 	sts	0x0140, r24
            break;
    }
}
     dc2:	0f 90       	pop	r0
     dc4:	0f 90       	pop	r0
     dc6:	0f 90       	pop	r0
     dc8:	0f 90       	pop	r0
     dca:	0f 90       	pop	r0
     dcc:	cf 91       	pop	r28
     dce:	df 91       	pop	r29
     dd0:	08 95       	ret

00000dd2 <Timer_start>:

void Timer_start(Timer_ID_Type timer_id, Timer_ClockType timer_clock) {
     dd2:	df 93       	push	r29
     dd4:	cf 93       	push	r28
     dd6:	00 d0       	rcall	.+0      	; 0xdd8 <Timer_start+0x6>
     dd8:	00 d0       	rcall	.+0      	; 0xdda <Timer_start+0x8>
     dda:	cd b7       	in	r28, 0x3d	; 61
     ddc:	de b7       	in	r29, 0x3e	; 62
     dde:	89 83       	std	Y+1, r24	; 0x01
     de0:	6a 83       	std	Y+2, r22	; 0x02
    switch (timer_id) {
     de2:	89 81       	ldd	r24, Y+1	; 0x01
     de4:	28 2f       	mov	r18, r24
     de6:	30 e0       	ldi	r19, 0x00	; 0
     de8:	3c 83       	std	Y+4, r19	; 0x04
     dea:	2b 83       	std	Y+3, r18	; 0x03
     dec:	8b 81       	ldd	r24, Y+3	; 0x03
     dee:	9c 81       	ldd	r25, Y+4	; 0x04
     df0:	81 30       	cpi	r24, 0x01	; 1
     df2:	91 05       	cpc	r25, r1
     df4:	91 f0       	breq	.+36     	; 0xe1a <Timer_start+0x48>
     df6:	2b 81       	ldd	r18, Y+3	; 0x03
     df8:	3c 81       	ldd	r19, Y+4	; 0x04
     dfa:	22 30       	cpi	r18, 0x02	; 2
     dfc:	31 05       	cpc	r19, r1
     dfe:	b1 f0       	breq	.+44     	; 0xe2c <Timer_start+0x5a>
     e00:	8b 81       	ldd	r24, Y+3	; 0x03
     e02:	9c 81       	ldd	r25, Y+4	; 0x04
     e04:	00 97       	sbiw	r24, 0x00	; 0
     e06:	d1 f4       	brne	.+52     	; 0xe3c <Timer_start+0x6a>
        case TIMER0:
            TCCR0 |= timer_clock; // Set the clock prescaler to start TIMER0
     e08:	a3 e5       	ldi	r26, 0x53	; 83
     e0a:	b0 e0       	ldi	r27, 0x00	; 0
     e0c:	e3 e5       	ldi	r30, 0x53	; 83
     e0e:	f0 e0       	ldi	r31, 0x00	; 0
     e10:	90 81       	ld	r25, Z
     e12:	8a 81       	ldd	r24, Y+2	; 0x02
     e14:	89 2b       	or	r24, r25
     e16:	8c 93       	st	X, r24
     e18:	11 c0       	rjmp	.+34     	; 0xe3c <Timer_start+0x6a>
            break;
        case TIMER1:
            TCCR1B |= timer_clock; // Set the clock prescaler to start TIMER1
     e1a:	ae e4       	ldi	r26, 0x4E	; 78
     e1c:	b0 e0       	ldi	r27, 0x00	; 0
     e1e:	ee e4       	ldi	r30, 0x4E	; 78
     e20:	f0 e0       	ldi	r31, 0x00	; 0
     e22:	90 81       	ld	r25, Z
     e24:	8a 81       	ldd	r24, Y+2	; 0x02
     e26:	89 2b       	or	r24, r25
     e28:	8c 93       	st	X, r24
     e2a:	08 c0       	rjmp	.+16     	; 0xe3c <Timer_start+0x6a>
            break;
        case TIMER2:
            TCCR2 |= timer_clock; // Set the clock prescaler to start TIMER2
     e2c:	a5 e4       	ldi	r26, 0x45	; 69
     e2e:	b0 e0       	ldi	r27, 0x00	; 0
     e30:	e5 e4       	ldi	r30, 0x45	; 69
     e32:	f0 e0       	ldi	r31, 0x00	; 0
     e34:	90 81       	ld	r25, Z
     e36:	8a 81       	ldd	r24, Y+2	; 0x02
     e38:	89 2b       	or	r24, r25
     e3a:	8c 93       	st	X, r24
            break;
        default:
            // Handle invalid timer ID if necessary
            break;
    }
}
     e3c:	0f 90       	pop	r0
     e3e:	0f 90       	pop	r0
     e40:	0f 90       	pop	r0
     e42:	0f 90       	pop	r0
     e44:	cf 91       	pop	r28
     e46:	df 91       	pop	r29
     e48:	08 95       	ret

00000e4a <Timer_stop>:

void Timer_stop(Timer_ID_Type timer_id) {
     e4a:	df 93       	push	r29
     e4c:	cf 93       	push	r28
     e4e:	00 d0       	rcall	.+0      	; 0xe50 <Timer_stop+0x6>
     e50:	0f 92       	push	r0
     e52:	cd b7       	in	r28, 0x3d	; 61
     e54:	de b7       	in	r29, 0x3e	; 62
     e56:	89 83       	std	Y+1, r24	; 0x01
    switch (timer_id) {
     e58:	89 81       	ldd	r24, Y+1	; 0x01
     e5a:	28 2f       	mov	r18, r24
     e5c:	30 e0       	ldi	r19, 0x00	; 0
     e5e:	3b 83       	std	Y+3, r19	; 0x03
     e60:	2a 83       	std	Y+2, r18	; 0x02
     e62:	8a 81       	ldd	r24, Y+2	; 0x02
     e64:	9b 81       	ldd	r25, Y+3	; 0x03
     e66:	81 30       	cpi	r24, 0x01	; 1
     e68:	91 05       	cpc	r25, r1
     e6a:	89 f0       	breq	.+34     	; 0xe8e <Timer_stop+0x44>
     e6c:	2a 81       	ldd	r18, Y+2	; 0x02
     e6e:	3b 81       	ldd	r19, Y+3	; 0x03
     e70:	22 30       	cpi	r18, 0x02	; 2
     e72:	31 05       	cpc	r19, r1
     e74:	a1 f0       	breq	.+40     	; 0xe9e <Timer_stop+0x54>
     e76:	8a 81       	ldd	r24, Y+2	; 0x02
     e78:	9b 81       	ldd	r25, Y+3	; 0x03
     e7a:	00 97       	sbiw	r24, 0x00	; 0
     e7c:	b9 f4       	brne	.+46     	; 0xeac <Timer_stop+0x62>
        case TIMER0:
            TCCR0 &= ~((1 << CS02) | (1 << CS01) | (1 << CS00)); // Clear clock prescaler bits to stop TIMER0
     e7e:	a3 e5       	ldi	r26, 0x53	; 83
     e80:	b0 e0       	ldi	r27, 0x00	; 0
     e82:	e3 e5       	ldi	r30, 0x53	; 83
     e84:	f0 e0       	ldi	r31, 0x00	; 0
     e86:	80 81       	ld	r24, Z
     e88:	88 7f       	andi	r24, 0xF8	; 248
     e8a:	8c 93       	st	X, r24
     e8c:	0f c0       	rjmp	.+30     	; 0xeac <Timer_stop+0x62>
            break;
        case TIMER1:
            TCCR1B &= ~((1 << CS12) | (1 << CS11) | (1 << CS10)); // Clear clock prescaler bits to stop TIMER1
     e8e:	ae e4       	ldi	r26, 0x4E	; 78
     e90:	b0 e0       	ldi	r27, 0x00	; 0
     e92:	ee e4       	ldi	r30, 0x4E	; 78
     e94:	f0 e0       	ldi	r31, 0x00	; 0
     e96:	80 81       	ld	r24, Z
     e98:	88 7f       	andi	r24, 0xF8	; 248
     e9a:	8c 93       	st	X, r24
     e9c:	07 c0       	rjmp	.+14     	; 0xeac <Timer_stop+0x62>
            break;
        case TIMER2:
            TCCR2 &= ~((1 << CS22) | (1 << CS21) | (1 << CS20)); // Clear clock prescaler bits to stop TIMER2
     e9e:	a5 e4       	ldi	r26, 0x45	; 69
     ea0:	b0 e0       	ldi	r27, 0x00	; 0
     ea2:	e5 e4       	ldi	r30, 0x45	; 69
     ea4:	f0 e0       	ldi	r31, 0x00	; 0
     ea6:	80 81       	ld	r24, Z
     ea8:	88 7f       	andi	r24, 0xF8	; 248
     eaa:	8c 93       	st	X, r24
            break;
        default:
            // Handle invalid timer ID if necessary
            break;
    }
}
     eac:	0f 90       	pop	r0
     eae:	0f 90       	pop	r0
     eb0:	0f 90       	pop	r0
     eb2:	cf 91       	pop	r28
     eb4:	df 91       	pop	r29
     eb6:	08 95       	ret

00000eb8 <__vector_11>:

// ISR for TIMER0 Overflow
ISR(TIMER0_OVF_vect) {
     eb8:	1f 92       	push	r1
     eba:	0f 92       	push	r0
     ebc:	0f b6       	in	r0, 0x3f	; 63
     ebe:	0f 92       	push	r0
     ec0:	11 24       	eor	r1, r1
     ec2:	2f 93       	push	r18
     ec4:	3f 93       	push	r19
     ec6:	4f 93       	push	r20
     ec8:	5f 93       	push	r21
     eca:	6f 93       	push	r22
     ecc:	7f 93       	push	r23
     ece:	8f 93       	push	r24
     ed0:	9f 93       	push	r25
     ed2:	af 93       	push	r26
     ed4:	bf 93       	push	r27
     ed6:	ef 93       	push	r30
     ed8:	ff 93       	push	r31
     eda:	df 93       	push	r29
     edc:	cf 93       	push	r28
     ede:	cd b7       	in	r28, 0x3d	; 61
     ee0:	de b7       	in	r29, 0x3e	; 62
    if (g_Timer0CallBack != NULL_PTR) {
     ee2:	80 91 3c 01 	lds	r24, 0x013C
     ee6:	90 91 3d 01 	lds	r25, 0x013D
     eea:	00 97       	sbiw	r24, 0x00	; 0
     eec:	29 f0       	breq	.+10     	; 0xef8 <__vector_11+0x40>
        g_Timer0CallBack();
     eee:	e0 91 3c 01 	lds	r30, 0x013C
     ef2:	f0 91 3d 01 	lds	r31, 0x013D
     ef6:	09 95       	icall
    }
}
     ef8:	cf 91       	pop	r28
     efa:	df 91       	pop	r29
     efc:	ff 91       	pop	r31
     efe:	ef 91       	pop	r30
     f00:	bf 91       	pop	r27
     f02:	af 91       	pop	r26
     f04:	9f 91       	pop	r25
     f06:	8f 91       	pop	r24
     f08:	7f 91       	pop	r23
     f0a:	6f 91       	pop	r22
     f0c:	5f 91       	pop	r21
     f0e:	4f 91       	pop	r20
     f10:	3f 91       	pop	r19
     f12:	2f 91       	pop	r18
     f14:	0f 90       	pop	r0
     f16:	0f be       	out	0x3f, r0	; 63
     f18:	0f 90       	pop	r0
     f1a:	1f 90       	pop	r1
     f1c:	18 95       	reti

00000f1e <__vector_10>:

// ISR for TIMER0 Compare Match
ISR(TIMER0_COMP_vect) {
     f1e:	1f 92       	push	r1
     f20:	0f 92       	push	r0
     f22:	0f b6       	in	r0, 0x3f	; 63
     f24:	0f 92       	push	r0
     f26:	11 24       	eor	r1, r1
     f28:	2f 93       	push	r18
     f2a:	3f 93       	push	r19
     f2c:	4f 93       	push	r20
     f2e:	5f 93       	push	r21
     f30:	6f 93       	push	r22
     f32:	7f 93       	push	r23
     f34:	8f 93       	push	r24
     f36:	9f 93       	push	r25
     f38:	af 93       	push	r26
     f3a:	bf 93       	push	r27
     f3c:	ef 93       	push	r30
     f3e:	ff 93       	push	r31
     f40:	df 93       	push	r29
     f42:	cf 93       	push	r28
     f44:	cd b7       	in	r28, 0x3d	; 61
     f46:	de b7       	in	r29, 0x3e	; 62
    if (g_Timer0CallBack != NULL_PTR) {
     f48:	80 91 3c 01 	lds	r24, 0x013C
     f4c:	90 91 3d 01 	lds	r25, 0x013D
     f50:	00 97       	sbiw	r24, 0x00	; 0
     f52:	29 f0       	breq	.+10     	; 0xf5e <__vector_10+0x40>
        g_Timer0CallBack();
     f54:	e0 91 3c 01 	lds	r30, 0x013C
     f58:	f0 91 3d 01 	lds	r31, 0x013D
     f5c:	09 95       	icall
    }
}
     f5e:	cf 91       	pop	r28
     f60:	df 91       	pop	r29
     f62:	ff 91       	pop	r31
     f64:	ef 91       	pop	r30
     f66:	bf 91       	pop	r27
     f68:	af 91       	pop	r26
     f6a:	9f 91       	pop	r25
     f6c:	8f 91       	pop	r24
     f6e:	7f 91       	pop	r23
     f70:	6f 91       	pop	r22
     f72:	5f 91       	pop	r21
     f74:	4f 91       	pop	r20
     f76:	3f 91       	pop	r19
     f78:	2f 91       	pop	r18
     f7a:	0f 90       	pop	r0
     f7c:	0f be       	out	0x3f, r0	; 63
     f7e:	0f 90       	pop	r0
     f80:	1f 90       	pop	r1
     f82:	18 95       	reti

00000f84 <__vector_9>:

// ISR for TIMER1 Overflow
ISR(TIMER1_OVF_vect) {
     f84:	1f 92       	push	r1
     f86:	0f 92       	push	r0
     f88:	0f b6       	in	r0, 0x3f	; 63
     f8a:	0f 92       	push	r0
     f8c:	11 24       	eor	r1, r1
     f8e:	2f 93       	push	r18
     f90:	3f 93       	push	r19
     f92:	4f 93       	push	r20
     f94:	5f 93       	push	r21
     f96:	6f 93       	push	r22
     f98:	7f 93       	push	r23
     f9a:	8f 93       	push	r24
     f9c:	9f 93       	push	r25
     f9e:	af 93       	push	r26
     fa0:	bf 93       	push	r27
     fa2:	ef 93       	push	r30
     fa4:	ff 93       	push	r31
     fa6:	df 93       	push	r29
     fa8:	cf 93       	push	r28
     faa:	cd b7       	in	r28, 0x3d	; 61
     fac:	de b7       	in	r29, 0x3e	; 62
    if (g_Timer1CallBack != NULL_PTR) {
     fae:	80 91 3e 01 	lds	r24, 0x013E
     fb2:	90 91 3f 01 	lds	r25, 0x013F
     fb6:	00 97       	sbiw	r24, 0x00	; 0
     fb8:	29 f0       	breq	.+10     	; 0xfc4 <__vector_9+0x40>
        g_Timer1CallBack();
     fba:	e0 91 3e 01 	lds	r30, 0x013E
     fbe:	f0 91 3f 01 	lds	r31, 0x013F
     fc2:	09 95       	icall
    }
}
     fc4:	cf 91       	pop	r28
     fc6:	df 91       	pop	r29
     fc8:	ff 91       	pop	r31
     fca:	ef 91       	pop	r30
     fcc:	bf 91       	pop	r27
     fce:	af 91       	pop	r26
     fd0:	9f 91       	pop	r25
     fd2:	8f 91       	pop	r24
     fd4:	7f 91       	pop	r23
     fd6:	6f 91       	pop	r22
     fd8:	5f 91       	pop	r21
     fda:	4f 91       	pop	r20
     fdc:	3f 91       	pop	r19
     fde:	2f 91       	pop	r18
     fe0:	0f 90       	pop	r0
     fe2:	0f be       	out	0x3f, r0	; 63
     fe4:	0f 90       	pop	r0
     fe6:	1f 90       	pop	r1
     fe8:	18 95       	reti

00000fea <__vector_7>:

// ISR for TIMER1 Compare Match
ISR(TIMER1_COMPA_vect) {
     fea:	1f 92       	push	r1
     fec:	0f 92       	push	r0
     fee:	0f b6       	in	r0, 0x3f	; 63
     ff0:	0f 92       	push	r0
     ff2:	11 24       	eor	r1, r1
     ff4:	2f 93       	push	r18
     ff6:	3f 93       	push	r19
     ff8:	4f 93       	push	r20
     ffa:	5f 93       	push	r21
     ffc:	6f 93       	push	r22
     ffe:	7f 93       	push	r23
    1000:	8f 93       	push	r24
    1002:	9f 93       	push	r25
    1004:	af 93       	push	r26
    1006:	bf 93       	push	r27
    1008:	ef 93       	push	r30
    100a:	ff 93       	push	r31
    100c:	df 93       	push	r29
    100e:	cf 93       	push	r28
    1010:	cd b7       	in	r28, 0x3d	; 61
    1012:	de b7       	in	r29, 0x3e	; 62
    if (g_Timer1CallBack != NULL_PTR) {
    1014:	80 91 3e 01 	lds	r24, 0x013E
    1018:	90 91 3f 01 	lds	r25, 0x013F
    101c:	00 97       	sbiw	r24, 0x00	; 0
    101e:	29 f0       	breq	.+10     	; 0x102a <__vector_7+0x40>
        g_Timer1CallBack();
    1020:	e0 91 3e 01 	lds	r30, 0x013E
    1024:	f0 91 3f 01 	lds	r31, 0x013F
    1028:	09 95       	icall
    }
}
    102a:	cf 91       	pop	r28
    102c:	df 91       	pop	r29
    102e:	ff 91       	pop	r31
    1030:	ef 91       	pop	r30
    1032:	bf 91       	pop	r27
    1034:	af 91       	pop	r26
    1036:	9f 91       	pop	r25
    1038:	8f 91       	pop	r24
    103a:	7f 91       	pop	r23
    103c:	6f 91       	pop	r22
    103e:	5f 91       	pop	r21
    1040:	4f 91       	pop	r20
    1042:	3f 91       	pop	r19
    1044:	2f 91       	pop	r18
    1046:	0f 90       	pop	r0
    1048:	0f be       	out	0x3f, r0	; 63
    104a:	0f 90       	pop	r0
    104c:	1f 90       	pop	r1
    104e:	18 95       	reti

00001050 <__vector_5>:

// ISR for TIMER2 Overflow
ISR(TIMER2_OVF_vect) {
    1050:	1f 92       	push	r1
    1052:	0f 92       	push	r0
    1054:	0f b6       	in	r0, 0x3f	; 63
    1056:	0f 92       	push	r0
    1058:	11 24       	eor	r1, r1
    105a:	2f 93       	push	r18
    105c:	3f 93       	push	r19
    105e:	4f 93       	push	r20
    1060:	5f 93       	push	r21
    1062:	6f 93       	push	r22
    1064:	7f 93       	push	r23
    1066:	8f 93       	push	r24
    1068:	9f 93       	push	r25
    106a:	af 93       	push	r26
    106c:	bf 93       	push	r27
    106e:	ef 93       	push	r30
    1070:	ff 93       	push	r31
    1072:	df 93       	push	r29
    1074:	cf 93       	push	r28
    1076:	cd b7       	in	r28, 0x3d	; 61
    1078:	de b7       	in	r29, 0x3e	; 62
    if (g_Timer2CallBack != NULL_PTR) {
    107a:	80 91 40 01 	lds	r24, 0x0140
    107e:	90 91 41 01 	lds	r25, 0x0141
    1082:	00 97       	sbiw	r24, 0x00	; 0
    1084:	29 f0       	breq	.+10     	; 0x1090 <__vector_5+0x40>
        g_Timer2CallBack();
    1086:	e0 91 40 01 	lds	r30, 0x0140
    108a:	f0 91 41 01 	lds	r31, 0x0141
    108e:	09 95       	icall
    }
}
    1090:	cf 91       	pop	r28
    1092:	df 91       	pop	r29
    1094:	ff 91       	pop	r31
    1096:	ef 91       	pop	r30
    1098:	bf 91       	pop	r27
    109a:	af 91       	pop	r26
    109c:	9f 91       	pop	r25
    109e:	8f 91       	pop	r24
    10a0:	7f 91       	pop	r23
    10a2:	6f 91       	pop	r22
    10a4:	5f 91       	pop	r21
    10a6:	4f 91       	pop	r20
    10a8:	3f 91       	pop	r19
    10aa:	2f 91       	pop	r18
    10ac:	0f 90       	pop	r0
    10ae:	0f be       	out	0x3f, r0	; 63
    10b0:	0f 90       	pop	r0
    10b2:	1f 90       	pop	r1
    10b4:	18 95       	reti

000010b6 <__vector_4>:

// ISR for TIMER2 Compare Match
ISR(TIMER2_COMP_vect) {
    10b6:	1f 92       	push	r1
    10b8:	0f 92       	push	r0
    10ba:	0f b6       	in	r0, 0x3f	; 63
    10bc:	0f 92       	push	r0
    10be:	11 24       	eor	r1, r1
    10c0:	2f 93       	push	r18
    10c2:	3f 93       	push	r19
    10c4:	4f 93       	push	r20
    10c6:	5f 93       	push	r21
    10c8:	6f 93       	push	r22
    10ca:	7f 93       	push	r23
    10cc:	8f 93       	push	r24
    10ce:	9f 93       	push	r25
    10d0:	af 93       	push	r26
    10d2:	bf 93       	push	r27
    10d4:	ef 93       	push	r30
    10d6:	ff 93       	push	r31
    10d8:	df 93       	push	r29
    10da:	cf 93       	push	r28
    10dc:	cd b7       	in	r28, 0x3d	; 61
    10de:	de b7       	in	r29, 0x3e	; 62
    if (g_Timer2CallBack != NULL_PTR) {
    10e0:	80 91 40 01 	lds	r24, 0x0140
    10e4:	90 91 41 01 	lds	r25, 0x0141
    10e8:	00 97       	sbiw	r24, 0x00	; 0
    10ea:	29 f0       	breq	.+10     	; 0x10f6 <__vector_4+0x40>
        g_Timer2CallBack();
    10ec:	e0 91 40 01 	lds	r30, 0x0140
    10f0:	f0 91 41 01 	lds	r31, 0x0141
    10f4:	09 95       	icall
    }
}
    10f6:	cf 91       	pop	r28
    10f8:	df 91       	pop	r29
    10fa:	ff 91       	pop	r31
    10fc:	ef 91       	pop	r30
    10fe:	bf 91       	pop	r27
    1100:	af 91       	pop	r26
    1102:	9f 91       	pop	r25
    1104:	8f 91       	pop	r24
    1106:	7f 91       	pop	r23
    1108:	6f 91       	pop	r22
    110a:	5f 91       	pop	r21
    110c:	4f 91       	pop	r20
    110e:	3f 91       	pop	r19
    1110:	2f 91       	pop	r18
    1112:	0f 90       	pop	r0
    1114:	0f be       	out	0x3f, r0	; 63
    1116:	0f 90       	pop	r0
    1118:	1f 90       	pop	r1
    111a:	18 95       	reti

0000111c <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    111c:	df 93       	push	r29
    111e:	cf 93       	push	r28
    1120:	00 d0       	rcall	.+0      	; 0x1122 <GPIO_setupPinDirection+0x6>
    1122:	00 d0       	rcall	.+0      	; 0x1124 <GPIO_setupPinDirection+0x8>
    1124:	0f 92       	push	r0
    1126:	cd b7       	in	r28, 0x3d	; 61
    1128:	de b7       	in	r29, 0x3e	; 62
    112a:	89 83       	std	Y+1, r24	; 0x01
    112c:	6a 83       	std	Y+2, r22	; 0x02
    112e:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1130:	8a 81       	ldd	r24, Y+2	; 0x02
    1132:	88 30       	cpi	r24, 0x08	; 8
    1134:	08 f0       	brcs	.+2      	; 0x1138 <GPIO_setupPinDirection+0x1c>
    1136:	d5 c0       	rjmp	.+426    	; 0x12e2 <GPIO_setupPinDirection+0x1c6>
    1138:	89 81       	ldd	r24, Y+1	; 0x01
    113a:	84 30       	cpi	r24, 0x04	; 4
    113c:	08 f0       	brcs	.+2      	; 0x1140 <GPIO_setupPinDirection+0x24>
    113e:	d1 c0       	rjmp	.+418    	; 0x12e2 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1140:	89 81       	ldd	r24, Y+1	; 0x01
    1142:	28 2f       	mov	r18, r24
    1144:	30 e0       	ldi	r19, 0x00	; 0
    1146:	3d 83       	std	Y+5, r19	; 0x05
    1148:	2c 83       	std	Y+4, r18	; 0x04
    114a:	8c 81       	ldd	r24, Y+4	; 0x04
    114c:	9d 81       	ldd	r25, Y+5	; 0x05
    114e:	81 30       	cpi	r24, 0x01	; 1
    1150:	91 05       	cpc	r25, r1
    1152:	09 f4       	brne	.+2      	; 0x1156 <GPIO_setupPinDirection+0x3a>
    1154:	43 c0       	rjmp	.+134    	; 0x11dc <GPIO_setupPinDirection+0xc0>
    1156:	2c 81       	ldd	r18, Y+4	; 0x04
    1158:	3d 81       	ldd	r19, Y+5	; 0x05
    115a:	22 30       	cpi	r18, 0x02	; 2
    115c:	31 05       	cpc	r19, r1
    115e:	2c f4       	brge	.+10     	; 0x116a <GPIO_setupPinDirection+0x4e>
    1160:	8c 81       	ldd	r24, Y+4	; 0x04
    1162:	9d 81       	ldd	r25, Y+5	; 0x05
    1164:	00 97       	sbiw	r24, 0x00	; 0
    1166:	71 f0       	breq	.+28     	; 0x1184 <GPIO_setupPinDirection+0x68>
    1168:	bc c0       	rjmp	.+376    	; 0x12e2 <GPIO_setupPinDirection+0x1c6>
    116a:	2c 81       	ldd	r18, Y+4	; 0x04
    116c:	3d 81       	ldd	r19, Y+5	; 0x05
    116e:	22 30       	cpi	r18, 0x02	; 2
    1170:	31 05       	cpc	r19, r1
    1172:	09 f4       	brne	.+2      	; 0x1176 <GPIO_setupPinDirection+0x5a>
    1174:	5f c0       	rjmp	.+190    	; 0x1234 <GPIO_setupPinDirection+0x118>
    1176:	8c 81       	ldd	r24, Y+4	; 0x04
    1178:	9d 81       	ldd	r25, Y+5	; 0x05
    117a:	83 30       	cpi	r24, 0x03	; 3
    117c:	91 05       	cpc	r25, r1
    117e:	09 f4       	brne	.+2      	; 0x1182 <GPIO_setupPinDirection+0x66>
    1180:	85 c0       	rjmp	.+266    	; 0x128c <GPIO_setupPinDirection+0x170>
    1182:	af c0       	rjmp	.+350    	; 0x12e2 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    1184:	8b 81       	ldd	r24, Y+3	; 0x03
    1186:	81 30       	cpi	r24, 0x01	; 1
    1188:	a1 f4       	brne	.+40     	; 0x11b2 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    118a:	aa e3       	ldi	r26, 0x3A	; 58
    118c:	b0 e0       	ldi	r27, 0x00	; 0
    118e:	ea e3       	ldi	r30, 0x3A	; 58
    1190:	f0 e0       	ldi	r31, 0x00	; 0
    1192:	80 81       	ld	r24, Z
    1194:	48 2f       	mov	r20, r24
    1196:	8a 81       	ldd	r24, Y+2	; 0x02
    1198:	28 2f       	mov	r18, r24
    119a:	30 e0       	ldi	r19, 0x00	; 0
    119c:	81 e0       	ldi	r24, 0x01	; 1
    119e:	90 e0       	ldi	r25, 0x00	; 0
    11a0:	02 2e       	mov	r0, r18
    11a2:	02 c0       	rjmp	.+4      	; 0x11a8 <GPIO_setupPinDirection+0x8c>
    11a4:	88 0f       	add	r24, r24
    11a6:	99 1f       	adc	r25, r25
    11a8:	0a 94       	dec	r0
    11aa:	e2 f7       	brpl	.-8      	; 0x11a4 <GPIO_setupPinDirection+0x88>
    11ac:	84 2b       	or	r24, r20
    11ae:	8c 93       	st	X, r24
    11b0:	98 c0       	rjmp	.+304    	; 0x12e2 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    11b2:	aa e3       	ldi	r26, 0x3A	; 58
    11b4:	b0 e0       	ldi	r27, 0x00	; 0
    11b6:	ea e3       	ldi	r30, 0x3A	; 58
    11b8:	f0 e0       	ldi	r31, 0x00	; 0
    11ba:	80 81       	ld	r24, Z
    11bc:	48 2f       	mov	r20, r24
    11be:	8a 81       	ldd	r24, Y+2	; 0x02
    11c0:	28 2f       	mov	r18, r24
    11c2:	30 e0       	ldi	r19, 0x00	; 0
    11c4:	81 e0       	ldi	r24, 0x01	; 1
    11c6:	90 e0       	ldi	r25, 0x00	; 0
    11c8:	02 2e       	mov	r0, r18
    11ca:	02 c0       	rjmp	.+4      	; 0x11d0 <GPIO_setupPinDirection+0xb4>
    11cc:	88 0f       	add	r24, r24
    11ce:	99 1f       	adc	r25, r25
    11d0:	0a 94       	dec	r0
    11d2:	e2 f7       	brpl	.-8      	; 0x11cc <GPIO_setupPinDirection+0xb0>
    11d4:	80 95       	com	r24
    11d6:	84 23       	and	r24, r20
    11d8:	8c 93       	st	X, r24
    11da:	83 c0       	rjmp	.+262    	; 0x12e2 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    11dc:	8b 81       	ldd	r24, Y+3	; 0x03
    11de:	81 30       	cpi	r24, 0x01	; 1
    11e0:	a1 f4       	brne	.+40     	; 0x120a <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    11e2:	a7 e3       	ldi	r26, 0x37	; 55
    11e4:	b0 e0       	ldi	r27, 0x00	; 0
    11e6:	e7 e3       	ldi	r30, 0x37	; 55
    11e8:	f0 e0       	ldi	r31, 0x00	; 0
    11ea:	80 81       	ld	r24, Z
    11ec:	48 2f       	mov	r20, r24
    11ee:	8a 81       	ldd	r24, Y+2	; 0x02
    11f0:	28 2f       	mov	r18, r24
    11f2:	30 e0       	ldi	r19, 0x00	; 0
    11f4:	81 e0       	ldi	r24, 0x01	; 1
    11f6:	90 e0       	ldi	r25, 0x00	; 0
    11f8:	02 2e       	mov	r0, r18
    11fa:	02 c0       	rjmp	.+4      	; 0x1200 <GPIO_setupPinDirection+0xe4>
    11fc:	88 0f       	add	r24, r24
    11fe:	99 1f       	adc	r25, r25
    1200:	0a 94       	dec	r0
    1202:	e2 f7       	brpl	.-8      	; 0x11fc <GPIO_setupPinDirection+0xe0>
    1204:	84 2b       	or	r24, r20
    1206:	8c 93       	st	X, r24
    1208:	6c c0       	rjmp	.+216    	; 0x12e2 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    120a:	a7 e3       	ldi	r26, 0x37	; 55
    120c:	b0 e0       	ldi	r27, 0x00	; 0
    120e:	e7 e3       	ldi	r30, 0x37	; 55
    1210:	f0 e0       	ldi	r31, 0x00	; 0
    1212:	80 81       	ld	r24, Z
    1214:	48 2f       	mov	r20, r24
    1216:	8a 81       	ldd	r24, Y+2	; 0x02
    1218:	28 2f       	mov	r18, r24
    121a:	30 e0       	ldi	r19, 0x00	; 0
    121c:	81 e0       	ldi	r24, 0x01	; 1
    121e:	90 e0       	ldi	r25, 0x00	; 0
    1220:	02 2e       	mov	r0, r18
    1222:	02 c0       	rjmp	.+4      	; 0x1228 <GPIO_setupPinDirection+0x10c>
    1224:	88 0f       	add	r24, r24
    1226:	99 1f       	adc	r25, r25
    1228:	0a 94       	dec	r0
    122a:	e2 f7       	brpl	.-8      	; 0x1224 <GPIO_setupPinDirection+0x108>
    122c:	80 95       	com	r24
    122e:	84 23       	and	r24, r20
    1230:	8c 93       	st	X, r24
    1232:	57 c0       	rjmp	.+174    	; 0x12e2 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1234:	8b 81       	ldd	r24, Y+3	; 0x03
    1236:	81 30       	cpi	r24, 0x01	; 1
    1238:	a1 f4       	brne	.+40     	; 0x1262 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    123a:	a4 e3       	ldi	r26, 0x34	; 52
    123c:	b0 e0       	ldi	r27, 0x00	; 0
    123e:	e4 e3       	ldi	r30, 0x34	; 52
    1240:	f0 e0       	ldi	r31, 0x00	; 0
    1242:	80 81       	ld	r24, Z
    1244:	48 2f       	mov	r20, r24
    1246:	8a 81       	ldd	r24, Y+2	; 0x02
    1248:	28 2f       	mov	r18, r24
    124a:	30 e0       	ldi	r19, 0x00	; 0
    124c:	81 e0       	ldi	r24, 0x01	; 1
    124e:	90 e0       	ldi	r25, 0x00	; 0
    1250:	02 2e       	mov	r0, r18
    1252:	02 c0       	rjmp	.+4      	; 0x1258 <GPIO_setupPinDirection+0x13c>
    1254:	88 0f       	add	r24, r24
    1256:	99 1f       	adc	r25, r25
    1258:	0a 94       	dec	r0
    125a:	e2 f7       	brpl	.-8      	; 0x1254 <GPIO_setupPinDirection+0x138>
    125c:	84 2b       	or	r24, r20
    125e:	8c 93       	st	X, r24
    1260:	40 c0       	rjmp	.+128    	; 0x12e2 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1262:	a4 e3       	ldi	r26, 0x34	; 52
    1264:	b0 e0       	ldi	r27, 0x00	; 0
    1266:	e4 e3       	ldi	r30, 0x34	; 52
    1268:	f0 e0       	ldi	r31, 0x00	; 0
    126a:	80 81       	ld	r24, Z
    126c:	48 2f       	mov	r20, r24
    126e:	8a 81       	ldd	r24, Y+2	; 0x02
    1270:	28 2f       	mov	r18, r24
    1272:	30 e0       	ldi	r19, 0x00	; 0
    1274:	81 e0       	ldi	r24, 0x01	; 1
    1276:	90 e0       	ldi	r25, 0x00	; 0
    1278:	02 2e       	mov	r0, r18
    127a:	02 c0       	rjmp	.+4      	; 0x1280 <GPIO_setupPinDirection+0x164>
    127c:	88 0f       	add	r24, r24
    127e:	99 1f       	adc	r25, r25
    1280:	0a 94       	dec	r0
    1282:	e2 f7       	brpl	.-8      	; 0x127c <GPIO_setupPinDirection+0x160>
    1284:	80 95       	com	r24
    1286:	84 23       	and	r24, r20
    1288:	8c 93       	st	X, r24
    128a:	2b c0       	rjmp	.+86     	; 0x12e2 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    128c:	8b 81       	ldd	r24, Y+3	; 0x03
    128e:	81 30       	cpi	r24, 0x01	; 1
    1290:	a1 f4       	brne	.+40     	; 0x12ba <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1292:	a1 e3       	ldi	r26, 0x31	; 49
    1294:	b0 e0       	ldi	r27, 0x00	; 0
    1296:	e1 e3       	ldi	r30, 0x31	; 49
    1298:	f0 e0       	ldi	r31, 0x00	; 0
    129a:	80 81       	ld	r24, Z
    129c:	48 2f       	mov	r20, r24
    129e:	8a 81       	ldd	r24, Y+2	; 0x02
    12a0:	28 2f       	mov	r18, r24
    12a2:	30 e0       	ldi	r19, 0x00	; 0
    12a4:	81 e0       	ldi	r24, 0x01	; 1
    12a6:	90 e0       	ldi	r25, 0x00	; 0
    12a8:	02 2e       	mov	r0, r18
    12aa:	02 c0       	rjmp	.+4      	; 0x12b0 <GPIO_setupPinDirection+0x194>
    12ac:	88 0f       	add	r24, r24
    12ae:	99 1f       	adc	r25, r25
    12b0:	0a 94       	dec	r0
    12b2:	e2 f7       	brpl	.-8      	; 0x12ac <GPIO_setupPinDirection+0x190>
    12b4:	84 2b       	or	r24, r20
    12b6:	8c 93       	st	X, r24
    12b8:	14 c0       	rjmp	.+40     	; 0x12e2 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    12ba:	a1 e3       	ldi	r26, 0x31	; 49
    12bc:	b0 e0       	ldi	r27, 0x00	; 0
    12be:	e1 e3       	ldi	r30, 0x31	; 49
    12c0:	f0 e0       	ldi	r31, 0x00	; 0
    12c2:	80 81       	ld	r24, Z
    12c4:	48 2f       	mov	r20, r24
    12c6:	8a 81       	ldd	r24, Y+2	; 0x02
    12c8:	28 2f       	mov	r18, r24
    12ca:	30 e0       	ldi	r19, 0x00	; 0
    12cc:	81 e0       	ldi	r24, 0x01	; 1
    12ce:	90 e0       	ldi	r25, 0x00	; 0
    12d0:	02 2e       	mov	r0, r18
    12d2:	02 c0       	rjmp	.+4      	; 0x12d8 <GPIO_setupPinDirection+0x1bc>
    12d4:	88 0f       	add	r24, r24
    12d6:	99 1f       	adc	r25, r25
    12d8:	0a 94       	dec	r0
    12da:	e2 f7       	brpl	.-8      	; 0x12d4 <GPIO_setupPinDirection+0x1b8>
    12dc:	80 95       	com	r24
    12de:	84 23       	and	r24, r20
    12e0:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    12e2:	0f 90       	pop	r0
    12e4:	0f 90       	pop	r0
    12e6:	0f 90       	pop	r0
    12e8:	0f 90       	pop	r0
    12ea:	0f 90       	pop	r0
    12ec:	cf 91       	pop	r28
    12ee:	df 91       	pop	r29
    12f0:	08 95       	ret

000012f2 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    12f2:	df 93       	push	r29
    12f4:	cf 93       	push	r28
    12f6:	00 d0       	rcall	.+0      	; 0x12f8 <GPIO_writePin+0x6>
    12f8:	00 d0       	rcall	.+0      	; 0x12fa <GPIO_writePin+0x8>
    12fa:	0f 92       	push	r0
    12fc:	cd b7       	in	r28, 0x3d	; 61
    12fe:	de b7       	in	r29, 0x3e	; 62
    1300:	89 83       	std	Y+1, r24	; 0x01
    1302:	6a 83       	std	Y+2, r22	; 0x02
    1304:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1306:	8a 81       	ldd	r24, Y+2	; 0x02
    1308:	88 30       	cpi	r24, 0x08	; 8
    130a:	08 f0       	brcs	.+2      	; 0x130e <GPIO_writePin+0x1c>
    130c:	d5 c0       	rjmp	.+426    	; 0x14b8 <GPIO_writePin+0x1c6>
    130e:	89 81       	ldd	r24, Y+1	; 0x01
    1310:	84 30       	cpi	r24, 0x04	; 4
    1312:	08 f0       	brcs	.+2      	; 0x1316 <GPIO_writePin+0x24>
    1314:	d1 c0       	rjmp	.+418    	; 0x14b8 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1316:	89 81       	ldd	r24, Y+1	; 0x01
    1318:	28 2f       	mov	r18, r24
    131a:	30 e0       	ldi	r19, 0x00	; 0
    131c:	3d 83       	std	Y+5, r19	; 0x05
    131e:	2c 83       	std	Y+4, r18	; 0x04
    1320:	8c 81       	ldd	r24, Y+4	; 0x04
    1322:	9d 81       	ldd	r25, Y+5	; 0x05
    1324:	81 30       	cpi	r24, 0x01	; 1
    1326:	91 05       	cpc	r25, r1
    1328:	09 f4       	brne	.+2      	; 0x132c <GPIO_writePin+0x3a>
    132a:	43 c0       	rjmp	.+134    	; 0x13b2 <GPIO_writePin+0xc0>
    132c:	2c 81       	ldd	r18, Y+4	; 0x04
    132e:	3d 81       	ldd	r19, Y+5	; 0x05
    1330:	22 30       	cpi	r18, 0x02	; 2
    1332:	31 05       	cpc	r19, r1
    1334:	2c f4       	brge	.+10     	; 0x1340 <GPIO_writePin+0x4e>
    1336:	8c 81       	ldd	r24, Y+4	; 0x04
    1338:	9d 81       	ldd	r25, Y+5	; 0x05
    133a:	00 97       	sbiw	r24, 0x00	; 0
    133c:	71 f0       	breq	.+28     	; 0x135a <GPIO_writePin+0x68>
    133e:	bc c0       	rjmp	.+376    	; 0x14b8 <GPIO_writePin+0x1c6>
    1340:	2c 81       	ldd	r18, Y+4	; 0x04
    1342:	3d 81       	ldd	r19, Y+5	; 0x05
    1344:	22 30       	cpi	r18, 0x02	; 2
    1346:	31 05       	cpc	r19, r1
    1348:	09 f4       	brne	.+2      	; 0x134c <GPIO_writePin+0x5a>
    134a:	5f c0       	rjmp	.+190    	; 0x140a <GPIO_writePin+0x118>
    134c:	8c 81       	ldd	r24, Y+4	; 0x04
    134e:	9d 81       	ldd	r25, Y+5	; 0x05
    1350:	83 30       	cpi	r24, 0x03	; 3
    1352:	91 05       	cpc	r25, r1
    1354:	09 f4       	brne	.+2      	; 0x1358 <GPIO_writePin+0x66>
    1356:	85 c0       	rjmp	.+266    	; 0x1462 <GPIO_writePin+0x170>
    1358:	af c0       	rjmp	.+350    	; 0x14b8 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    135a:	8b 81       	ldd	r24, Y+3	; 0x03
    135c:	81 30       	cpi	r24, 0x01	; 1
    135e:	a1 f4       	brne	.+40     	; 0x1388 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1360:	ab e3       	ldi	r26, 0x3B	; 59
    1362:	b0 e0       	ldi	r27, 0x00	; 0
    1364:	eb e3       	ldi	r30, 0x3B	; 59
    1366:	f0 e0       	ldi	r31, 0x00	; 0
    1368:	80 81       	ld	r24, Z
    136a:	48 2f       	mov	r20, r24
    136c:	8a 81       	ldd	r24, Y+2	; 0x02
    136e:	28 2f       	mov	r18, r24
    1370:	30 e0       	ldi	r19, 0x00	; 0
    1372:	81 e0       	ldi	r24, 0x01	; 1
    1374:	90 e0       	ldi	r25, 0x00	; 0
    1376:	02 2e       	mov	r0, r18
    1378:	02 c0       	rjmp	.+4      	; 0x137e <GPIO_writePin+0x8c>
    137a:	88 0f       	add	r24, r24
    137c:	99 1f       	adc	r25, r25
    137e:	0a 94       	dec	r0
    1380:	e2 f7       	brpl	.-8      	; 0x137a <GPIO_writePin+0x88>
    1382:	84 2b       	or	r24, r20
    1384:	8c 93       	st	X, r24
    1386:	98 c0       	rjmp	.+304    	; 0x14b8 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1388:	ab e3       	ldi	r26, 0x3B	; 59
    138a:	b0 e0       	ldi	r27, 0x00	; 0
    138c:	eb e3       	ldi	r30, 0x3B	; 59
    138e:	f0 e0       	ldi	r31, 0x00	; 0
    1390:	80 81       	ld	r24, Z
    1392:	48 2f       	mov	r20, r24
    1394:	8a 81       	ldd	r24, Y+2	; 0x02
    1396:	28 2f       	mov	r18, r24
    1398:	30 e0       	ldi	r19, 0x00	; 0
    139a:	81 e0       	ldi	r24, 0x01	; 1
    139c:	90 e0       	ldi	r25, 0x00	; 0
    139e:	02 2e       	mov	r0, r18
    13a0:	02 c0       	rjmp	.+4      	; 0x13a6 <GPIO_writePin+0xb4>
    13a2:	88 0f       	add	r24, r24
    13a4:	99 1f       	adc	r25, r25
    13a6:	0a 94       	dec	r0
    13a8:	e2 f7       	brpl	.-8      	; 0x13a2 <GPIO_writePin+0xb0>
    13aa:	80 95       	com	r24
    13ac:	84 23       	and	r24, r20
    13ae:	8c 93       	st	X, r24
    13b0:	83 c0       	rjmp	.+262    	; 0x14b8 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    13b2:	8b 81       	ldd	r24, Y+3	; 0x03
    13b4:	81 30       	cpi	r24, 0x01	; 1
    13b6:	a1 f4       	brne	.+40     	; 0x13e0 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    13b8:	a8 e3       	ldi	r26, 0x38	; 56
    13ba:	b0 e0       	ldi	r27, 0x00	; 0
    13bc:	e8 e3       	ldi	r30, 0x38	; 56
    13be:	f0 e0       	ldi	r31, 0x00	; 0
    13c0:	80 81       	ld	r24, Z
    13c2:	48 2f       	mov	r20, r24
    13c4:	8a 81       	ldd	r24, Y+2	; 0x02
    13c6:	28 2f       	mov	r18, r24
    13c8:	30 e0       	ldi	r19, 0x00	; 0
    13ca:	81 e0       	ldi	r24, 0x01	; 1
    13cc:	90 e0       	ldi	r25, 0x00	; 0
    13ce:	02 2e       	mov	r0, r18
    13d0:	02 c0       	rjmp	.+4      	; 0x13d6 <GPIO_writePin+0xe4>
    13d2:	88 0f       	add	r24, r24
    13d4:	99 1f       	adc	r25, r25
    13d6:	0a 94       	dec	r0
    13d8:	e2 f7       	brpl	.-8      	; 0x13d2 <GPIO_writePin+0xe0>
    13da:	84 2b       	or	r24, r20
    13dc:	8c 93       	st	X, r24
    13de:	6c c0       	rjmp	.+216    	; 0x14b8 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    13e0:	a8 e3       	ldi	r26, 0x38	; 56
    13e2:	b0 e0       	ldi	r27, 0x00	; 0
    13e4:	e8 e3       	ldi	r30, 0x38	; 56
    13e6:	f0 e0       	ldi	r31, 0x00	; 0
    13e8:	80 81       	ld	r24, Z
    13ea:	48 2f       	mov	r20, r24
    13ec:	8a 81       	ldd	r24, Y+2	; 0x02
    13ee:	28 2f       	mov	r18, r24
    13f0:	30 e0       	ldi	r19, 0x00	; 0
    13f2:	81 e0       	ldi	r24, 0x01	; 1
    13f4:	90 e0       	ldi	r25, 0x00	; 0
    13f6:	02 2e       	mov	r0, r18
    13f8:	02 c0       	rjmp	.+4      	; 0x13fe <GPIO_writePin+0x10c>
    13fa:	88 0f       	add	r24, r24
    13fc:	99 1f       	adc	r25, r25
    13fe:	0a 94       	dec	r0
    1400:	e2 f7       	brpl	.-8      	; 0x13fa <GPIO_writePin+0x108>
    1402:	80 95       	com	r24
    1404:	84 23       	and	r24, r20
    1406:	8c 93       	st	X, r24
    1408:	57 c0       	rjmp	.+174    	; 0x14b8 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    140a:	8b 81       	ldd	r24, Y+3	; 0x03
    140c:	81 30       	cpi	r24, 0x01	; 1
    140e:	a1 f4       	brne	.+40     	; 0x1438 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1410:	a5 e3       	ldi	r26, 0x35	; 53
    1412:	b0 e0       	ldi	r27, 0x00	; 0
    1414:	e5 e3       	ldi	r30, 0x35	; 53
    1416:	f0 e0       	ldi	r31, 0x00	; 0
    1418:	80 81       	ld	r24, Z
    141a:	48 2f       	mov	r20, r24
    141c:	8a 81       	ldd	r24, Y+2	; 0x02
    141e:	28 2f       	mov	r18, r24
    1420:	30 e0       	ldi	r19, 0x00	; 0
    1422:	81 e0       	ldi	r24, 0x01	; 1
    1424:	90 e0       	ldi	r25, 0x00	; 0
    1426:	02 2e       	mov	r0, r18
    1428:	02 c0       	rjmp	.+4      	; 0x142e <GPIO_writePin+0x13c>
    142a:	88 0f       	add	r24, r24
    142c:	99 1f       	adc	r25, r25
    142e:	0a 94       	dec	r0
    1430:	e2 f7       	brpl	.-8      	; 0x142a <GPIO_writePin+0x138>
    1432:	84 2b       	or	r24, r20
    1434:	8c 93       	st	X, r24
    1436:	40 c0       	rjmp	.+128    	; 0x14b8 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1438:	a5 e3       	ldi	r26, 0x35	; 53
    143a:	b0 e0       	ldi	r27, 0x00	; 0
    143c:	e5 e3       	ldi	r30, 0x35	; 53
    143e:	f0 e0       	ldi	r31, 0x00	; 0
    1440:	80 81       	ld	r24, Z
    1442:	48 2f       	mov	r20, r24
    1444:	8a 81       	ldd	r24, Y+2	; 0x02
    1446:	28 2f       	mov	r18, r24
    1448:	30 e0       	ldi	r19, 0x00	; 0
    144a:	81 e0       	ldi	r24, 0x01	; 1
    144c:	90 e0       	ldi	r25, 0x00	; 0
    144e:	02 2e       	mov	r0, r18
    1450:	02 c0       	rjmp	.+4      	; 0x1456 <GPIO_writePin+0x164>
    1452:	88 0f       	add	r24, r24
    1454:	99 1f       	adc	r25, r25
    1456:	0a 94       	dec	r0
    1458:	e2 f7       	brpl	.-8      	; 0x1452 <GPIO_writePin+0x160>
    145a:	80 95       	com	r24
    145c:	84 23       	and	r24, r20
    145e:	8c 93       	st	X, r24
    1460:	2b c0       	rjmp	.+86     	; 0x14b8 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1462:	8b 81       	ldd	r24, Y+3	; 0x03
    1464:	81 30       	cpi	r24, 0x01	; 1
    1466:	a1 f4       	brne	.+40     	; 0x1490 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1468:	a2 e3       	ldi	r26, 0x32	; 50
    146a:	b0 e0       	ldi	r27, 0x00	; 0
    146c:	e2 e3       	ldi	r30, 0x32	; 50
    146e:	f0 e0       	ldi	r31, 0x00	; 0
    1470:	80 81       	ld	r24, Z
    1472:	48 2f       	mov	r20, r24
    1474:	8a 81       	ldd	r24, Y+2	; 0x02
    1476:	28 2f       	mov	r18, r24
    1478:	30 e0       	ldi	r19, 0x00	; 0
    147a:	81 e0       	ldi	r24, 0x01	; 1
    147c:	90 e0       	ldi	r25, 0x00	; 0
    147e:	02 2e       	mov	r0, r18
    1480:	02 c0       	rjmp	.+4      	; 0x1486 <GPIO_writePin+0x194>
    1482:	88 0f       	add	r24, r24
    1484:	99 1f       	adc	r25, r25
    1486:	0a 94       	dec	r0
    1488:	e2 f7       	brpl	.-8      	; 0x1482 <GPIO_writePin+0x190>
    148a:	84 2b       	or	r24, r20
    148c:	8c 93       	st	X, r24
    148e:	14 c0       	rjmp	.+40     	; 0x14b8 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1490:	a2 e3       	ldi	r26, 0x32	; 50
    1492:	b0 e0       	ldi	r27, 0x00	; 0
    1494:	e2 e3       	ldi	r30, 0x32	; 50
    1496:	f0 e0       	ldi	r31, 0x00	; 0
    1498:	80 81       	ld	r24, Z
    149a:	48 2f       	mov	r20, r24
    149c:	8a 81       	ldd	r24, Y+2	; 0x02
    149e:	28 2f       	mov	r18, r24
    14a0:	30 e0       	ldi	r19, 0x00	; 0
    14a2:	81 e0       	ldi	r24, 0x01	; 1
    14a4:	90 e0       	ldi	r25, 0x00	; 0
    14a6:	02 2e       	mov	r0, r18
    14a8:	02 c0       	rjmp	.+4      	; 0x14ae <GPIO_writePin+0x1bc>
    14aa:	88 0f       	add	r24, r24
    14ac:	99 1f       	adc	r25, r25
    14ae:	0a 94       	dec	r0
    14b0:	e2 f7       	brpl	.-8      	; 0x14aa <GPIO_writePin+0x1b8>
    14b2:	80 95       	com	r24
    14b4:	84 23       	and	r24, r20
    14b6:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    14b8:	0f 90       	pop	r0
    14ba:	0f 90       	pop	r0
    14bc:	0f 90       	pop	r0
    14be:	0f 90       	pop	r0
    14c0:	0f 90       	pop	r0
    14c2:	cf 91       	pop	r28
    14c4:	df 91       	pop	r29
    14c6:	08 95       	ret

000014c8 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    14c8:	df 93       	push	r29
    14ca:	cf 93       	push	r28
    14cc:	00 d0       	rcall	.+0      	; 0x14ce <GPIO_readPin+0x6>
    14ce:	00 d0       	rcall	.+0      	; 0x14d0 <GPIO_readPin+0x8>
    14d0:	0f 92       	push	r0
    14d2:	cd b7       	in	r28, 0x3d	; 61
    14d4:	de b7       	in	r29, 0x3e	; 62
    14d6:	8a 83       	std	Y+2, r24	; 0x02
    14d8:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    14da:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    14dc:	8b 81       	ldd	r24, Y+3	; 0x03
    14de:	88 30       	cpi	r24, 0x08	; 8
    14e0:	08 f0       	brcs	.+2      	; 0x14e4 <GPIO_readPin+0x1c>
    14e2:	84 c0       	rjmp	.+264    	; 0x15ec <GPIO_readPin+0x124>
    14e4:	8a 81       	ldd	r24, Y+2	; 0x02
    14e6:	84 30       	cpi	r24, 0x04	; 4
    14e8:	08 f0       	brcs	.+2      	; 0x14ec <GPIO_readPin+0x24>
    14ea:	80 c0       	rjmp	.+256    	; 0x15ec <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    14ec:	8a 81       	ldd	r24, Y+2	; 0x02
    14ee:	28 2f       	mov	r18, r24
    14f0:	30 e0       	ldi	r19, 0x00	; 0
    14f2:	3d 83       	std	Y+5, r19	; 0x05
    14f4:	2c 83       	std	Y+4, r18	; 0x04
    14f6:	4c 81       	ldd	r20, Y+4	; 0x04
    14f8:	5d 81       	ldd	r21, Y+5	; 0x05
    14fa:	41 30       	cpi	r20, 0x01	; 1
    14fc:	51 05       	cpc	r21, r1
    14fe:	79 f1       	breq	.+94     	; 0x155e <GPIO_readPin+0x96>
    1500:	8c 81       	ldd	r24, Y+4	; 0x04
    1502:	9d 81       	ldd	r25, Y+5	; 0x05
    1504:	82 30       	cpi	r24, 0x02	; 2
    1506:	91 05       	cpc	r25, r1
    1508:	34 f4       	brge	.+12     	; 0x1516 <GPIO_readPin+0x4e>
    150a:	2c 81       	ldd	r18, Y+4	; 0x04
    150c:	3d 81       	ldd	r19, Y+5	; 0x05
    150e:	21 15       	cp	r18, r1
    1510:	31 05       	cpc	r19, r1
    1512:	69 f0       	breq	.+26     	; 0x152e <GPIO_readPin+0x66>
    1514:	6b c0       	rjmp	.+214    	; 0x15ec <GPIO_readPin+0x124>
    1516:	4c 81       	ldd	r20, Y+4	; 0x04
    1518:	5d 81       	ldd	r21, Y+5	; 0x05
    151a:	42 30       	cpi	r20, 0x02	; 2
    151c:	51 05       	cpc	r21, r1
    151e:	b9 f1       	breq	.+110    	; 0x158e <GPIO_readPin+0xc6>
    1520:	8c 81       	ldd	r24, Y+4	; 0x04
    1522:	9d 81       	ldd	r25, Y+5	; 0x05
    1524:	83 30       	cpi	r24, 0x03	; 3
    1526:	91 05       	cpc	r25, r1
    1528:	09 f4       	brne	.+2      	; 0x152c <GPIO_readPin+0x64>
    152a:	49 c0       	rjmp	.+146    	; 0x15be <GPIO_readPin+0xf6>
    152c:	5f c0       	rjmp	.+190    	; 0x15ec <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    152e:	e9 e3       	ldi	r30, 0x39	; 57
    1530:	f0 e0       	ldi	r31, 0x00	; 0
    1532:	80 81       	ld	r24, Z
    1534:	28 2f       	mov	r18, r24
    1536:	30 e0       	ldi	r19, 0x00	; 0
    1538:	8b 81       	ldd	r24, Y+3	; 0x03
    153a:	88 2f       	mov	r24, r24
    153c:	90 e0       	ldi	r25, 0x00	; 0
    153e:	a9 01       	movw	r20, r18
    1540:	02 c0       	rjmp	.+4      	; 0x1546 <GPIO_readPin+0x7e>
    1542:	55 95       	asr	r21
    1544:	47 95       	ror	r20
    1546:	8a 95       	dec	r24
    1548:	e2 f7       	brpl	.-8      	; 0x1542 <GPIO_readPin+0x7a>
    154a:	ca 01       	movw	r24, r20
    154c:	81 70       	andi	r24, 0x01	; 1
    154e:	90 70       	andi	r25, 0x00	; 0
    1550:	88 23       	and	r24, r24
    1552:	19 f0       	breq	.+6      	; 0x155a <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1554:	81 e0       	ldi	r24, 0x01	; 1
    1556:	89 83       	std	Y+1, r24	; 0x01
    1558:	49 c0       	rjmp	.+146    	; 0x15ec <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    155a:	19 82       	std	Y+1, r1	; 0x01
    155c:	47 c0       	rjmp	.+142    	; 0x15ec <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    155e:	e6 e3       	ldi	r30, 0x36	; 54
    1560:	f0 e0       	ldi	r31, 0x00	; 0
    1562:	80 81       	ld	r24, Z
    1564:	28 2f       	mov	r18, r24
    1566:	30 e0       	ldi	r19, 0x00	; 0
    1568:	8b 81       	ldd	r24, Y+3	; 0x03
    156a:	88 2f       	mov	r24, r24
    156c:	90 e0       	ldi	r25, 0x00	; 0
    156e:	a9 01       	movw	r20, r18
    1570:	02 c0       	rjmp	.+4      	; 0x1576 <GPIO_readPin+0xae>
    1572:	55 95       	asr	r21
    1574:	47 95       	ror	r20
    1576:	8a 95       	dec	r24
    1578:	e2 f7       	brpl	.-8      	; 0x1572 <GPIO_readPin+0xaa>
    157a:	ca 01       	movw	r24, r20
    157c:	81 70       	andi	r24, 0x01	; 1
    157e:	90 70       	andi	r25, 0x00	; 0
    1580:	88 23       	and	r24, r24
    1582:	19 f0       	breq	.+6      	; 0x158a <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1584:	81 e0       	ldi	r24, 0x01	; 1
    1586:	89 83       	std	Y+1, r24	; 0x01
    1588:	31 c0       	rjmp	.+98     	; 0x15ec <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    158a:	19 82       	std	Y+1, r1	; 0x01
    158c:	2f c0       	rjmp	.+94     	; 0x15ec <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    158e:	e3 e3       	ldi	r30, 0x33	; 51
    1590:	f0 e0       	ldi	r31, 0x00	; 0
    1592:	80 81       	ld	r24, Z
    1594:	28 2f       	mov	r18, r24
    1596:	30 e0       	ldi	r19, 0x00	; 0
    1598:	8b 81       	ldd	r24, Y+3	; 0x03
    159a:	88 2f       	mov	r24, r24
    159c:	90 e0       	ldi	r25, 0x00	; 0
    159e:	a9 01       	movw	r20, r18
    15a0:	02 c0       	rjmp	.+4      	; 0x15a6 <GPIO_readPin+0xde>
    15a2:	55 95       	asr	r21
    15a4:	47 95       	ror	r20
    15a6:	8a 95       	dec	r24
    15a8:	e2 f7       	brpl	.-8      	; 0x15a2 <GPIO_readPin+0xda>
    15aa:	ca 01       	movw	r24, r20
    15ac:	81 70       	andi	r24, 0x01	; 1
    15ae:	90 70       	andi	r25, 0x00	; 0
    15b0:	88 23       	and	r24, r24
    15b2:	19 f0       	breq	.+6      	; 0x15ba <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    15b4:	81 e0       	ldi	r24, 0x01	; 1
    15b6:	89 83       	std	Y+1, r24	; 0x01
    15b8:	19 c0       	rjmp	.+50     	; 0x15ec <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    15ba:	19 82       	std	Y+1, r1	; 0x01
    15bc:	17 c0       	rjmp	.+46     	; 0x15ec <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    15be:	e0 e3       	ldi	r30, 0x30	; 48
    15c0:	f0 e0       	ldi	r31, 0x00	; 0
    15c2:	80 81       	ld	r24, Z
    15c4:	28 2f       	mov	r18, r24
    15c6:	30 e0       	ldi	r19, 0x00	; 0
    15c8:	8b 81       	ldd	r24, Y+3	; 0x03
    15ca:	88 2f       	mov	r24, r24
    15cc:	90 e0       	ldi	r25, 0x00	; 0
    15ce:	a9 01       	movw	r20, r18
    15d0:	02 c0       	rjmp	.+4      	; 0x15d6 <GPIO_readPin+0x10e>
    15d2:	55 95       	asr	r21
    15d4:	47 95       	ror	r20
    15d6:	8a 95       	dec	r24
    15d8:	e2 f7       	brpl	.-8      	; 0x15d2 <GPIO_readPin+0x10a>
    15da:	ca 01       	movw	r24, r20
    15dc:	81 70       	andi	r24, 0x01	; 1
    15de:	90 70       	andi	r25, 0x00	; 0
    15e0:	88 23       	and	r24, r24
    15e2:	19 f0       	breq	.+6      	; 0x15ea <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    15e4:	81 e0       	ldi	r24, 0x01	; 1
    15e6:	89 83       	std	Y+1, r24	; 0x01
    15e8:	01 c0       	rjmp	.+2      	; 0x15ec <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    15ea:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    15ec:	89 81       	ldd	r24, Y+1	; 0x01
}
    15ee:	0f 90       	pop	r0
    15f0:	0f 90       	pop	r0
    15f2:	0f 90       	pop	r0
    15f4:	0f 90       	pop	r0
    15f6:	0f 90       	pop	r0
    15f8:	cf 91       	pop	r28
    15fa:	df 91       	pop	r29
    15fc:	08 95       	ret

000015fe <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    15fe:	df 93       	push	r29
    1600:	cf 93       	push	r28
    1602:	00 d0       	rcall	.+0      	; 0x1604 <GPIO_setupPortDirection+0x6>
    1604:	00 d0       	rcall	.+0      	; 0x1606 <GPIO_setupPortDirection+0x8>
    1606:	cd b7       	in	r28, 0x3d	; 61
    1608:	de b7       	in	r29, 0x3e	; 62
    160a:	89 83       	std	Y+1, r24	; 0x01
    160c:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    160e:	89 81       	ldd	r24, Y+1	; 0x01
    1610:	84 30       	cpi	r24, 0x04	; 4
    1612:	90 f5       	brcc	.+100    	; 0x1678 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1614:	89 81       	ldd	r24, Y+1	; 0x01
    1616:	28 2f       	mov	r18, r24
    1618:	30 e0       	ldi	r19, 0x00	; 0
    161a:	3c 83       	std	Y+4, r19	; 0x04
    161c:	2b 83       	std	Y+3, r18	; 0x03
    161e:	8b 81       	ldd	r24, Y+3	; 0x03
    1620:	9c 81       	ldd	r25, Y+4	; 0x04
    1622:	81 30       	cpi	r24, 0x01	; 1
    1624:	91 05       	cpc	r25, r1
    1626:	d1 f0       	breq	.+52     	; 0x165c <GPIO_setupPortDirection+0x5e>
    1628:	2b 81       	ldd	r18, Y+3	; 0x03
    162a:	3c 81       	ldd	r19, Y+4	; 0x04
    162c:	22 30       	cpi	r18, 0x02	; 2
    162e:	31 05       	cpc	r19, r1
    1630:	2c f4       	brge	.+10     	; 0x163c <GPIO_setupPortDirection+0x3e>
    1632:	8b 81       	ldd	r24, Y+3	; 0x03
    1634:	9c 81       	ldd	r25, Y+4	; 0x04
    1636:	00 97       	sbiw	r24, 0x00	; 0
    1638:	61 f0       	breq	.+24     	; 0x1652 <GPIO_setupPortDirection+0x54>
    163a:	1e c0       	rjmp	.+60     	; 0x1678 <GPIO_setupPortDirection+0x7a>
    163c:	2b 81       	ldd	r18, Y+3	; 0x03
    163e:	3c 81       	ldd	r19, Y+4	; 0x04
    1640:	22 30       	cpi	r18, 0x02	; 2
    1642:	31 05       	cpc	r19, r1
    1644:	81 f0       	breq	.+32     	; 0x1666 <GPIO_setupPortDirection+0x68>
    1646:	8b 81       	ldd	r24, Y+3	; 0x03
    1648:	9c 81       	ldd	r25, Y+4	; 0x04
    164a:	83 30       	cpi	r24, 0x03	; 3
    164c:	91 05       	cpc	r25, r1
    164e:	81 f0       	breq	.+32     	; 0x1670 <GPIO_setupPortDirection+0x72>
    1650:	13 c0       	rjmp	.+38     	; 0x1678 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1652:	ea e3       	ldi	r30, 0x3A	; 58
    1654:	f0 e0       	ldi	r31, 0x00	; 0
    1656:	8a 81       	ldd	r24, Y+2	; 0x02
    1658:	80 83       	st	Z, r24
    165a:	0e c0       	rjmp	.+28     	; 0x1678 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    165c:	e7 e3       	ldi	r30, 0x37	; 55
    165e:	f0 e0       	ldi	r31, 0x00	; 0
    1660:	8a 81       	ldd	r24, Y+2	; 0x02
    1662:	80 83       	st	Z, r24
    1664:	09 c0       	rjmp	.+18     	; 0x1678 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1666:	e4 e3       	ldi	r30, 0x34	; 52
    1668:	f0 e0       	ldi	r31, 0x00	; 0
    166a:	8a 81       	ldd	r24, Y+2	; 0x02
    166c:	80 83       	st	Z, r24
    166e:	04 c0       	rjmp	.+8      	; 0x1678 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1670:	e1 e3       	ldi	r30, 0x31	; 49
    1672:	f0 e0       	ldi	r31, 0x00	; 0
    1674:	8a 81       	ldd	r24, Y+2	; 0x02
    1676:	80 83       	st	Z, r24
			break;
		}
	}
}
    1678:	0f 90       	pop	r0
    167a:	0f 90       	pop	r0
    167c:	0f 90       	pop	r0
    167e:	0f 90       	pop	r0
    1680:	cf 91       	pop	r28
    1682:	df 91       	pop	r29
    1684:	08 95       	ret

00001686 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1686:	df 93       	push	r29
    1688:	cf 93       	push	r28
    168a:	00 d0       	rcall	.+0      	; 0x168c <GPIO_writePort+0x6>
    168c:	00 d0       	rcall	.+0      	; 0x168e <GPIO_writePort+0x8>
    168e:	cd b7       	in	r28, 0x3d	; 61
    1690:	de b7       	in	r29, 0x3e	; 62
    1692:	89 83       	std	Y+1, r24	; 0x01
    1694:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1696:	89 81       	ldd	r24, Y+1	; 0x01
    1698:	84 30       	cpi	r24, 0x04	; 4
    169a:	90 f5       	brcc	.+100    	; 0x1700 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    169c:	89 81       	ldd	r24, Y+1	; 0x01
    169e:	28 2f       	mov	r18, r24
    16a0:	30 e0       	ldi	r19, 0x00	; 0
    16a2:	3c 83       	std	Y+4, r19	; 0x04
    16a4:	2b 83       	std	Y+3, r18	; 0x03
    16a6:	8b 81       	ldd	r24, Y+3	; 0x03
    16a8:	9c 81       	ldd	r25, Y+4	; 0x04
    16aa:	81 30       	cpi	r24, 0x01	; 1
    16ac:	91 05       	cpc	r25, r1
    16ae:	d1 f0       	breq	.+52     	; 0x16e4 <GPIO_writePort+0x5e>
    16b0:	2b 81       	ldd	r18, Y+3	; 0x03
    16b2:	3c 81       	ldd	r19, Y+4	; 0x04
    16b4:	22 30       	cpi	r18, 0x02	; 2
    16b6:	31 05       	cpc	r19, r1
    16b8:	2c f4       	brge	.+10     	; 0x16c4 <GPIO_writePort+0x3e>
    16ba:	8b 81       	ldd	r24, Y+3	; 0x03
    16bc:	9c 81       	ldd	r25, Y+4	; 0x04
    16be:	00 97       	sbiw	r24, 0x00	; 0
    16c0:	61 f0       	breq	.+24     	; 0x16da <GPIO_writePort+0x54>
    16c2:	1e c0       	rjmp	.+60     	; 0x1700 <GPIO_writePort+0x7a>
    16c4:	2b 81       	ldd	r18, Y+3	; 0x03
    16c6:	3c 81       	ldd	r19, Y+4	; 0x04
    16c8:	22 30       	cpi	r18, 0x02	; 2
    16ca:	31 05       	cpc	r19, r1
    16cc:	81 f0       	breq	.+32     	; 0x16ee <GPIO_writePort+0x68>
    16ce:	8b 81       	ldd	r24, Y+3	; 0x03
    16d0:	9c 81       	ldd	r25, Y+4	; 0x04
    16d2:	83 30       	cpi	r24, 0x03	; 3
    16d4:	91 05       	cpc	r25, r1
    16d6:	81 f0       	breq	.+32     	; 0x16f8 <GPIO_writePort+0x72>
    16d8:	13 c0       	rjmp	.+38     	; 0x1700 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    16da:	eb e3       	ldi	r30, 0x3B	; 59
    16dc:	f0 e0       	ldi	r31, 0x00	; 0
    16de:	8a 81       	ldd	r24, Y+2	; 0x02
    16e0:	80 83       	st	Z, r24
    16e2:	0e c0       	rjmp	.+28     	; 0x1700 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    16e4:	e8 e3       	ldi	r30, 0x38	; 56
    16e6:	f0 e0       	ldi	r31, 0x00	; 0
    16e8:	8a 81       	ldd	r24, Y+2	; 0x02
    16ea:	80 83       	st	Z, r24
    16ec:	09 c0       	rjmp	.+18     	; 0x1700 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    16ee:	e5 e3       	ldi	r30, 0x35	; 53
    16f0:	f0 e0       	ldi	r31, 0x00	; 0
    16f2:	8a 81       	ldd	r24, Y+2	; 0x02
    16f4:	80 83       	st	Z, r24
    16f6:	04 c0       	rjmp	.+8      	; 0x1700 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    16f8:	e2 e3       	ldi	r30, 0x32	; 50
    16fa:	f0 e0       	ldi	r31, 0x00	; 0
    16fc:	8a 81       	ldd	r24, Y+2	; 0x02
    16fe:	80 83       	st	Z, r24
			break;
		}
	}
}
    1700:	0f 90       	pop	r0
    1702:	0f 90       	pop	r0
    1704:	0f 90       	pop	r0
    1706:	0f 90       	pop	r0
    1708:	cf 91       	pop	r28
    170a:	df 91       	pop	r29
    170c:	08 95       	ret

0000170e <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    170e:	df 93       	push	r29
    1710:	cf 93       	push	r28
    1712:	00 d0       	rcall	.+0      	; 0x1714 <GPIO_readPort+0x6>
    1714:	00 d0       	rcall	.+0      	; 0x1716 <GPIO_readPort+0x8>
    1716:	cd b7       	in	r28, 0x3d	; 61
    1718:	de b7       	in	r29, 0x3e	; 62
    171a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    171c:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    171e:	8a 81       	ldd	r24, Y+2	; 0x02
    1720:	84 30       	cpi	r24, 0x04	; 4
    1722:	90 f5       	brcc	.+100    	; 0x1788 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1724:	8a 81       	ldd	r24, Y+2	; 0x02
    1726:	28 2f       	mov	r18, r24
    1728:	30 e0       	ldi	r19, 0x00	; 0
    172a:	3c 83       	std	Y+4, r19	; 0x04
    172c:	2b 83       	std	Y+3, r18	; 0x03
    172e:	8b 81       	ldd	r24, Y+3	; 0x03
    1730:	9c 81       	ldd	r25, Y+4	; 0x04
    1732:	81 30       	cpi	r24, 0x01	; 1
    1734:	91 05       	cpc	r25, r1
    1736:	d1 f0       	breq	.+52     	; 0x176c <GPIO_readPort+0x5e>
    1738:	2b 81       	ldd	r18, Y+3	; 0x03
    173a:	3c 81       	ldd	r19, Y+4	; 0x04
    173c:	22 30       	cpi	r18, 0x02	; 2
    173e:	31 05       	cpc	r19, r1
    1740:	2c f4       	brge	.+10     	; 0x174c <GPIO_readPort+0x3e>
    1742:	8b 81       	ldd	r24, Y+3	; 0x03
    1744:	9c 81       	ldd	r25, Y+4	; 0x04
    1746:	00 97       	sbiw	r24, 0x00	; 0
    1748:	61 f0       	breq	.+24     	; 0x1762 <GPIO_readPort+0x54>
    174a:	1e c0       	rjmp	.+60     	; 0x1788 <GPIO_readPort+0x7a>
    174c:	2b 81       	ldd	r18, Y+3	; 0x03
    174e:	3c 81       	ldd	r19, Y+4	; 0x04
    1750:	22 30       	cpi	r18, 0x02	; 2
    1752:	31 05       	cpc	r19, r1
    1754:	81 f0       	breq	.+32     	; 0x1776 <GPIO_readPort+0x68>
    1756:	8b 81       	ldd	r24, Y+3	; 0x03
    1758:	9c 81       	ldd	r25, Y+4	; 0x04
    175a:	83 30       	cpi	r24, 0x03	; 3
    175c:	91 05       	cpc	r25, r1
    175e:	81 f0       	breq	.+32     	; 0x1780 <GPIO_readPort+0x72>
    1760:	13 c0       	rjmp	.+38     	; 0x1788 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1762:	e9 e3       	ldi	r30, 0x39	; 57
    1764:	f0 e0       	ldi	r31, 0x00	; 0
    1766:	80 81       	ld	r24, Z
    1768:	89 83       	std	Y+1, r24	; 0x01
    176a:	0e c0       	rjmp	.+28     	; 0x1788 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    176c:	e6 e3       	ldi	r30, 0x36	; 54
    176e:	f0 e0       	ldi	r31, 0x00	; 0
    1770:	80 81       	ld	r24, Z
    1772:	89 83       	std	Y+1, r24	; 0x01
    1774:	09 c0       	rjmp	.+18     	; 0x1788 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1776:	e3 e3       	ldi	r30, 0x33	; 51
    1778:	f0 e0       	ldi	r31, 0x00	; 0
    177a:	80 81       	ld	r24, Z
    177c:	89 83       	std	Y+1, r24	; 0x01
    177e:	04 c0       	rjmp	.+8      	; 0x1788 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1780:	e0 e3       	ldi	r30, 0x30	; 48
    1782:	f0 e0       	ldi	r31, 0x00	; 0
    1784:	80 81       	ld	r24, Z
    1786:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1788:	89 81       	ldd	r24, Y+1	; 0x01
}
    178a:	0f 90       	pop	r0
    178c:	0f 90       	pop	r0
    178e:	0f 90       	pop	r0
    1790:	0f 90       	pop	r0
    1792:	cf 91       	pop	r28
    1794:	df 91       	pop	r29
    1796:	08 95       	ret

00001798 <UART_init>:
 * Functional responsible for Initialize the UART device by:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(UART_ConfigType *config) {
    1798:	df 93       	push	r29
    179a:	cf 93       	push	r28
    179c:	00 d0       	rcall	.+0      	; 0x179e <UART_init+0x6>
    179e:	00 d0       	rcall	.+0      	; 0x17a0 <UART_init+0x8>
    17a0:	cd b7       	in	r28, 0x3d	; 61
    17a2:	de b7       	in	r29, 0x3e	; 62
    17a4:	9c 83       	std	Y+4, r25	; 0x04
    17a6:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    17a8:	1a 82       	std	Y+2, r1	; 0x02
    17aa:	19 82       	std	Y+1, r1	; 0x01
	/* U2X = 1 for double transmission speed */
	UCSRA = (1 << U2X);
    17ac:	eb e2       	ldi	r30, 0x2B	; 43
    17ae:	f0 e0       	ldi	r31, 0x00	; 0
    17b0:	82 e0       	ldi	r24, 0x02	; 2
    17b2:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/
	UCSRB = (1 << RXEN) | (1 << TXEN);
    17b4:	ea e2       	ldi	r30, 0x2A	; 42
    17b6:	f0 e0       	ldi	r31, 0x00	; 0
    17b8:	88 e1       	ldi	r24, 0x18	; 24
    17ba:	80 83       	st	Z, r24
	 * USBS    = 0 One stop bit
	 * USBS    = 1 Two stop bits
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/
	UCSRC = (1 << URSEL) ;
    17bc:	e0 e4       	ldi	r30, 0x40	; 64
    17be:	f0 e0       	ldi	r31, 0x00	; 0
    17c0:	80 e8       	ldi	r24, 0x80	; 128
    17c2:	80 83       	st	Z, r24
	// Set data bits
	    if (config->UART_BitDateType == UART_8Bit) {
    17c4:	eb 81       	ldd	r30, Y+3	; 0x03
    17c6:	fc 81       	ldd	r31, Y+4	; 0x04
    17c8:	80 81       	ld	r24, Z
    17ca:	83 30       	cpi	r24, 0x03	; 3
    17cc:	41 f4       	brne	.+16     	; 0x17de <UART_init+0x46>
	        UCSRC |= (1 << UCSZ0) | (1 << UCSZ1);
    17ce:	a0 e4       	ldi	r26, 0x40	; 64
    17d0:	b0 e0       	ldi	r27, 0x00	; 0
    17d2:	e0 e4       	ldi	r30, 0x40	; 64
    17d4:	f0 e0       	ldi	r31, 0x00	; 0
    17d6:	80 81       	ld	r24, Z
    17d8:	86 60       	ori	r24, 0x06	; 6
    17da:	8c 93       	st	X, r24
    17dc:	0c c0       	rjmp	.+24     	; 0x17f6 <UART_init+0x5e>
	    } else if (config->UART_BitDateType == UART_7Bit) {
    17de:	eb 81       	ldd	r30, Y+3	; 0x03
    17e0:	fc 81       	ldd	r31, Y+4	; 0x04
    17e2:	80 81       	ld	r24, Z
    17e4:	82 30       	cpi	r24, 0x02	; 2
    17e6:	39 f4       	brne	.+14     	; 0x17f6 <UART_init+0x5e>
	        UCSRC |= (1 << UCSZ1);
    17e8:	a0 e4       	ldi	r26, 0x40	; 64
    17ea:	b0 e0       	ldi	r27, 0x00	; 0
    17ec:	e0 e4       	ldi	r30, 0x40	; 64
    17ee:	f0 e0       	ldi	r31, 0x00	; 0
    17f0:	80 81       	ld	r24, Z
    17f2:	84 60       	ori	r24, 0x04	; 4
    17f4:	8c 93       	st	X, r24
	    }

	    // Set parity mode
	       if (config->UART_ParityType == UART_Parity_Even) {
    17f6:	eb 81       	ldd	r30, Y+3	; 0x03
    17f8:	fc 81       	ldd	r31, Y+4	; 0x04
    17fa:	81 81       	ldd	r24, Z+1	; 0x01
    17fc:	82 30       	cpi	r24, 0x02	; 2
    17fe:	41 f4       	brne	.+16     	; 0x1810 <UART_init+0x78>
	           UCSRC |= (1 << UPM1);
    1800:	a0 e4       	ldi	r26, 0x40	; 64
    1802:	b0 e0       	ldi	r27, 0x00	; 0
    1804:	e0 e4       	ldi	r30, 0x40	; 64
    1806:	f0 e0       	ldi	r31, 0x00	; 0
    1808:	80 81       	ld	r24, Z
    180a:	80 62       	ori	r24, 0x20	; 32
    180c:	8c 93       	st	X, r24
    180e:	0c c0       	rjmp	.+24     	; 0x1828 <UART_init+0x90>
	       } else if (config->UART_ParityType == UART_Parity_Odd) {
    1810:	eb 81       	ldd	r30, Y+3	; 0x03
    1812:	fc 81       	ldd	r31, Y+4	; 0x04
    1814:	81 81       	ldd	r24, Z+1	; 0x01
    1816:	83 30       	cpi	r24, 0x03	; 3
    1818:	39 f4       	brne	.+14     	; 0x1828 <UART_init+0x90>
	           UCSRC |= (1 << UPM1) | (1 << UPM0);
    181a:	a0 e4       	ldi	r26, 0x40	; 64
    181c:	b0 e0       	ldi	r27, 0x00	; 0
    181e:	e0 e4       	ldi	r30, 0x40	; 64
    1820:	f0 e0       	ldi	r31, 0x00	; 0
    1822:	80 81       	ld	r24, Z
    1824:	80 63       	ori	r24, 0x30	; 48
    1826:	8c 93       	st	X, r24
	       }

	       // Set stop bits
	          if (config->UART_StopBitType == UART_TWO_STOP_BITS) {
    1828:	eb 81       	ldd	r30, Y+3	; 0x03
    182a:	fc 81       	ldd	r31, Y+4	; 0x04
    182c:	82 81       	ldd	r24, Z+2	; 0x02
    182e:	81 30       	cpi	r24, 0x01	; 1
    1830:	39 f4       	brne	.+14     	; 0x1840 <UART_init+0xa8>
	              UCSRC |= (1 << USBS);
    1832:	a0 e4       	ldi	r26, 0x40	; 64
    1834:	b0 e0       	ldi	r27, 0x00	; 0
    1836:	e0 e4       	ldi	r30, 0x40	; 64
    1838:	f0 e0       	ldi	r31, 0x00	; 0
    183a:	80 81       	ld	r24, Z
    183c:	88 60       	ori	r24, 0x08	; 8
    183e:	8c 93       	st	X, r24
	          }
	/* Calculate the UBRR register value */
	ubrr_value = (uint16) (((F_CPU / (config->BaudRateType * 8UL))) - 1);
    1840:	eb 81       	ldd	r30, Y+3	; 0x03
    1842:	fc 81       	ldd	r31, Y+4	; 0x04
    1844:	83 81       	ldd	r24, Z+3	; 0x03
    1846:	94 81       	ldd	r25, Z+4	; 0x04
    1848:	a5 81       	ldd	r26, Z+5	; 0x05
    184a:	b6 81       	ldd	r27, Z+6	; 0x06
    184c:	88 0f       	add	r24, r24
    184e:	99 1f       	adc	r25, r25
    1850:	aa 1f       	adc	r26, r26
    1852:	bb 1f       	adc	r27, r27
    1854:	88 0f       	add	r24, r24
    1856:	99 1f       	adc	r25, r25
    1858:	aa 1f       	adc	r26, r26
    185a:	bb 1f       	adc	r27, r27
    185c:	88 0f       	add	r24, r24
    185e:	99 1f       	adc	r25, r25
    1860:	aa 1f       	adc	r26, r26
    1862:	bb 1f       	adc	r27, r27
    1864:	9c 01       	movw	r18, r24
    1866:	ad 01       	movw	r20, r26
    1868:	80 e0       	ldi	r24, 0x00	; 0
    186a:	92 e1       	ldi	r25, 0x12	; 18
    186c:	aa e7       	ldi	r26, 0x7A	; 122
    186e:	b0 e0       	ldi	r27, 0x00	; 0
    1870:	bc 01       	movw	r22, r24
    1872:	cd 01       	movw	r24, r26
    1874:	0e 94 ca 1d 	call	0x3b94	; 0x3b94 <__udivmodsi4>
    1878:	da 01       	movw	r26, r20
    187a:	c9 01       	movw	r24, r18
    187c:	01 97       	sbiw	r24, 0x01	; 1
    187e:	9a 83       	std	Y+2, r25	; 0x02
    1880:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value >> 8;
    1882:	e0 e4       	ldi	r30, 0x40	; 64
    1884:	f0 e0       	ldi	r31, 0x00	; 0
    1886:	89 81       	ldd	r24, Y+1	; 0x01
    1888:	9a 81       	ldd	r25, Y+2	; 0x02
    188a:	89 2f       	mov	r24, r25
    188c:	99 27       	eor	r25, r25
    188e:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    1890:	e9 e2       	ldi	r30, 0x29	; 41
    1892:	f0 e0       	ldi	r31, 0x00	; 0
    1894:	89 81       	ldd	r24, Y+1	; 0x01
    1896:	80 83       	st	Z, r24
}
    1898:	0f 90       	pop	r0
    189a:	0f 90       	pop	r0
    189c:	0f 90       	pop	r0
    189e:	0f 90       	pop	r0
    18a0:	cf 91       	pop	r28
    18a2:	df 91       	pop	r29
    18a4:	08 95       	ret

000018a6 <UART_sendByte>:

/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data) {
    18a6:	df 93       	push	r29
    18a8:	cf 93       	push	r28
    18aa:	0f 92       	push	r0
    18ac:	cd b7       	in	r28, 0x3d	; 61
    18ae:	de b7       	in	r29, 0x3e	; 62
    18b0:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while (BIT_IS_CLEAR(UCSRA, UDRE)) {
    18b2:	eb e2       	ldi	r30, 0x2B	; 43
    18b4:	f0 e0       	ldi	r31, 0x00	; 0
    18b6:	80 81       	ld	r24, Z
    18b8:	88 2f       	mov	r24, r24
    18ba:	90 e0       	ldi	r25, 0x00	; 0
    18bc:	80 72       	andi	r24, 0x20	; 32
    18be:	90 70       	andi	r25, 0x00	; 0
    18c0:	00 97       	sbiw	r24, 0x00	; 0
    18c2:	b9 f3       	breq	.-18     	; 0x18b2 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    18c4:	ec e2       	ldi	r30, 0x2C	; 44
    18c6:	f0 e0       	ldi	r31, 0x00	; 0
    18c8:	89 81       	ldd	r24, Y+1	; 0x01
    18ca:	80 83       	st	Z, r24
	/************************* Another Method *************************
	 UDR = data;
	 while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	 SET_BIT(UCSRA,TXC); // Clear the TXC flag
	 *******************************************************************/
}
    18cc:	0f 90       	pop	r0
    18ce:	cf 91       	pop	r28
    18d0:	df 91       	pop	r29
    18d2:	08 95       	ret

000018d4 <UART_recieveByte>:

/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void) {
    18d4:	df 93       	push	r29
    18d6:	cf 93       	push	r28
    18d8:	cd b7       	in	r28, 0x3d	; 61
    18da:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while (BIT_IS_CLEAR(UCSRA, RXC)) {
    18dc:	eb e2       	ldi	r30, 0x2B	; 43
    18de:	f0 e0       	ldi	r31, 0x00	; 0
    18e0:	80 81       	ld	r24, Z
    18e2:	88 23       	and	r24, r24
    18e4:	dc f7       	brge	.-10     	; 0x18dc <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
	return UDR;
    18e6:	ec e2       	ldi	r30, 0x2C	; 44
    18e8:	f0 e0       	ldi	r31, 0x00	; 0
    18ea:	80 81       	ld	r24, Z
}
    18ec:	cf 91       	pop	r28
    18ee:	df 91       	pop	r29
    18f0:	08 95       	ret

000018f2 <UART_sendString>:

/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str) {
    18f2:	df 93       	push	r29
    18f4:	cf 93       	push	r28
    18f6:	00 d0       	rcall	.+0      	; 0x18f8 <UART_sendString+0x6>
    18f8:	0f 92       	push	r0
    18fa:	cd b7       	in	r28, 0x3d	; 61
    18fc:	de b7       	in	r29, 0x3e	; 62
    18fe:	9b 83       	std	Y+3, r25	; 0x03
    1900:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1902:	19 82       	std	Y+1, r1	; 0x01
    1904:	0e c0       	rjmp	.+28     	; 0x1922 <UART_sendString+0x30>

	/* Send the whole string */
	while (Str[i] != '\0') {
		UART_sendByte(Str[i]);
    1906:	89 81       	ldd	r24, Y+1	; 0x01
    1908:	28 2f       	mov	r18, r24
    190a:	30 e0       	ldi	r19, 0x00	; 0
    190c:	8a 81       	ldd	r24, Y+2	; 0x02
    190e:	9b 81       	ldd	r25, Y+3	; 0x03
    1910:	fc 01       	movw	r30, r24
    1912:	e2 0f       	add	r30, r18
    1914:	f3 1f       	adc	r31, r19
    1916:	80 81       	ld	r24, Z
    1918:	0e 94 53 0c 	call	0x18a6	; 0x18a6 <UART_sendByte>
		i++;
    191c:	89 81       	ldd	r24, Y+1	; 0x01
    191e:	8f 5f       	subi	r24, 0xFF	; 255
    1920:	89 83       	std	Y+1, r24	; 0x01
 */
void UART_sendString(const uint8 *Str) {
	uint8 i = 0;

	/* Send the whole string */
	while (Str[i] != '\0') {
    1922:	89 81       	ldd	r24, Y+1	; 0x01
    1924:	28 2f       	mov	r18, r24
    1926:	30 e0       	ldi	r19, 0x00	; 0
    1928:	8a 81       	ldd	r24, Y+2	; 0x02
    192a:	9b 81       	ldd	r25, Y+3	; 0x03
    192c:	fc 01       	movw	r30, r24
    192e:	e2 0f       	add	r30, r18
    1930:	f3 1f       	adc	r31, r19
    1932:	80 81       	ld	r24, Z
    1934:	88 23       	and	r24, r24
    1936:	39 f7       	brne	.-50     	; 0x1906 <UART_sendString+0x14>
	 {
	 UART_sendByte(*Str);
	 Str++;
	 }
	 *******************************************************************/
}
    1938:	0f 90       	pop	r0
    193a:	0f 90       	pop	r0
    193c:	0f 90       	pop	r0
    193e:	cf 91       	pop	r28
    1940:	df 91       	pop	r29
    1942:	08 95       	ret

00001944 <UART_receiveString>:

/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str) {
    1944:	0f 93       	push	r16
    1946:	1f 93       	push	r17
    1948:	df 93       	push	r29
    194a:	cf 93       	push	r28
    194c:	00 d0       	rcall	.+0      	; 0x194e <UART_receiveString+0xa>
    194e:	0f 92       	push	r0
    1950:	cd b7       	in	r28, 0x3d	; 61
    1952:	de b7       	in	r29, 0x3e	; 62
    1954:	9b 83       	std	Y+3, r25	; 0x03
    1956:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1958:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    195a:	89 81       	ldd	r24, Y+1	; 0x01
    195c:	28 2f       	mov	r18, r24
    195e:	30 e0       	ldi	r19, 0x00	; 0
    1960:	8a 81       	ldd	r24, Y+2	; 0x02
    1962:	9b 81       	ldd	r25, Y+3	; 0x03
    1964:	8c 01       	movw	r16, r24
    1966:	02 0f       	add	r16, r18
    1968:	13 1f       	adc	r17, r19
    196a:	0e 94 6a 0c 	call	0x18d4	; 0x18d4 <UART_recieveByte>
    196e:	f8 01       	movw	r30, r16
    1970:	80 83       	st	Z, r24
    1972:	0f c0       	rjmp	.+30     	; 0x1992 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while (Str[i] != '#') {
		i++;
    1974:	89 81       	ldd	r24, Y+1	; 0x01
    1976:	8f 5f       	subi	r24, 0xFF	; 255
    1978:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    197a:	89 81       	ldd	r24, Y+1	; 0x01
    197c:	28 2f       	mov	r18, r24
    197e:	30 e0       	ldi	r19, 0x00	; 0
    1980:	8a 81       	ldd	r24, Y+2	; 0x02
    1982:	9b 81       	ldd	r25, Y+3	; 0x03
    1984:	8c 01       	movw	r16, r24
    1986:	02 0f       	add	r16, r18
    1988:	13 1f       	adc	r17, r19
    198a:	0e 94 6a 0c 	call	0x18d4	; 0x18d4 <UART_recieveByte>
    198e:	f8 01       	movw	r30, r16
    1990:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while (Str[i] != '#') {
    1992:	89 81       	ldd	r24, Y+1	; 0x01
    1994:	28 2f       	mov	r18, r24
    1996:	30 e0       	ldi	r19, 0x00	; 0
    1998:	8a 81       	ldd	r24, Y+2	; 0x02
    199a:	9b 81       	ldd	r25, Y+3	; 0x03
    199c:	fc 01       	movw	r30, r24
    199e:	e2 0f       	add	r30, r18
    19a0:	f3 1f       	adc	r31, r19
    19a2:	80 81       	ld	r24, Z
    19a4:	83 32       	cpi	r24, 0x23	; 35
    19a6:	31 f7       	brne	.-52     	; 0x1974 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    19a8:	89 81       	ldd	r24, Y+1	; 0x01
    19aa:	28 2f       	mov	r18, r24
    19ac:	30 e0       	ldi	r19, 0x00	; 0
    19ae:	8a 81       	ldd	r24, Y+2	; 0x02
    19b0:	9b 81       	ldd	r25, Y+3	; 0x03
    19b2:	fc 01       	movw	r30, r24
    19b4:	e2 0f       	add	r30, r18
    19b6:	f3 1f       	adc	r31, r19
    19b8:	10 82       	st	Z, r1
}
    19ba:	0f 90       	pop	r0
    19bc:	0f 90       	pop	r0
    19be:	0f 90       	pop	r0
    19c0:	cf 91       	pop	r28
    19c2:	df 91       	pop	r29
    19c4:	1f 91       	pop	r17
    19c6:	0f 91       	pop	r16
    19c8:	08 95       	ret

000019ca <KEYPAD_getPressedKey>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

uint8 KEYPAD_getPressedKey(void)
{
    19ca:	df 93       	push	r29
    19cc:	cf 93       	push	r28
    19ce:	cd b7       	in	r28, 0x3d	; 61
    19d0:	de b7       	in	r29, 0x3e	; 62
    19d2:	60 97       	sbiw	r28, 0x10	; 16
    19d4:	0f b6       	in	r0, 0x3f	; 63
    19d6:	f8 94       	cli
    19d8:	de bf       	out	0x3e, r29	; 62
    19da:	0f be       	out	0x3f, r0	; 63
    19dc:	cd bf       	out	0x3d, r28	; 61
	uint8 col,row;
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, PIN_INPUT);
    19de:	81 e0       	ldi	r24, 0x01	; 1
    19e0:	60 e0       	ldi	r22, 0x00	; 0
    19e2:	40 e0       	ldi	r20, 0x00	; 0
    19e4:	0e 94 8e 08 	call	0x111c	; 0x111c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, PIN_INPUT);
    19e8:	81 e0       	ldi	r24, 0x01	; 1
    19ea:	61 e0       	ldi	r22, 0x01	; 1
    19ec:	40 e0       	ldi	r20, 0x00	; 0
    19ee:	0e 94 8e 08 	call	0x111c	; 0x111c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, PIN_INPUT);
    19f2:	81 e0       	ldi	r24, 0x01	; 1
    19f4:	62 e0       	ldi	r22, 0x02	; 2
    19f6:	40 e0       	ldi	r20, 0x00	; 0
    19f8:	0e 94 8e 08 	call	0x111c	; 0x111c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PIN_INPUT);
    19fc:	81 e0       	ldi	r24, 0x01	; 1
    19fe:	63 e0       	ldi	r22, 0x03	; 3
    1a00:	40 e0       	ldi	r20, 0x00	; 0
    1a02:	0e 94 8e 08 	call	0x111c	; 0x111c <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, PIN_INPUT);
    1a06:	81 e0       	ldi	r24, 0x01	; 1
    1a08:	64 e0       	ldi	r22, 0x04	; 4
    1a0a:	40 e0       	ldi	r20, 0x00	; 0
    1a0c:	0e 94 8e 08 	call	0x111c	; 0x111c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
    1a10:	81 e0       	ldi	r24, 0x01	; 1
    1a12:	65 e0       	ldi	r22, 0x05	; 5
    1a14:	40 e0       	ldi	r20, 0x00	; 0
    1a16:	0e 94 8e 08 	call	0x111c	; 0x111c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
    1a1a:	81 e0       	ldi	r24, 0x01	; 1
    1a1c:	66 e0       	ldi	r22, 0x06	; 6
    1a1e:	40 e0       	ldi	r20, 0x00	; 0
    1a20:	0e 94 8e 08 	call	0x111c	; 0x111c <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
    1a24:	81 e0       	ldi	r24, 0x01	; 1
    1a26:	67 e0       	ldi	r22, 0x07	; 7
    1a28:	40 e0       	ldi	r20, 0x00	; 0
    1a2a:	0e 94 8e 08 	call	0x111c	; 0x111c <GPIO_setupPinDirection>
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    1a2e:	1f 86       	std	Y+15, r1	; 0x0f
    1a30:	b4 c0       	rjmp	.+360    	; 0x1b9a <KEYPAD_getPressedKey+0x1d0>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this row will be output pin
			 */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
    1a32:	81 e0       	ldi	r24, 0x01	; 1
    1a34:	6f 85       	ldd	r22, Y+15	; 0x0f
    1a36:	41 e0       	ldi	r20, 0x01	; 1
    1a38:	0e 94 8e 08 	call	0x111c	; 0x111c <GPIO_setupPinDirection>

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    1a3c:	81 e0       	ldi	r24, 0x01	; 1
    1a3e:	6f 85       	ldd	r22, Y+15	; 0x0f
    1a40:	40 e0       	ldi	r20, 0x00	; 0
    1a42:	0e 94 79 09 	call	0x12f2	; 0x12f2 <GPIO_writePin>

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    1a46:	18 8a       	std	Y+16, r1	; 0x10
    1a48:	2b c0       	rjmp	.+86     	; 0x1aa0 <KEYPAD_getPressedKey+0xd6>
			{
				/* Check if the switch is pressed in this column */
				if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    1a4a:	88 89       	ldd	r24, Y+16	; 0x10
    1a4c:	98 2f       	mov	r25, r24
    1a4e:	9c 5f       	subi	r25, 0xFC	; 252
    1a50:	81 e0       	ldi	r24, 0x01	; 1
    1a52:	69 2f       	mov	r22, r25
    1a54:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <GPIO_readPin>
    1a58:	88 23       	and	r24, r24
    1a5a:	f9 f4       	brne	.+62     	; 0x1a9a <KEYPAD_getPressedKey+0xd0>
				{
					while(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED);
    1a5c:	88 89       	ldd	r24, Y+16	; 0x10
    1a5e:	98 2f       	mov	r25, r24
    1a60:	9c 5f       	subi	r25, 0xFC	; 252
    1a62:	81 e0       	ldi	r24, 0x01	; 1
    1a64:	69 2f       	mov	r22, r25
    1a66:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <GPIO_readPin>
    1a6a:	88 23       	and	r24, r24
    1a6c:	b9 f3       	breq	.-18     	; 0x1a5c <KEYPAD_getPressedKey+0x92>
						#endif
					#elif (KEYPAD_NUM_COLS == 4)
						#ifdef STANDARD_KEYPAD
							return ((row*KEYPAD_NUM_COLS)+col+1);
						#else
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    1a6e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a70:	88 2f       	mov	r24, r24
    1a72:	90 e0       	ldi	r25, 0x00	; 0
    1a74:	88 0f       	add	r24, r24
    1a76:	99 1f       	adc	r25, r25
    1a78:	88 0f       	add	r24, r24
    1a7a:	99 1f       	adc	r25, r25
    1a7c:	98 2f       	mov	r25, r24
    1a7e:	88 89       	ldd	r24, Y+16	; 0x10
    1a80:	89 0f       	add	r24, r25
    1a82:	8f 5f       	subi	r24, 0xFF	; 255
    1a84:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <KEYPAD_4x4_adjustKeyNumber>
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
			_delay_ms(5); /* Add small delay to fix CPU load issue in proteus */
		}
	}	
}
    1a88:	60 96       	adiw	r28, 0x10	; 16
    1a8a:	0f b6       	in	r0, 0x3f	; 63
    1a8c:	f8 94       	cli
    1a8e:	de bf       	out	0x3e, r29	; 62
    1a90:	0f be       	out	0x3f, r0	; 63
    1a92:	cd bf       	out	0x3d, r28	; 61
    1a94:	cf 91       	pop	r28
    1a96:	df 91       	pop	r29
    1a98:	08 95       	ret
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    1a9a:	88 89       	ldd	r24, Y+16	; 0x10
    1a9c:	8f 5f       	subi	r24, 0xFF	; 255
    1a9e:	88 8b       	std	Y+16, r24	; 0x10
    1aa0:	88 89       	ldd	r24, Y+16	; 0x10
    1aa2:	84 30       	cpi	r24, 0x04	; 4
    1aa4:	90 f2       	brcs	.-92     	; 0x1a4a <KEYPAD_getPressedKey+0x80>
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
						#endif
					#endif
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
    1aa6:	81 e0       	ldi	r24, 0x01	; 1
    1aa8:	6f 85       	ldd	r22, Y+15	; 0x0f
    1aaa:	40 e0       	ldi	r20, 0x00	; 0
    1aac:	0e 94 8e 08 	call	0x111c	; 0x111c <GPIO_setupPinDirection>
    1ab0:	80 e0       	ldi	r24, 0x00	; 0
    1ab2:	90 e0       	ldi	r25, 0x00	; 0
    1ab4:	a0 ea       	ldi	r26, 0xA0	; 160
    1ab6:	b0 e4       	ldi	r27, 0x40	; 64
    1ab8:	8b 87       	std	Y+11, r24	; 0x0b
    1aba:	9c 87       	std	Y+12, r25	; 0x0c
    1abc:	ad 87       	std	Y+13, r26	; 0x0d
    1abe:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ac0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ac2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ac4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ac6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ac8:	20 e0       	ldi	r18, 0x00	; 0
    1aca:	30 e0       	ldi	r19, 0x00	; 0
    1acc:	4a ef       	ldi	r20, 0xFA	; 250
    1ace:	54 e4       	ldi	r21, 0x44	; 68
    1ad0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ad4:	dc 01       	movw	r26, r24
    1ad6:	cb 01       	movw	r24, r22
    1ad8:	8f 83       	std	Y+7, r24	; 0x07
    1ada:	98 87       	std	Y+8, r25	; 0x08
    1adc:	a9 87       	std	Y+9, r26	; 0x09
    1ade:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ae0:	6f 81       	ldd	r22, Y+7	; 0x07
    1ae2:	78 85       	ldd	r23, Y+8	; 0x08
    1ae4:	89 85       	ldd	r24, Y+9	; 0x09
    1ae6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ae8:	20 e0       	ldi	r18, 0x00	; 0
    1aea:	30 e0       	ldi	r19, 0x00	; 0
    1aec:	40 e8       	ldi	r20, 0x80	; 128
    1aee:	5f e3       	ldi	r21, 0x3F	; 63
    1af0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1af4:	88 23       	and	r24, r24
    1af6:	2c f4       	brge	.+10     	; 0x1b02 <KEYPAD_getPressedKey+0x138>
		__ticks = 1;
    1af8:	81 e0       	ldi	r24, 0x01	; 1
    1afa:	90 e0       	ldi	r25, 0x00	; 0
    1afc:	9e 83       	std	Y+6, r25	; 0x06
    1afe:	8d 83       	std	Y+5, r24	; 0x05
    1b00:	3f c0       	rjmp	.+126    	; 0x1b80 <KEYPAD_getPressedKey+0x1b6>
	else if (__tmp > 65535)
    1b02:	6f 81       	ldd	r22, Y+7	; 0x07
    1b04:	78 85       	ldd	r23, Y+8	; 0x08
    1b06:	89 85       	ldd	r24, Y+9	; 0x09
    1b08:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b0a:	20 e0       	ldi	r18, 0x00	; 0
    1b0c:	3f ef       	ldi	r19, 0xFF	; 255
    1b0e:	4f e7       	ldi	r20, 0x7F	; 127
    1b10:	57 e4       	ldi	r21, 0x47	; 71
    1b12:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b16:	18 16       	cp	r1, r24
    1b18:	4c f5       	brge	.+82     	; 0x1b6c <KEYPAD_getPressedKey+0x1a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b1a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b1c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b1e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b20:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b22:	20 e0       	ldi	r18, 0x00	; 0
    1b24:	30 e0       	ldi	r19, 0x00	; 0
    1b26:	40 e2       	ldi	r20, 0x20	; 32
    1b28:	51 e4       	ldi	r21, 0x41	; 65
    1b2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b2e:	dc 01       	movw	r26, r24
    1b30:	cb 01       	movw	r24, r22
    1b32:	bc 01       	movw	r22, r24
    1b34:	cd 01       	movw	r24, r26
    1b36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b3a:	dc 01       	movw	r26, r24
    1b3c:	cb 01       	movw	r24, r22
    1b3e:	9e 83       	std	Y+6, r25	; 0x06
    1b40:	8d 83       	std	Y+5, r24	; 0x05
    1b42:	0f c0       	rjmp	.+30     	; 0x1b62 <KEYPAD_getPressedKey+0x198>
    1b44:	88 ec       	ldi	r24, 0xC8	; 200
    1b46:	90 e0       	ldi	r25, 0x00	; 0
    1b48:	9c 83       	std	Y+4, r25	; 0x04
    1b4a:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1b4c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b4e:	9c 81       	ldd	r25, Y+4	; 0x04
    1b50:	01 97       	sbiw	r24, 0x01	; 1
    1b52:	f1 f7       	brne	.-4      	; 0x1b50 <KEYPAD_getPressedKey+0x186>
    1b54:	9c 83       	std	Y+4, r25	; 0x04
    1b56:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b58:	8d 81       	ldd	r24, Y+5	; 0x05
    1b5a:	9e 81       	ldd	r25, Y+6	; 0x06
    1b5c:	01 97       	sbiw	r24, 0x01	; 1
    1b5e:	9e 83       	std	Y+6, r25	; 0x06
    1b60:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b62:	8d 81       	ldd	r24, Y+5	; 0x05
    1b64:	9e 81       	ldd	r25, Y+6	; 0x06
    1b66:	00 97       	sbiw	r24, 0x00	; 0
    1b68:	69 f7       	brne	.-38     	; 0x1b44 <KEYPAD_getPressedKey+0x17a>
    1b6a:	14 c0       	rjmp	.+40     	; 0x1b94 <KEYPAD_getPressedKey+0x1ca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b6c:	6f 81       	ldd	r22, Y+7	; 0x07
    1b6e:	78 85       	ldd	r23, Y+8	; 0x08
    1b70:	89 85       	ldd	r24, Y+9	; 0x09
    1b72:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b78:	dc 01       	movw	r26, r24
    1b7a:	cb 01       	movw	r24, r22
    1b7c:	9e 83       	std	Y+6, r25	; 0x06
    1b7e:	8d 83       	std	Y+5, r24	; 0x05
    1b80:	8d 81       	ldd	r24, Y+5	; 0x05
    1b82:	9e 81       	ldd	r25, Y+6	; 0x06
    1b84:	9a 83       	std	Y+2, r25	; 0x02
    1b86:	89 83       	std	Y+1, r24	; 0x01
    1b88:	89 81       	ldd	r24, Y+1	; 0x01
    1b8a:	9a 81       	ldd	r25, Y+2	; 0x02
    1b8c:	01 97       	sbiw	r24, 0x01	; 1
    1b8e:	f1 f7       	brne	.-4      	; 0x1b8c <KEYPAD_getPressedKey+0x1c2>
    1b90:	9a 83       	std	Y+2, r25	; 0x02
    1b92:	89 83       	std	Y+1, r24	; 0x01
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    1b94:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b96:	8f 5f       	subi	r24, 0xFF	; 255
    1b98:	8f 87       	std	Y+15, r24	; 0x0f
    1b9a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b9c:	84 30       	cpi	r24, 0x04	; 4
    1b9e:	08 f4       	brcc	.+2      	; 0x1ba2 <KEYPAD_getPressedKey+0x1d8>
    1ba0:	48 cf       	rjmp	.-368    	; 0x1a32 <KEYPAD_getPressedKey+0x68>
    1ba2:	45 cf       	rjmp	.-374    	; 0x1a2e <KEYPAD_getPressedKey+0x64>

00001ba4 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    1ba4:	df 93       	push	r29
    1ba6:	cf 93       	push	r28
    1ba8:	00 d0       	rcall	.+0      	; 0x1baa <KEYPAD_4x4_adjustKeyNumber+0x6>
    1baa:	00 d0       	rcall	.+0      	; 0x1bac <KEYPAD_4x4_adjustKeyNumber+0x8>
    1bac:	cd b7       	in	r28, 0x3d	; 61
    1bae:	de b7       	in	r29, 0x3e	; 62
    1bb0:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    1bb2:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    1bb4:	8a 81       	ldd	r24, Y+2	; 0x02
    1bb6:	28 2f       	mov	r18, r24
    1bb8:	30 e0       	ldi	r19, 0x00	; 0
    1bba:	3c 83       	std	Y+4, r19	; 0x04
    1bbc:	2b 83       	std	Y+3, r18	; 0x03
    1bbe:	8b 81       	ldd	r24, Y+3	; 0x03
    1bc0:	9c 81       	ldd	r25, Y+4	; 0x04
    1bc2:	88 30       	cpi	r24, 0x08	; 8
    1bc4:	91 05       	cpc	r25, r1
    1bc6:	09 f4       	brne	.+2      	; 0x1bca <KEYPAD_4x4_adjustKeyNumber+0x26>
    1bc8:	69 c0       	rjmp	.+210    	; 0x1c9c <KEYPAD_4x4_adjustKeyNumber+0xf8>
    1bca:	2b 81       	ldd	r18, Y+3	; 0x03
    1bcc:	3c 81       	ldd	r19, Y+4	; 0x04
    1bce:	29 30       	cpi	r18, 0x09	; 9
    1bd0:	31 05       	cpc	r19, r1
    1bd2:	4c f5       	brge	.+82     	; 0x1c26 <KEYPAD_4x4_adjustKeyNumber+0x82>
    1bd4:	8b 81       	ldd	r24, Y+3	; 0x03
    1bd6:	9c 81       	ldd	r25, Y+4	; 0x04
    1bd8:	84 30       	cpi	r24, 0x04	; 4
    1bda:	91 05       	cpc	r25, r1
    1bdc:	09 f4       	brne	.+2      	; 0x1be0 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    1bde:	52 c0       	rjmp	.+164    	; 0x1c84 <KEYPAD_4x4_adjustKeyNumber+0xe0>
    1be0:	2b 81       	ldd	r18, Y+3	; 0x03
    1be2:	3c 81       	ldd	r19, Y+4	; 0x04
    1be4:	25 30       	cpi	r18, 0x05	; 5
    1be6:	31 05       	cpc	r19, r1
    1be8:	94 f4       	brge	.+36     	; 0x1c0e <KEYPAD_4x4_adjustKeyNumber+0x6a>
    1bea:	8b 81       	ldd	r24, Y+3	; 0x03
    1bec:	9c 81       	ldd	r25, Y+4	; 0x04
    1bee:	82 30       	cpi	r24, 0x02	; 2
    1bf0:	91 05       	cpc	r25, r1
    1bf2:	09 f4       	brne	.+2      	; 0x1bf6 <KEYPAD_4x4_adjustKeyNumber+0x52>
    1bf4:	41 c0       	rjmp	.+130    	; 0x1c78 <KEYPAD_4x4_adjustKeyNumber+0xd4>
    1bf6:	2b 81       	ldd	r18, Y+3	; 0x03
    1bf8:	3c 81       	ldd	r19, Y+4	; 0x04
    1bfa:	23 30       	cpi	r18, 0x03	; 3
    1bfc:	31 05       	cpc	r19, r1
    1bfe:	0c f0       	brlt	.+2      	; 0x1c02 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    1c00:	3e c0       	rjmp	.+124    	; 0x1c7e <KEYPAD_4x4_adjustKeyNumber+0xda>
    1c02:	8b 81       	ldd	r24, Y+3	; 0x03
    1c04:	9c 81       	ldd	r25, Y+4	; 0x04
    1c06:	81 30       	cpi	r24, 0x01	; 1
    1c08:	91 05       	cpc	r25, r1
    1c0a:	99 f1       	breq	.+102    	; 0x1c72 <KEYPAD_4x4_adjustKeyNumber+0xce>
    1c0c:	5e c0       	rjmp	.+188    	; 0x1cca <KEYPAD_4x4_adjustKeyNumber+0x126>
    1c0e:	2b 81       	ldd	r18, Y+3	; 0x03
    1c10:	3c 81       	ldd	r19, Y+4	; 0x04
    1c12:	26 30       	cpi	r18, 0x06	; 6
    1c14:	31 05       	cpc	r19, r1
    1c16:	09 f4       	brne	.+2      	; 0x1c1a <KEYPAD_4x4_adjustKeyNumber+0x76>
    1c18:	3b c0       	rjmp	.+118    	; 0x1c90 <KEYPAD_4x4_adjustKeyNumber+0xec>
    1c1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c1c:	9c 81       	ldd	r25, Y+4	; 0x04
    1c1e:	87 30       	cpi	r24, 0x07	; 7
    1c20:	91 05       	cpc	r25, r1
    1c22:	cc f5       	brge	.+114    	; 0x1c96 <KEYPAD_4x4_adjustKeyNumber+0xf2>
    1c24:	32 c0       	rjmp	.+100    	; 0x1c8a <KEYPAD_4x4_adjustKeyNumber+0xe6>
    1c26:	2b 81       	ldd	r18, Y+3	; 0x03
    1c28:	3c 81       	ldd	r19, Y+4	; 0x04
    1c2a:	2c 30       	cpi	r18, 0x0C	; 12
    1c2c:	31 05       	cpc	r19, r1
    1c2e:	09 f4       	brne	.+2      	; 0x1c32 <KEYPAD_4x4_adjustKeyNumber+0x8e>
    1c30:	41 c0       	rjmp	.+130    	; 0x1cb4 <KEYPAD_4x4_adjustKeyNumber+0x110>
    1c32:	8b 81       	ldd	r24, Y+3	; 0x03
    1c34:	9c 81       	ldd	r25, Y+4	; 0x04
    1c36:	8d 30       	cpi	r24, 0x0D	; 13
    1c38:	91 05       	cpc	r25, r1
    1c3a:	5c f4       	brge	.+22     	; 0x1c52 <KEYPAD_4x4_adjustKeyNumber+0xae>
    1c3c:	2b 81       	ldd	r18, Y+3	; 0x03
    1c3e:	3c 81       	ldd	r19, Y+4	; 0x04
    1c40:	2a 30       	cpi	r18, 0x0A	; 10
    1c42:	31 05       	cpc	r19, r1
    1c44:	89 f1       	breq	.+98     	; 0x1ca8 <KEYPAD_4x4_adjustKeyNumber+0x104>
    1c46:	8b 81       	ldd	r24, Y+3	; 0x03
    1c48:	9c 81       	ldd	r25, Y+4	; 0x04
    1c4a:	8b 30       	cpi	r24, 0x0B	; 11
    1c4c:	91 05       	cpc	r25, r1
    1c4e:	7c f5       	brge	.+94     	; 0x1cae <KEYPAD_4x4_adjustKeyNumber+0x10a>
    1c50:	28 c0       	rjmp	.+80     	; 0x1ca2 <KEYPAD_4x4_adjustKeyNumber+0xfe>
    1c52:	2b 81       	ldd	r18, Y+3	; 0x03
    1c54:	3c 81       	ldd	r19, Y+4	; 0x04
    1c56:	2f 30       	cpi	r18, 0x0F	; 15
    1c58:	31 05       	cpc	r19, r1
    1c5a:	89 f1       	breq	.+98     	; 0x1cbe <KEYPAD_4x4_adjustKeyNumber+0x11a>
    1c5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c5e:	9c 81       	ldd	r25, Y+4	; 0x04
    1c60:	80 31       	cpi	r24, 0x10	; 16
    1c62:	91 05       	cpc	r25, r1
    1c64:	79 f1       	breq	.+94     	; 0x1cc4 <KEYPAD_4x4_adjustKeyNumber+0x120>
    1c66:	2b 81       	ldd	r18, Y+3	; 0x03
    1c68:	3c 81       	ldd	r19, Y+4	; 0x04
    1c6a:	2e 30       	cpi	r18, 0x0E	; 14
    1c6c:	31 05       	cpc	r19, r1
    1c6e:	29 f1       	breq	.+74     	; 0x1cba <KEYPAD_4x4_adjustKeyNumber+0x116>
    1c70:	2c c0       	rjmp	.+88     	; 0x1cca <KEYPAD_4x4_adjustKeyNumber+0x126>
	{
		case 1: keypad_button = 7;
    1c72:	87 e0       	ldi	r24, 0x07	; 7
    1c74:	89 83       	std	Y+1, r24	; 0x01
    1c76:	2b c0       	rjmp	.+86     	; 0x1cce <KEYPAD_4x4_adjustKeyNumber+0x12a>
				break;
		case 2: keypad_button = 8;
    1c78:	88 e0       	ldi	r24, 0x08	; 8
    1c7a:	89 83       	std	Y+1, r24	; 0x01
    1c7c:	28 c0       	rjmp	.+80     	; 0x1cce <KEYPAD_4x4_adjustKeyNumber+0x12a>
				break;
		case 3: keypad_button = 9;
    1c7e:	89 e0       	ldi	r24, 0x09	; 9
    1c80:	89 83       	std	Y+1, r24	; 0x01
    1c82:	25 c0       	rjmp	.+74     	; 0x1cce <KEYPAD_4x4_adjustKeyNumber+0x12a>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    1c84:	85 e2       	ldi	r24, 0x25	; 37
    1c86:	89 83       	std	Y+1, r24	; 0x01
    1c88:	22 c0       	rjmp	.+68     	; 0x1cce <KEYPAD_4x4_adjustKeyNumber+0x12a>
				break;
		case 5: keypad_button = 4;
    1c8a:	84 e0       	ldi	r24, 0x04	; 4
    1c8c:	89 83       	std	Y+1, r24	; 0x01
    1c8e:	1f c0       	rjmp	.+62     	; 0x1cce <KEYPAD_4x4_adjustKeyNumber+0x12a>
				break;
		case 6: keypad_button = 5;
    1c90:	85 e0       	ldi	r24, 0x05	; 5
    1c92:	89 83       	std	Y+1, r24	; 0x01
    1c94:	1c c0       	rjmp	.+56     	; 0x1cce <KEYPAD_4x4_adjustKeyNumber+0x12a>
				break;
		case 7: keypad_button = 6;
    1c96:	86 e0       	ldi	r24, 0x06	; 6
    1c98:	89 83       	std	Y+1, r24	; 0x01
    1c9a:	19 c0       	rjmp	.+50     	; 0x1cce <KEYPAD_4x4_adjustKeyNumber+0x12a>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    1c9c:	8a e2       	ldi	r24, 0x2A	; 42
    1c9e:	89 83       	std	Y+1, r24	; 0x01
    1ca0:	16 c0       	rjmp	.+44     	; 0x1cce <KEYPAD_4x4_adjustKeyNumber+0x12a>
				break;		
		case 9: keypad_button = 1;
    1ca2:	81 e0       	ldi	r24, 0x01	; 1
    1ca4:	89 83       	std	Y+1, r24	; 0x01
    1ca6:	13 c0       	rjmp	.+38     	; 0x1cce <KEYPAD_4x4_adjustKeyNumber+0x12a>
				break;
		case 10: keypad_button = 2;
    1ca8:	82 e0       	ldi	r24, 0x02	; 2
    1caa:	89 83       	std	Y+1, r24	; 0x01
    1cac:	10 c0       	rjmp	.+32     	; 0x1cce <KEYPAD_4x4_adjustKeyNumber+0x12a>
				break;
		case 11: keypad_button = 3;
    1cae:	83 e0       	ldi	r24, 0x03	; 3
    1cb0:	89 83       	std	Y+1, r24	; 0x01
    1cb2:	0d c0       	rjmp	.+26     	; 0x1cce <KEYPAD_4x4_adjustKeyNumber+0x12a>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    1cb4:	8d e2       	ldi	r24, 0x2D	; 45
    1cb6:	89 83       	std	Y+1, r24	; 0x01
    1cb8:	0a c0       	rjmp	.+20     	; 0x1cce <KEYPAD_4x4_adjustKeyNumber+0x12a>
				break;			
		case 14: keypad_button = 0;
    1cba:	19 82       	std	Y+1, r1	; 0x01
    1cbc:	08 c0       	rjmp	.+16     	; 0x1cce <KEYPAD_4x4_adjustKeyNumber+0x12a>
				break;
		case 15: keypad_button = '#'; /* ASCII Code of '=' */
    1cbe:	83 e2       	ldi	r24, 0x23	; 35
    1cc0:	89 83       	std	Y+1, r24	; 0x01
    1cc2:	05 c0       	rjmp	.+10     	; 0x1cce <KEYPAD_4x4_adjustKeyNumber+0x12a>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    1cc4:	8b e2       	ldi	r24, 0x2B	; 43
    1cc6:	89 83       	std	Y+1, r24	; 0x01
    1cc8:	02 c0       	rjmp	.+4      	; 0x1cce <KEYPAD_4x4_adjustKeyNumber+0x12a>
				break;
		default: keypad_button = button_number;
    1cca:	8a 81       	ldd	r24, Y+2	; 0x02
    1ccc:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    1cce:	89 81       	ldd	r24, Y+1	; 0x01
} 
    1cd0:	0f 90       	pop	r0
    1cd2:	0f 90       	pop	r0
    1cd4:	0f 90       	pop	r0
    1cd6:	0f 90       	pop	r0
    1cd8:	cf 91       	pop	r28
    1cda:	df 91       	pop	r29
    1cdc:	08 95       	ret

00001cde <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    1cde:	df 93       	push	r29
    1ce0:	cf 93       	push	r28
    1ce2:	cd b7       	in	r28, 0x3d	; 61
    1ce4:	de b7       	in	r29, 0x3e	; 62
    1ce6:	2e 97       	sbiw	r28, 0x0e	; 14
    1ce8:	0f b6       	in	r0, 0x3f	; 63
    1cea:	f8 94       	cli
    1cec:	de bf       	out	0x3e, r29	; 62
    1cee:	0f be       	out	0x3f, r0	; 63
    1cf0:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    1cf2:	82 e0       	ldi	r24, 0x02	; 2
    1cf4:	60 e0       	ldi	r22, 0x00	; 0
    1cf6:	41 e0       	ldi	r20, 0x01	; 1
    1cf8:	0e 94 8e 08 	call	0x111c	; 0x111c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    1cfc:	82 e0       	ldi	r24, 0x02	; 2
    1cfe:	61 e0       	ldi	r22, 0x01	; 1
    1d00:	41 e0       	ldi	r20, 0x01	; 1
    1d02:	0e 94 8e 08 	call	0x111c	; 0x111c <GPIO_setupPinDirection>
    1d06:	80 e0       	ldi	r24, 0x00	; 0
    1d08:	90 e0       	ldi	r25, 0x00	; 0
    1d0a:	a0 ea       	ldi	r26, 0xA0	; 160
    1d0c:	b1 e4       	ldi	r27, 0x41	; 65
    1d0e:	8b 87       	std	Y+11, r24	; 0x0b
    1d10:	9c 87       	std	Y+12, r25	; 0x0c
    1d12:	ad 87       	std	Y+13, r26	; 0x0d
    1d14:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d16:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d18:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d1a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d1c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d1e:	20 e0       	ldi	r18, 0x00	; 0
    1d20:	30 e0       	ldi	r19, 0x00	; 0
    1d22:	4a ef       	ldi	r20, 0xFA	; 250
    1d24:	54 e4       	ldi	r21, 0x44	; 68
    1d26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d2a:	dc 01       	movw	r26, r24
    1d2c:	cb 01       	movw	r24, r22
    1d2e:	8f 83       	std	Y+7, r24	; 0x07
    1d30:	98 87       	std	Y+8, r25	; 0x08
    1d32:	a9 87       	std	Y+9, r26	; 0x09
    1d34:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d36:	6f 81       	ldd	r22, Y+7	; 0x07
    1d38:	78 85       	ldd	r23, Y+8	; 0x08
    1d3a:	89 85       	ldd	r24, Y+9	; 0x09
    1d3c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d3e:	20 e0       	ldi	r18, 0x00	; 0
    1d40:	30 e0       	ldi	r19, 0x00	; 0
    1d42:	40 e8       	ldi	r20, 0x80	; 128
    1d44:	5f e3       	ldi	r21, 0x3F	; 63
    1d46:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d4a:	88 23       	and	r24, r24
    1d4c:	2c f4       	brge	.+10     	; 0x1d58 <LCD_init+0x7a>
		__ticks = 1;
    1d4e:	81 e0       	ldi	r24, 0x01	; 1
    1d50:	90 e0       	ldi	r25, 0x00	; 0
    1d52:	9e 83       	std	Y+6, r25	; 0x06
    1d54:	8d 83       	std	Y+5, r24	; 0x05
    1d56:	3f c0       	rjmp	.+126    	; 0x1dd6 <LCD_init+0xf8>
	else if (__tmp > 65535)
    1d58:	6f 81       	ldd	r22, Y+7	; 0x07
    1d5a:	78 85       	ldd	r23, Y+8	; 0x08
    1d5c:	89 85       	ldd	r24, Y+9	; 0x09
    1d5e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d60:	20 e0       	ldi	r18, 0x00	; 0
    1d62:	3f ef       	ldi	r19, 0xFF	; 255
    1d64:	4f e7       	ldi	r20, 0x7F	; 127
    1d66:	57 e4       	ldi	r21, 0x47	; 71
    1d68:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d6c:	18 16       	cp	r1, r24
    1d6e:	4c f5       	brge	.+82     	; 0x1dc2 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d70:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d72:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d74:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d76:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d78:	20 e0       	ldi	r18, 0x00	; 0
    1d7a:	30 e0       	ldi	r19, 0x00	; 0
    1d7c:	40 e2       	ldi	r20, 0x20	; 32
    1d7e:	51 e4       	ldi	r21, 0x41	; 65
    1d80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d84:	dc 01       	movw	r26, r24
    1d86:	cb 01       	movw	r24, r22
    1d88:	bc 01       	movw	r22, r24
    1d8a:	cd 01       	movw	r24, r26
    1d8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d90:	dc 01       	movw	r26, r24
    1d92:	cb 01       	movw	r24, r22
    1d94:	9e 83       	std	Y+6, r25	; 0x06
    1d96:	8d 83       	std	Y+5, r24	; 0x05
    1d98:	0f c0       	rjmp	.+30     	; 0x1db8 <LCD_init+0xda>
    1d9a:	88 ec       	ldi	r24, 0xC8	; 200
    1d9c:	90 e0       	ldi	r25, 0x00	; 0
    1d9e:	9c 83       	std	Y+4, r25	; 0x04
    1da0:	8b 83       	std	Y+3, r24	; 0x03
    1da2:	8b 81       	ldd	r24, Y+3	; 0x03
    1da4:	9c 81       	ldd	r25, Y+4	; 0x04
    1da6:	01 97       	sbiw	r24, 0x01	; 1
    1da8:	f1 f7       	brne	.-4      	; 0x1da6 <LCD_init+0xc8>
    1daa:	9c 83       	std	Y+4, r25	; 0x04
    1dac:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dae:	8d 81       	ldd	r24, Y+5	; 0x05
    1db0:	9e 81       	ldd	r25, Y+6	; 0x06
    1db2:	01 97       	sbiw	r24, 0x01	; 1
    1db4:	9e 83       	std	Y+6, r25	; 0x06
    1db6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1db8:	8d 81       	ldd	r24, Y+5	; 0x05
    1dba:	9e 81       	ldd	r25, Y+6	; 0x06
    1dbc:	00 97       	sbiw	r24, 0x00	; 0
    1dbe:	69 f7       	brne	.-38     	; 0x1d9a <LCD_init+0xbc>
    1dc0:	14 c0       	rjmp	.+40     	; 0x1dea <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dc2:	6f 81       	ldd	r22, Y+7	; 0x07
    1dc4:	78 85       	ldd	r23, Y+8	; 0x08
    1dc6:	89 85       	ldd	r24, Y+9	; 0x09
    1dc8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dce:	dc 01       	movw	r26, r24
    1dd0:	cb 01       	movw	r24, r22
    1dd2:	9e 83       	std	Y+6, r25	; 0x06
    1dd4:	8d 83       	std	Y+5, r24	; 0x05
    1dd6:	8d 81       	ldd	r24, Y+5	; 0x05
    1dd8:	9e 81       	ldd	r25, Y+6	; 0x06
    1dda:	9a 83       	std	Y+2, r25	; 0x02
    1ddc:	89 83       	std	Y+1, r24	; 0x01
    1dde:	89 81       	ldd	r24, Y+1	; 0x01
    1de0:	9a 81       	ldd	r25, Y+2	; 0x02
    1de2:	01 97       	sbiw	r24, 0x01	; 1
    1de4:	f1 f7       	brne	.-4      	; 0x1de2 <LCD_init+0x104>
    1de6:	9a 83       	std	Y+2, r25	; 0x02
    1de8:	89 83       	std	Y+1, r24	; 0x01
	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);

#elif(LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    1dea:	80 e0       	ldi	r24, 0x00	; 0
    1dec:	6f ef       	ldi	r22, 0xFF	; 255
    1dee:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <GPIO_setupPortDirection>

	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    1df2:	88 e3       	ldi	r24, 0x38	; 56
    1df4:	0e 94 0b 0f 	call	0x1e16	; 0x1e16 <LCD_sendCommand>

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    1df8:	8c e0       	ldi	r24, 0x0C	; 12
    1dfa:	0e 94 0b 0f 	call	0x1e16	; 0x1e16 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    1dfe:	81 e0       	ldi	r24, 0x01	; 1
    1e00:	0e 94 0b 0f 	call	0x1e16	; 0x1e16 <LCD_sendCommand>
}
    1e04:	2e 96       	adiw	r28, 0x0e	; 14
    1e06:	0f b6       	in	r0, 0x3f	; 63
    1e08:	f8 94       	cli
    1e0a:	de bf       	out	0x3e, r29	; 62
    1e0c:	0f be       	out	0x3f, r0	; 63
    1e0e:	cd bf       	out	0x3d, r28	; 61
    1e10:	cf 91       	pop	r28
    1e12:	df 91       	pop	r29
    1e14:	08 95       	ret

00001e16 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    1e16:	df 93       	push	r29
    1e18:	cf 93       	push	r28
    1e1a:	cd b7       	in	r28, 0x3d	; 61
    1e1c:	de b7       	in	r29, 0x3e	; 62
    1e1e:	e9 97       	sbiw	r28, 0x39	; 57
    1e20:	0f b6       	in	r0, 0x3f	; 63
    1e22:	f8 94       	cli
    1e24:	de bf       	out	0x3e, r29	; 62
    1e26:	0f be       	out	0x3f, r0	; 63
    1e28:	cd bf       	out	0x3d, r28	; 61
    1e2a:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    1e2c:	82 e0       	ldi	r24, 0x02	; 2
    1e2e:	60 e0       	ldi	r22, 0x00	; 0
    1e30:	40 e0       	ldi	r20, 0x00	; 0
    1e32:	0e 94 79 09 	call	0x12f2	; 0x12f2 <GPIO_writePin>
    1e36:	80 e0       	ldi	r24, 0x00	; 0
    1e38:	90 e0       	ldi	r25, 0x00	; 0
    1e3a:	a0 e8       	ldi	r26, 0x80	; 128
    1e3c:	bf e3       	ldi	r27, 0x3F	; 63
    1e3e:	8d ab       	std	Y+53, r24	; 0x35
    1e40:	9e ab       	std	Y+54, r25	; 0x36
    1e42:	af ab       	std	Y+55, r26	; 0x37
    1e44:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e46:	6d a9       	ldd	r22, Y+53	; 0x35
    1e48:	7e a9       	ldd	r23, Y+54	; 0x36
    1e4a:	8f a9       	ldd	r24, Y+55	; 0x37
    1e4c:	98 ad       	ldd	r25, Y+56	; 0x38
    1e4e:	20 e0       	ldi	r18, 0x00	; 0
    1e50:	30 e0       	ldi	r19, 0x00	; 0
    1e52:	4a ef       	ldi	r20, 0xFA	; 250
    1e54:	54 e4       	ldi	r21, 0x44	; 68
    1e56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e5a:	dc 01       	movw	r26, r24
    1e5c:	cb 01       	movw	r24, r22
    1e5e:	89 ab       	std	Y+49, r24	; 0x31
    1e60:	9a ab       	std	Y+50, r25	; 0x32
    1e62:	ab ab       	std	Y+51, r26	; 0x33
    1e64:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1e66:	69 a9       	ldd	r22, Y+49	; 0x31
    1e68:	7a a9       	ldd	r23, Y+50	; 0x32
    1e6a:	8b a9       	ldd	r24, Y+51	; 0x33
    1e6c:	9c a9       	ldd	r25, Y+52	; 0x34
    1e6e:	20 e0       	ldi	r18, 0x00	; 0
    1e70:	30 e0       	ldi	r19, 0x00	; 0
    1e72:	40 e8       	ldi	r20, 0x80	; 128
    1e74:	5f e3       	ldi	r21, 0x3F	; 63
    1e76:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e7a:	88 23       	and	r24, r24
    1e7c:	2c f4       	brge	.+10     	; 0x1e88 <LCD_sendCommand+0x72>
		__ticks = 1;
    1e7e:	81 e0       	ldi	r24, 0x01	; 1
    1e80:	90 e0       	ldi	r25, 0x00	; 0
    1e82:	98 ab       	std	Y+48, r25	; 0x30
    1e84:	8f a7       	std	Y+47, r24	; 0x2f
    1e86:	3f c0       	rjmp	.+126    	; 0x1f06 <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    1e88:	69 a9       	ldd	r22, Y+49	; 0x31
    1e8a:	7a a9       	ldd	r23, Y+50	; 0x32
    1e8c:	8b a9       	ldd	r24, Y+51	; 0x33
    1e8e:	9c a9       	ldd	r25, Y+52	; 0x34
    1e90:	20 e0       	ldi	r18, 0x00	; 0
    1e92:	3f ef       	ldi	r19, 0xFF	; 255
    1e94:	4f e7       	ldi	r20, 0x7F	; 127
    1e96:	57 e4       	ldi	r21, 0x47	; 71
    1e98:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e9c:	18 16       	cp	r1, r24
    1e9e:	4c f5       	brge	.+82     	; 0x1ef2 <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ea0:	6d a9       	ldd	r22, Y+53	; 0x35
    1ea2:	7e a9       	ldd	r23, Y+54	; 0x36
    1ea4:	8f a9       	ldd	r24, Y+55	; 0x37
    1ea6:	98 ad       	ldd	r25, Y+56	; 0x38
    1ea8:	20 e0       	ldi	r18, 0x00	; 0
    1eaa:	30 e0       	ldi	r19, 0x00	; 0
    1eac:	40 e2       	ldi	r20, 0x20	; 32
    1eae:	51 e4       	ldi	r21, 0x41	; 65
    1eb0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1eb4:	dc 01       	movw	r26, r24
    1eb6:	cb 01       	movw	r24, r22
    1eb8:	bc 01       	movw	r22, r24
    1eba:	cd 01       	movw	r24, r26
    1ebc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ec0:	dc 01       	movw	r26, r24
    1ec2:	cb 01       	movw	r24, r22
    1ec4:	98 ab       	std	Y+48, r25	; 0x30
    1ec6:	8f a7       	std	Y+47, r24	; 0x2f
    1ec8:	0f c0       	rjmp	.+30     	; 0x1ee8 <LCD_sendCommand+0xd2>
    1eca:	88 ec       	ldi	r24, 0xC8	; 200
    1ecc:	90 e0       	ldi	r25, 0x00	; 0
    1ece:	9e a7       	std	Y+46, r25	; 0x2e
    1ed0:	8d a7       	std	Y+45, r24	; 0x2d
    1ed2:	8d a5       	ldd	r24, Y+45	; 0x2d
    1ed4:	9e a5       	ldd	r25, Y+46	; 0x2e
    1ed6:	01 97       	sbiw	r24, 0x01	; 1
    1ed8:	f1 f7       	brne	.-4      	; 0x1ed6 <LCD_sendCommand+0xc0>
    1eda:	9e a7       	std	Y+46, r25	; 0x2e
    1edc:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ede:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ee0:	98 a9       	ldd	r25, Y+48	; 0x30
    1ee2:	01 97       	sbiw	r24, 0x01	; 1
    1ee4:	98 ab       	std	Y+48, r25	; 0x30
    1ee6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ee8:	8f a5       	ldd	r24, Y+47	; 0x2f
    1eea:	98 a9       	ldd	r25, Y+48	; 0x30
    1eec:	00 97       	sbiw	r24, 0x00	; 0
    1eee:	69 f7       	brne	.-38     	; 0x1eca <LCD_sendCommand+0xb4>
    1ef0:	14 c0       	rjmp	.+40     	; 0x1f1a <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ef2:	69 a9       	ldd	r22, Y+49	; 0x31
    1ef4:	7a a9       	ldd	r23, Y+50	; 0x32
    1ef6:	8b a9       	ldd	r24, Y+51	; 0x33
    1ef8:	9c a9       	ldd	r25, Y+52	; 0x34
    1efa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1efe:	dc 01       	movw	r26, r24
    1f00:	cb 01       	movw	r24, r22
    1f02:	98 ab       	std	Y+48, r25	; 0x30
    1f04:	8f a7       	std	Y+47, r24	; 0x2f
    1f06:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f08:	98 a9       	ldd	r25, Y+48	; 0x30
    1f0a:	9c a7       	std	Y+44, r25	; 0x2c
    1f0c:	8b a7       	std	Y+43, r24	; 0x2b
    1f0e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1f10:	9c a5       	ldd	r25, Y+44	; 0x2c
    1f12:	01 97       	sbiw	r24, 0x01	; 1
    1f14:	f1 f7       	brne	.-4      	; 0x1f12 <LCD_sendCommand+0xfc>
    1f16:	9c a7       	std	Y+44, r25	; 0x2c
    1f18:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1f1a:	82 e0       	ldi	r24, 0x02	; 2
    1f1c:	61 e0       	ldi	r22, 0x01	; 1
    1f1e:	41 e0       	ldi	r20, 0x01	; 1
    1f20:	0e 94 79 09 	call	0x12f2	; 0x12f2 <GPIO_writePin>
    1f24:	80 e0       	ldi	r24, 0x00	; 0
    1f26:	90 e0       	ldi	r25, 0x00	; 0
    1f28:	a0 e8       	ldi	r26, 0x80	; 128
    1f2a:	bf e3       	ldi	r27, 0x3F	; 63
    1f2c:	8f a3       	std	Y+39, r24	; 0x27
    1f2e:	98 a7       	std	Y+40, r25	; 0x28
    1f30:	a9 a7       	std	Y+41, r26	; 0x29
    1f32:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f34:	6f a1       	ldd	r22, Y+39	; 0x27
    1f36:	78 a5       	ldd	r23, Y+40	; 0x28
    1f38:	89 a5       	ldd	r24, Y+41	; 0x29
    1f3a:	9a a5       	ldd	r25, Y+42	; 0x2a
    1f3c:	20 e0       	ldi	r18, 0x00	; 0
    1f3e:	30 e0       	ldi	r19, 0x00	; 0
    1f40:	4a ef       	ldi	r20, 0xFA	; 250
    1f42:	54 e4       	ldi	r21, 0x44	; 68
    1f44:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f48:	dc 01       	movw	r26, r24
    1f4a:	cb 01       	movw	r24, r22
    1f4c:	8b a3       	std	Y+35, r24	; 0x23
    1f4e:	9c a3       	std	Y+36, r25	; 0x24
    1f50:	ad a3       	std	Y+37, r26	; 0x25
    1f52:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1f54:	6b a1       	ldd	r22, Y+35	; 0x23
    1f56:	7c a1       	ldd	r23, Y+36	; 0x24
    1f58:	8d a1       	ldd	r24, Y+37	; 0x25
    1f5a:	9e a1       	ldd	r25, Y+38	; 0x26
    1f5c:	20 e0       	ldi	r18, 0x00	; 0
    1f5e:	30 e0       	ldi	r19, 0x00	; 0
    1f60:	40 e8       	ldi	r20, 0x80	; 128
    1f62:	5f e3       	ldi	r21, 0x3F	; 63
    1f64:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f68:	88 23       	and	r24, r24
    1f6a:	2c f4       	brge	.+10     	; 0x1f76 <LCD_sendCommand+0x160>
		__ticks = 1;
    1f6c:	81 e0       	ldi	r24, 0x01	; 1
    1f6e:	90 e0       	ldi	r25, 0x00	; 0
    1f70:	9a a3       	std	Y+34, r25	; 0x22
    1f72:	89 a3       	std	Y+33, r24	; 0x21
    1f74:	3f c0       	rjmp	.+126    	; 0x1ff4 <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    1f76:	6b a1       	ldd	r22, Y+35	; 0x23
    1f78:	7c a1       	ldd	r23, Y+36	; 0x24
    1f7a:	8d a1       	ldd	r24, Y+37	; 0x25
    1f7c:	9e a1       	ldd	r25, Y+38	; 0x26
    1f7e:	20 e0       	ldi	r18, 0x00	; 0
    1f80:	3f ef       	ldi	r19, 0xFF	; 255
    1f82:	4f e7       	ldi	r20, 0x7F	; 127
    1f84:	57 e4       	ldi	r21, 0x47	; 71
    1f86:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f8a:	18 16       	cp	r1, r24
    1f8c:	4c f5       	brge	.+82     	; 0x1fe0 <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f8e:	6f a1       	ldd	r22, Y+39	; 0x27
    1f90:	78 a5       	ldd	r23, Y+40	; 0x28
    1f92:	89 a5       	ldd	r24, Y+41	; 0x29
    1f94:	9a a5       	ldd	r25, Y+42	; 0x2a
    1f96:	20 e0       	ldi	r18, 0x00	; 0
    1f98:	30 e0       	ldi	r19, 0x00	; 0
    1f9a:	40 e2       	ldi	r20, 0x20	; 32
    1f9c:	51 e4       	ldi	r21, 0x41	; 65
    1f9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fa2:	dc 01       	movw	r26, r24
    1fa4:	cb 01       	movw	r24, r22
    1fa6:	bc 01       	movw	r22, r24
    1fa8:	cd 01       	movw	r24, r26
    1faa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fae:	dc 01       	movw	r26, r24
    1fb0:	cb 01       	movw	r24, r22
    1fb2:	9a a3       	std	Y+34, r25	; 0x22
    1fb4:	89 a3       	std	Y+33, r24	; 0x21
    1fb6:	0f c0       	rjmp	.+30     	; 0x1fd6 <LCD_sendCommand+0x1c0>
    1fb8:	88 ec       	ldi	r24, 0xC8	; 200
    1fba:	90 e0       	ldi	r25, 0x00	; 0
    1fbc:	98 a3       	std	Y+32, r25	; 0x20
    1fbe:	8f 8f       	std	Y+31, r24	; 0x1f
    1fc0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1fc2:	98 a1       	ldd	r25, Y+32	; 0x20
    1fc4:	01 97       	sbiw	r24, 0x01	; 1
    1fc6:	f1 f7       	brne	.-4      	; 0x1fc4 <LCD_sendCommand+0x1ae>
    1fc8:	98 a3       	std	Y+32, r25	; 0x20
    1fca:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fcc:	89 a1       	ldd	r24, Y+33	; 0x21
    1fce:	9a a1       	ldd	r25, Y+34	; 0x22
    1fd0:	01 97       	sbiw	r24, 0x01	; 1
    1fd2:	9a a3       	std	Y+34, r25	; 0x22
    1fd4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fd6:	89 a1       	ldd	r24, Y+33	; 0x21
    1fd8:	9a a1       	ldd	r25, Y+34	; 0x22
    1fda:	00 97       	sbiw	r24, 0x00	; 0
    1fdc:	69 f7       	brne	.-38     	; 0x1fb8 <LCD_sendCommand+0x1a2>
    1fde:	14 c0       	rjmp	.+40     	; 0x2008 <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fe0:	6b a1       	ldd	r22, Y+35	; 0x23
    1fe2:	7c a1       	ldd	r23, Y+36	; 0x24
    1fe4:	8d a1       	ldd	r24, Y+37	; 0x25
    1fe6:	9e a1       	ldd	r25, Y+38	; 0x26
    1fe8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fec:	dc 01       	movw	r26, r24
    1fee:	cb 01       	movw	r24, r22
    1ff0:	9a a3       	std	Y+34, r25	; 0x22
    1ff2:	89 a3       	std	Y+33, r24	; 0x21
    1ff4:	89 a1       	ldd	r24, Y+33	; 0x21
    1ff6:	9a a1       	ldd	r25, Y+34	; 0x22
    1ff8:	9e 8f       	std	Y+30, r25	; 0x1e
    1ffa:	8d 8f       	std	Y+29, r24	; 0x1d
    1ffc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1ffe:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2000:	01 97       	sbiw	r24, 0x01	; 1
    2002:	f1 f7       	brne	.-4      	; 0x2000 <LCD_sendCommand+0x1ea>
    2004:	9e 8f       	std	Y+30, r25	; 0x1e
    2006:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    2008:	80 e0       	ldi	r24, 0x00	; 0
    200a:	69 ad       	ldd	r22, Y+57	; 0x39
    200c:	0e 94 43 0b 	call	0x1686	; 0x1686 <GPIO_writePort>
    2010:	80 e0       	ldi	r24, 0x00	; 0
    2012:	90 e0       	ldi	r25, 0x00	; 0
    2014:	a0 e8       	ldi	r26, 0x80	; 128
    2016:	bf e3       	ldi	r27, 0x3F	; 63
    2018:	89 8f       	std	Y+25, r24	; 0x19
    201a:	9a 8f       	std	Y+26, r25	; 0x1a
    201c:	ab 8f       	std	Y+27, r26	; 0x1b
    201e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2020:	69 8d       	ldd	r22, Y+25	; 0x19
    2022:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2024:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2026:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2028:	20 e0       	ldi	r18, 0x00	; 0
    202a:	30 e0       	ldi	r19, 0x00	; 0
    202c:	4a ef       	ldi	r20, 0xFA	; 250
    202e:	54 e4       	ldi	r21, 0x44	; 68
    2030:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2034:	dc 01       	movw	r26, r24
    2036:	cb 01       	movw	r24, r22
    2038:	8d 8b       	std	Y+21, r24	; 0x15
    203a:	9e 8b       	std	Y+22, r25	; 0x16
    203c:	af 8b       	std	Y+23, r26	; 0x17
    203e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2040:	6d 89       	ldd	r22, Y+21	; 0x15
    2042:	7e 89       	ldd	r23, Y+22	; 0x16
    2044:	8f 89       	ldd	r24, Y+23	; 0x17
    2046:	98 8d       	ldd	r25, Y+24	; 0x18
    2048:	20 e0       	ldi	r18, 0x00	; 0
    204a:	30 e0       	ldi	r19, 0x00	; 0
    204c:	40 e8       	ldi	r20, 0x80	; 128
    204e:	5f e3       	ldi	r21, 0x3F	; 63
    2050:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2054:	88 23       	and	r24, r24
    2056:	2c f4       	brge	.+10     	; 0x2062 <LCD_sendCommand+0x24c>
		__ticks = 1;
    2058:	81 e0       	ldi	r24, 0x01	; 1
    205a:	90 e0       	ldi	r25, 0x00	; 0
    205c:	9c 8b       	std	Y+20, r25	; 0x14
    205e:	8b 8b       	std	Y+19, r24	; 0x13
    2060:	3f c0       	rjmp	.+126    	; 0x20e0 <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    2062:	6d 89       	ldd	r22, Y+21	; 0x15
    2064:	7e 89       	ldd	r23, Y+22	; 0x16
    2066:	8f 89       	ldd	r24, Y+23	; 0x17
    2068:	98 8d       	ldd	r25, Y+24	; 0x18
    206a:	20 e0       	ldi	r18, 0x00	; 0
    206c:	3f ef       	ldi	r19, 0xFF	; 255
    206e:	4f e7       	ldi	r20, 0x7F	; 127
    2070:	57 e4       	ldi	r21, 0x47	; 71
    2072:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2076:	18 16       	cp	r1, r24
    2078:	4c f5       	brge	.+82     	; 0x20cc <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    207a:	69 8d       	ldd	r22, Y+25	; 0x19
    207c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    207e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2080:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2082:	20 e0       	ldi	r18, 0x00	; 0
    2084:	30 e0       	ldi	r19, 0x00	; 0
    2086:	40 e2       	ldi	r20, 0x20	; 32
    2088:	51 e4       	ldi	r21, 0x41	; 65
    208a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    208e:	dc 01       	movw	r26, r24
    2090:	cb 01       	movw	r24, r22
    2092:	bc 01       	movw	r22, r24
    2094:	cd 01       	movw	r24, r26
    2096:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    209a:	dc 01       	movw	r26, r24
    209c:	cb 01       	movw	r24, r22
    209e:	9c 8b       	std	Y+20, r25	; 0x14
    20a0:	8b 8b       	std	Y+19, r24	; 0x13
    20a2:	0f c0       	rjmp	.+30     	; 0x20c2 <LCD_sendCommand+0x2ac>
    20a4:	88 ec       	ldi	r24, 0xC8	; 200
    20a6:	90 e0       	ldi	r25, 0x00	; 0
    20a8:	9a 8b       	std	Y+18, r25	; 0x12
    20aa:	89 8b       	std	Y+17, r24	; 0x11
    20ac:	89 89       	ldd	r24, Y+17	; 0x11
    20ae:	9a 89       	ldd	r25, Y+18	; 0x12
    20b0:	01 97       	sbiw	r24, 0x01	; 1
    20b2:	f1 f7       	brne	.-4      	; 0x20b0 <LCD_sendCommand+0x29a>
    20b4:	9a 8b       	std	Y+18, r25	; 0x12
    20b6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20b8:	8b 89       	ldd	r24, Y+19	; 0x13
    20ba:	9c 89       	ldd	r25, Y+20	; 0x14
    20bc:	01 97       	sbiw	r24, 0x01	; 1
    20be:	9c 8b       	std	Y+20, r25	; 0x14
    20c0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20c2:	8b 89       	ldd	r24, Y+19	; 0x13
    20c4:	9c 89       	ldd	r25, Y+20	; 0x14
    20c6:	00 97       	sbiw	r24, 0x00	; 0
    20c8:	69 f7       	brne	.-38     	; 0x20a4 <LCD_sendCommand+0x28e>
    20ca:	14 c0       	rjmp	.+40     	; 0x20f4 <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20cc:	6d 89       	ldd	r22, Y+21	; 0x15
    20ce:	7e 89       	ldd	r23, Y+22	; 0x16
    20d0:	8f 89       	ldd	r24, Y+23	; 0x17
    20d2:	98 8d       	ldd	r25, Y+24	; 0x18
    20d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20d8:	dc 01       	movw	r26, r24
    20da:	cb 01       	movw	r24, r22
    20dc:	9c 8b       	std	Y+20, r25	; 0x14
    20de:	8b 8b       	std	Y+19, r24	; 0x13
    20e0:	8b 89       	ldd	r24, Y+19	; 0x13
    20e2:	9c 89       	ldd	r25, Y+20	; 0x14
    20e4:	98 8b       	std	Y+16, r25	; 0x10
    20e6:	8f 87       	std	Y+15, r24	; 0x0f
    20e8:	8f 85       	ldd	r24, Y+15	; 0x0f
    20ea:	98 89       	ldd	r25, Y+16	; 0x10
    20ec:	01 97       	sbiw	r24, 0x01	; 1
    20ee:	f1 f7       	brne	.-4      	; 0x20ec <LCD_sendCommand+0x2d6>
    20f0:	98 8b       	std	Y+16, r25	; 0x10
    20f2:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    20f4:	82 e0       	ldi	r24, 0x02	; 2
    20f6:	61 e0       	ldi	r22, 0x01	; 1
    20f8:	40 e0       	ldi	r20, 0x00	; 0
    20fa:	0e 94 79 09 	call	0x12f2	; 0x12f2 <GPIO_writePin>
    20fe:	80 e0       	ldi	r24, 0x00	; 0
    2100:	90 e0       	ldi	r25, 0x00	; 0
    2102:	a0 e8       	ldi	r26, 0x80	; 128
    2104:	bf e3       	ldi	r27, 0x3F	; 63
    2106:	8b 87       	std	Y+11, r24	; 0x0b
    2108:	9c 87       	std	Y+12, r25	; 0x0c
    210a:	ad 87       	std	Y+13, r26	; 0x0d
    210c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    210e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2110:	7c 85       	ldd	r23, Y+12	; 0x0c
    2112:	8d 85       	ldd	r24, Y+13	; 0x0d
    2114:	9e 85       	ldd	r25, Y+14	; 0x0e
    2116:	20 e0       	ldi	r18, 0x00	; 0
    2118:	30 e0       	ldi	r19, 0x00	; 0
    211a:	4a ef       	ldi	r20, 0xFA	; 250
    211c:	54 e4       	ldi	r21, 0x44	; 68
    211e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2122:	dc 01       	movw	r26, r24
    2124:	cb 01       	movw	r24, r22
    2126:	8f 83       	std	Y+7, r24	; 0x07
    2128:	98 87       	std	Y+8, r25	; 0x08
    212a:	a9 87       	std	Y+9, r26	; 0x09
    212c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    212e:	6f 81       	ldd	r22, Y+7	; 0x07
    2130:	78 85       	ldd	r23, Y+8	; 0x08
    2132:	89 85       	ldd	r24, Y+9	; 0x09
    2134:	9a 85       	ldd	r25, Y+10	; 0x0a
    2136:	20 e0       	ldi	r18, 0x00	; 0
    2138:	30 e0       	ldi	r19, 0x00	; 0
    213a:	40 e8       	ldi	r20, 0x80	; 128
    213c:	5f e3       	ldi	r21, 0x3F	; 63
    213e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2142:	88 23       	and	r24, r24
    2144:	2c f4       	brge	.+10     	; 0x2150 <LCD_sendCommand+0x33a>
		__ticks = 1;
    2146:	81 e0       	ldi	r24, 0x01	; 1
    2148:	90 e0       	ldi	r25, 0x00	; 0
    214a:	9e 83       	std	Y+6, r25	; 0x06
    214c:	8d 83       	std	Y+5, r24	; 0x05
    214e:	3f c0       	rjmp	.+126    	; 0x21ce <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    2150:	6f 81       	ldd	r22, Y+7	; 0x07
    2152:	78 85       	ldd	r23, Y+8	; 0x08
    2154:	89 85       	ldd	r24, Y+9	; 0x09
    2156:	9a 85       	ldd	r25, Y+10	; 0x0a
    2158:	20 e0       	ldi	r18, 0x00	; 0
    215a:	3f ef       	ldi	r19, 0xFF	; 255
    215c:	4f e7       	ldi	r20, 0x7F	; 127
    215e:	57 e4       	ldi	r21, 0x47	; 71
    2160:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2164:	18 16       	cp	r1, r24
    2166:	4c f5       	brge	.+82     	; 0x21ba <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2168:	6b 85       	ldd	r22, Y+11	; 0x0b
    216a:	7c 85       	ldd	r23, Y+12	; 0x0c
    216c:	8d 85       	ldd	r24, Y+13	; 0x0d
    216e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2170:	20 e0       	ldi	r18, 0x00	; 0
    2172:	30 e0       	ldi	r19, 0x00	; 0
    2174:	40 e2       	ldi	r20, 0x20	; 32
    2176:	51 e4       	ldi	r21, 0x41	; 65
    2178:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    217c:	dc 01       	movw	r26, r24
    217e:	cb 01       	movw	r24, r22
    2180:	bc 01       	movw	r22, r24
    2182:	cd 01       	movw	r24, r26
    2184:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2188:	dc 01       	movw	r26, r24
    218a:	cb 01       	movw	r24, r22
    218c:	9e 83       	std	Y+6, r25	; 0x06
    218e:	8d 83       	std	Y+5, r24	; 0x05
    2190:	0f c0       	rjmp	.+30     	; 0x21b0 <LCD_sendCommand+0x39a>
    2192:	88 ec       	ldi	r24, 0xC8	; 200
    2194:	90 e0       	ldi	r25, 0x00	; 0
    2196:	9c 83       	std	Y+4, r25	; 0x04
    2198:	8b 83       	std	Y+3, r24	; 0x03
    219a:	8b 81       	ldd	r24, Y+3	; 0x03
    219c:	9c 81       	ldd	r25, Y+4	; 0x04
    219e:	01 97       	sbiw	r24, 0x01	; 1
    21a0:	f1 f7       	brne	.-4      	; 0x219e <LCD_sendCommand+0x388>
    21a2:	9c 83       	std	Y+4, r25	; 0x04
    21a4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21a6:	8d 81       	ldd	r24, Y+5	; 0x05
    21a8:	9e 81       	ldd	r25, Y+6	; 0x06
    21aa:	01 97       	sbiw	r24, 0x01	; 1
    21ac:	9e 83       	std	Y+6, r25	; 0x06
    21ae:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21b0:	8d 81       	ldd	r24, Y+5	; 0x05
    21b2:	9e 81       	ldd	r25, Y+6	; 0x06
    21b4:	00 97       	sbiw	r24, 0x00	; 0
    21b6:	69 f7       	brne	.-38     	; 0x2192 <LCD_sendCommand+0x37c>
    21b8:	14 c0       	rjmp	.+40     	; 0x21e2 <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21ba:	6f 81       	ldd	r22, Y+7	; 0x07
    21bc:	78 85       	ldd	r23, Y+8	; 0x08
    21be:	89 85       	ldd	r24, Y+9	; 0x09
    21c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    21c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21c6:	dc 01       	movw	r26, r24
    21c8:	cb 01       	movw	r24, r22
    21ca:	9e 83       	std	Y+6, r25	; 0x06
    21cc:	8d 83       	std	Y+5, r24	; 0x05
    21ce:	8d 81       	ldd	r24, Y+5	; 0x05
    21d0:	9e 81       	ldd	r25, Y+6	; 0x06
    21d2:	9a 83       	std	Y+2, r25	; 0x02
    21d4:	89 83       	std	Y+1, r24	; 0x01
    21d6:	89 81       	ldd	r24, Y+1	; 0x01
    21d8:	9a 81       	ldd	r25, Y+2	; 0x02
    21da:	01 97       	sbiw	r24, 0x01	; 1
    21dc:	f1 f7       	brne	.-4      	; 0x21da <LCD_sendCommand+0x3c4>
    21de:	9a 83       	std	Y+2, r25	; 0x02
    21e0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    21e2:	e9 96       	adiw	r28, 0x39	; 57
    21e4:	0f b6       	in	r0, 0x3f	; 63
    21e6:	f8 94       	cli
    21e8:	de bf       	out	0x3e, r29	; 62
    21ea:	0f be       	out	0x3f, r0	; 63
    21ec:	cd bf       	out	0x3d, r28	; 61
    21ee:	cf 91       	pop	r28
    21f0:	df 91       	pop	r29
    21f2:	08 95       	ret

000021f4 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    21f4:	df 93       	push	r29
    21f6:	cf 93       	push	r28
    21f8:	cd b7       	in	r28, 0x3d	; 61
    21fa:	de b7       	in	r29, 0x3e	; 62
    21fc:	e9 97       	sbiw	r28, 0x39	; 57
    21fe:	0f b6       	in	r0, 0x3f	; 63
    2200:	f8 94       	cli
    2202:	de bf       	out	0x3e, r29	; 62
    2204:	0f be       	out	0x3f, r0	; 63
    2206:	cd bf       	out	0x3d, r28	; 61
    2208:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    220a:	82 e0       	ldi	r24, 0x02	; 2
    220c:	60 e0       	ldi	r22, 0x00	; 0
    220e:	41 e0       	ldi	r20, 0x01	; 1
    2210:	0e 94 79 09 	call	0x12f2	; 0x12f2 <GPIO_writePin>
    2214:	80 e0       	ldi	r24, 0x00	; 0
    2216:	90 e0       	ldi	r25, 0x00	; 0
    2218:	a0 e8       	ldi	r26, 0x80	; 128
    221a:	bf e3       	ldi	r27, 0x3F	; 63
    221c:	8d ab       	std	Y+53, r24	; 0x35
    221e:	9e ab       	std	Y+54, r25	; 0x36
    2220:	af ab       	std	Y+55, r26	; 0x37
    2222:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2224:	6d a9       	ldd	r22, Y+53	; 0x35
    2226:	7e a9       	ldd	r23, Y+54	; 0x36
    2228:	8f a9       	ldd	r24, Y+55	; 0x37
    222a:	98 ad       	ldd	r25, Y+56	; 0x38
    222c:	20 e0       	ldi	r18, 0x00	; 0
    222e:	30 e0       	ldi	r19, 0x00	; 0
    2230:	4a ef       	ldi	r20, 0xFA	; 250
    2232:	54 e4       	ldi	r21, 0x44	; 68
    2234:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2238:	dc 01       	movw	r26, r24
    223a:	cb 01       	movw	r24, r22
    223c:	89 ab       	std	Y+49, r24	; 0x31
    223e:	9a ab       	std	Y+50, r25	; 0x32
    2240:	ab ab       	std	Y+51, r26	; 0x33
    2242:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2244:	69 a9       	ldd	r22, Y+49	; 0x31
    2246:	7a a9       	ldd	r23, Y+50	; 0x32
    2248:	8b a9       	ldd	r24, Y+51	; 0x33
    224a:	9c a9       	ldd	r25, Y+52	; 0x34
    224c:	20 e0       	ldi	r18, 0x00	; 0
    224e:	30 e0       	ldi	r19, 0x00	; 0
    2250:	40 e8       	ldi	r20, 0x80	; 128
    2252:	5f e3       	ldi	r21, 0x3F	; 63
    2254:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2258:	88 23       	and	r24, r24
    225a:	2c f4       	brge	.+10     	; 0x2266 <LCD_displayCharacter+0x72>
		__ticks = 1;
    225c:	81 e0       	ldi	r24, 0x01	; 1
    225e:	90 e0       	ldi	r25, 0x00	; 0
    2260:	98 ab       	std	Y+48, r25	; 0x30
    2262:	8f a7       	std	Y+47, r24	; 0x2f
    2264:	3f c0       	rjmp	.+126    	; 0x22e4 <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    2266:	69 a9       	ldd	r22, Y+49	; 0x31
    2268:	7a a9       	ldd	r23, Y+50	; 0x32
    226a:	8b a9       	ldd	r24, Y+51	; 0x33
    226c:	9c a9       	ldd	r25, Y+52	; 0x34
    226e:	20 e0       	ldi	r18, 0x00	; 0
    2270:	3f ef       	ldi	r19, 0xFF	; 255
    2272:	4f e7       	ldi	r20, 0x7F	; 127
    2274:	57 e4       	ldi	r21, 0x47	; 71
    2276:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    227a:	18 16       	cp	r1, r24
    227c:	4c f5       	brge	.+82     	; 0x22d0 <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    227e:	6d a9       	ldd	r22, Y+53	; 0x35
    2280:	7e a9       	ldd	r23, Y+54	; 0x36
    2282:	8f a9       	ldd	r24, Y+55	; 0x37
    2284:	98 ad       	ldd	r25, Y+56	; 0x38
    2286:	20 e0       	ldi	r18, 0x00	; 0
    2288:	30 e0       	ldi	r19, 0x00	; 0
    228a:	40 e2       	ldi	r20, 0x20	; 32
    228c:	51 e4       	ldi	r21, 0x41	; 65
    228e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2292:	dc 01       	movw	r26, r24
    2294:	cb 01       	movw	r24, r22
    2296:	bc 01       	movw	r22, r24
    2298:	cd 01       	movw	r24, r26
    229a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    229e:	dc 01       	movw	r26, r24
    22a0:	cb 01       	movw	r24, r22
    22a2:	98 ab       	std	Y+48, r25	; 0x30
    22a4:	8f a7       	std	Y+47, r24	; 0x2f
    22a6:	0f c0       	rjmp	.+30     	; 0x22c6 <LCD_displayCharacter+0xd2>
    22a8:	88 ec       	ldi	r24, 0xC8	; 200
    22aa:	90 e0       	ldi	r25, 0x00	; 0
    22ac:	9e a7       	std	Y+46, r25	; 0x2e
    22ae:	8d a7       	std	Y+45, r24	; 0x2d
    22b0:	8d a5       	ldd	r24, Y+45	; 0x2d
    22b2:	9e a5       	ldd	r25, Y+46	; 0x2e
    22b4:	01 97       	sbiw	r24, 0x01	; 1
    22b6:	f1 f7       	brne	.-4      	; 0x22b4 <LCD_displayCharacter+0xc0>
    22b8:	9e a7       	std	Y+46, r25	; 0x2e
    22ba:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22bc:	8f a5       	ldd	r24, Y+47	; 0x2f
    22be:	98 a9       	ldd	r25, Y+48	; 0x30
    22c0:	01 97       	sbiw	r24, 0x01	; 1
    22c2:	98 ab       	std	Y+48, r25	; 0x30
    22c4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22c6:	8f a5       	ldd	r24, Y+47	; 0x2f
    22c8:	98 a9       	ldd	r25, Y+48	; 0x30
    22ca:	00 97       	sbiw	r24, 0x00	; 0
    22cc:	69 f7       	brne	.-38     	; 0x22a8 <LCD_displayCharacter+0xb4>
    22ce:	14 c0       	rjmp	.+40     	; 0x22f8 <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22d0:	69 a9       	ldd	r22, Y+49	; 0x31
    22d2:	7a a9       	ldd	r23, Y+50	; 0x32
    22d4:	8b a9       	ldd	r24, Y+51	; 0x33
    22d6:	9c a9       	ldd	r25, Y+52	; 0x34
    22d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22dc:	dc 01       	movw	r26, r24
    22de:	cb 01       	movw	r24, r22
    22e0:	98 ab       	std	Y+48, r25	; 0x30
    22e2:	8f a7       	std	Y+47, r24	; 0x2f
    22e4:	8f a5       	ldd	r24, Y+47	; 0x2f
    22e6:	98 a9       	ldd	r25, Y+48	; 0x30
    22e8:	9c a7       	std	Y+44, r25	; 0x2c
    22ea:	8b a7       	std	Y+43, r24	; 0x2b
    22ec:	8b a5       	ldd	r24, Y+43	; 0x2b
    22ee:	9c a5       	ldd	r25, Y+44	; 0x2c
    22f0:	01 97       	sbiw	r24, 0x01	; 1
    22f2:	f1 f7       	brne	.-4      	; 0x22f0 <LCD_displayCharacter+0xfc>
    22f4:	9c a7       	std	Y+44, r25	; 0x2c
    22f6:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    22f8:	82 e0       	ldi	r24, 0x02	; 2
    22fa:	61 e0       	ldi	r22, 0x01	; 1
    22fc:	41 e0       	ldi	r20, 0x01	; 1
    22fe:	0e 94 79 09 	call	0x12f2	; 0x12f2 <GPIO_writePin>
    2302:	80 e0       	ldi	r24, 0x00	; 0
    2304:	90 e0       	ldi	r25, 0x00	; 0
    2306:	a0 e8       	ldi	r26, 0x80	; 128
    2308:	bf e3       	ldi	r27, 0x3F	; 63
    230a:	8f a3       	std	Y+39, r24	; 0x27
    230c:	98 a7       	std	Y+40, r25	; 0x28
    230e:	a9 a7       	std	Y+41, r26	; 0x29
    2310:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2312:	6f a1       	ldd	r22, Y+39	; 0x27
    2314:	78 a5       	ldd	r23, Y+40	; 0x28
    2316:	89 a5       	ldd	r24, Y+41	; 0x29
    2318:	9a a5       	ldd	r25, Y+42	; 0x2a
    231a:	20 e0       	ldi	r18, 0x00	; 0
    231c:	30 e0       	ldi	r19, 0x00	; 0
    231e:	4a ef       	ldi	r20, 0xFA	; 250
    2320:	54 e4       	ldi	r21, 0x44	; 68
    2322:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2326:	dc 01       	movw	r26, r24
    2328:	cb 01       	movw	r24, r22
    232a:	8b a3       	std	Y+35, r24	; 0x23
    232c:	9c a3       	std	Y+36, r25	; 0x24
    232e:	ad a3       	std	Y+37, r26	; 0x25
    2330:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2332:	6b a1       	ldd	r22, Y+35	; 0x23
    2334:	7c a1       	ldd	r23, Y+36	; 0x24
    2336:	8d a1       	ldd	r24, Y+37	; 0x25
    2338:	9e a1       	ldd	r25, Y+38	; 0x26
    233a:	20 e0       	ldi	r18, 0x00	; 0
    233c:	30 e0       	ldi	r19, 0x00	; 0
    233e:	40 e8       	ldi	r20, 0x80	; 128
    2340:	5f e3       	ldi	r21, 0x3F	; 63
    2342:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2346:	88 23       	and	r24, r24
    2348:	2c f4       	brge	.+10     	; 0x2354 <LCD_displayCharacter+0x160>
		__ticks = 1;
    234a:	81 e0       	ldi	r24, 0x01	; 1
    234c:	90 e0       	ldi	r25, 0x00	; 0
    234e:	9a a3       	std	Y+34, r25	; 0x22
    2350:	89 a3       	std	Y+33, r24	; 0x21
    2352:	3f c0       	rjmp	.+126    	; 0x23d2 <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    2354:	6b a1       	ldd	r22, Y+35	; 0x23
    2356:	7c a1       	ldd	r23, Y+36	; 0x24
    2358:	8d a1       	ldd	r24, Y+37	; 0x25
    235a:	9e a1       	ldd	r25, Y+38	; 0x26
    235c:	20 e0       	ldi	r18, 0x00	; 0
    235e:	3f ef       	ldi	r19, 0xFF	; 255
    2360:	4f e7       	ldi	r20, 0x7F	; 127
    2362:	57 e4       	ldi	r21, 0x47	; 71
    2364:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2368:	18 16       	cp	r1, r24
    236a:	4c f5       	brge	.+82     	; 0x23be <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    236c:	6f a1       	ldd	r22, Y+39	; 0x27
    236e:	78 a5       	ldd	r23, Y+40	; 0x28
    2370:	89 a5       	ldd	r24, Y+41	; 0x29
    2372:	9a a5       	ldd	r25, Y+42	; 0x2a
    2374:	20 e0       	ldi	r18, 0x00	; 0
    2376:	30 e0       	ldi	r19, 0x00	; 0
    2378:	40 e2       	ldi	r20, 0x20	; 32
    237a:	51 e4       	ldi	r21, 0x41	; 65
    237c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2380:	dc 01       	movw	r26, r24
    2382:	cb 01       	movw	r24, r22
    2384:	bc 01       	movw	r22, r24
    2386:	cd 01       	movw	r24, r26
    2388:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    238c:	dc 01       	movw	r26, r24
    238e:	cb 01       	movw	r24, r22
    2390:	9a a3       	std	Y+34, r25	; 0x22
    2392:	89 a3       	std	Y+33, r24	; 0x21
    2394:	0f c0       	rjmp	.+30     	; 0x23b4 <LCD_displayCharacter+0x1c0>
    2396:	88 ec       	ldi	r24, 0xC8	; 200
    2398:	90 e0       	ldi	r25, 0x00	; 0
    239a:	98 a3       	std	Y+32, r25	; 0x20
    239c:	8f 8f       	std	Y+31, r24	; 0x1f
    239e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    23a0:	98 a1       	ldd	r25, Y+32	; 0x20
    23a2:	01 97       	sbiw	r24, 0x01	; 1
    23a4:	f1 f7       	brne	.-4      	; 0x23a2 <LCD_displayCharacter+0x1ae>
    23a6:	98 a3       	std	Y+32, r25	; 0x20
    23a8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23aa:	89 a1       	ldd	r24, Y+33	; 0x21
    23ac:	9a a1       	ldd	r25, Y+34	; 0x22
    23ae:	01 97       	sbiw	r24, 0x01	; 1
    23b0:	9a a3       	std	Y+34, r25	; 0x22
    23b2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23b4:	89 a1       	ldd	r24, Y+33	; 0x21
    23b6:	9a a1       	ldd	r25, Y+34	; 0x22
    23b8:	00 97       	sbiw	r24, 0x00	; 0
    23ba:	69 f7       	brne	.-38     	; 0x2396 <LCD_displayCharacter+0x1a2>
    23bc:	14 c0       	rjmp	.+40     	; 0x23e6 <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23be:	6b a1       	ldd	r22, Y+35	; 0x23
    23c0:	7c a1       	ldd	r23, Y+36	; 0x24
    23c2:	8d a1       	ldd	r24, Y+37	; 0x25
    23c4:	9e a1       	ldd	r25, Y+38	; 0x26
    23c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23ca:	dc 01       	movw	r26, r24
    23cc:	cb 01       	movw	r24, r22
    23ce:	9a a3       	std	Y+34, r25	; 0x22
    23d0:	89 a3       	std	Y+33, r24	; 0x21
    23d2:	89 a1       	ldd	r24, Y+33	; 0x21
    23d4:	9a a1       	ldd	r25, Y+34	; 0x22
    23d6:	9e 8f       	std	Y+30, r25	; 0x1e
    23d8:	8d 8f       	std	Y+29, r24	; 0x1d
    23da:	8d 8d       	ldd	r24, Y+29	; 0x1d
    23dc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    23de:	01 97       	sbiw	r24, 0x01	; 1
    23e0:	f1 f7       	brne	.-4      	; 0x23de <LCD_displayCharacter+0x1ea>
    23e2:	9e 8f       	std	Y+30, r25	; 0x1e
    23e4:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    23e6:	80 e0       	ldi	r24, 0x00	; 0
    23e8:	69 ad       	ldd	r22, Y+57	; 0x39
    23ea:	0e 94 43 0b 	call	0x1686	; 0x1686 <GPIO_writePort>
    23ee:	80 e0       	ldi	r24, 0x00	; 0
    23f0:	90 e0       	ldi	r25, 0x00	; 0
    23f2:	a0 e8       	ldi	r26, 0x80	; 128
    23f4:	bf e3       	ldi	r27, 0x3F	; 63
    23f6:	89 8f       	std	Y+25, r24	; 0x19
    23f8:	9a 8f       	std	Y+26, r25	; 0x1a
    23fa:	ab 8f       	std	Y+27, r26	; 0x1b
    23fc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23fe:	69 8d       	ldd	r22, Y+25	; 0x19
    2400:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2402:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2404:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2406:	20 e0       	ldi	r18, 0x00	; 0
    2408:	30 e0       	ldi	r19, 0x00	; 0
    240a:	4a ef       	ldi	r20, 0xFA	; 250
    240c:	54 e4       	ldi	r21, 0x44	; 68
    240e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2412:	dc 01       	movw	r26, r24
    2414:	cb 01       	movw	r24, r22
    2416:	8d 8b       	std	Y+21, r24	; 0x15
    2418:	9e 8b       	std	Y+22, r25	; 0x16
    241a:	af 8b       	std	Y+23, r26	; 0x17
    241c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    241e:	6d 89       	ldd	r22, Y+21	; 0x15
    2420:	7e 89       	ldd	r23, Y+22	; 0x16
    2422:	8f 89       	ldd	r24, Y+23	; 0x17
    2424:	98 8d       	ldd	r25, Y+24	; 0x18
    2426:	20 e0       	ldi	r18, 0x00	; 0
    2428:	30 e0       	ldi	r19, 0x00	; 0
    242a:	40 e8       	ldi	r20, 0x80	; 128
    242c:	5f e3       	ldi	r21, 0x3F	; 63
    242e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2432:	88 23       	and	r24, r24
    2434:	2c f4       	brge	.+10     	; 0x2440 <LCD_displayCharacter+0x24c>
		__ticks = 1;
    2436:	81 e0       	ldi	r24, 0x01	; 1
    2438:	90 e0       	ldi	r25, 0x00	; 0
    243a:	9c 8b       	std	Y+20, r25	; 0x14
    243c:	8b 8b       	std	Y+19, r24	; 0x13
    243e:	3f c0       	rjmp	.+126    	; 0x24be <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    2440:	6d 89       	ldd	r22, Y+21	; 0x15
    2442:	7e 89       	ldd	r23, Y+22	; 0x16
    2444:	8f 89       	ldd	r24, Y+23	; 0x17
    2446:	98 8d       	ldd	r25, Y+24	; 0x18
    2448:	20 e0       	ldi	r18, 0x00	; 0
    244a:	3f ef       	ldi	r19, 0xFF	; 255
    244c:	4f e7       	ldi	r20, 0x7F	; 127
    244e:	57 e4       	ldi	r21, 0x47	; 71
    2450:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2454:	18 16       	cp	r1, r24
    2456:	4c f5       	brge	.+82     	; 0x24aa <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2458:	69 8d       	ldd	r22, Y+25	; 0x19
    245a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    245c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    245e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2460:	20 e0       	ldi	r18, 0x00	; 0
    2462:	30 e0       	ldi	r19, 0x00	; 0
    2464:	40 e2       	ldi	r20, 0x20	; 32
    2466:	51 e4       	ldi	r21, 0x41	; 65
    2468:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    246c:	dc 01       	movw	r26, r24
    246e:	cb 01       	movw	r24, r22
    2470:	bc 01       	movw	r22, r24
    2472:	cd 01       	movw	r24, r26
    2474:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2478:	dc 01       	movw	r26, r24
    247a:	cb 01       	movw	r24, r22
    247c:	9c 8b       	std	Y+20, r25	; 0x14
    247e:	8b 8b       	std	Y+19, r24	; 0x13
    2480:	0f c0       	rjmp	.+30     	; 0x24a0 <LCD_displayCharacter+0x2ac>
    2482:	88 ec       	ldi	r24, 0xC8	; 200
    2484:	90 e0       	ldi	r25, 0x00	; 0
    2486:	9a 8b       	std	Y+18, r25	; 0x12
    2488:	89 8b       	std	Y+17, r24	; 0x11
    248a:	89 89       	ldd	r24, Y+17	; 0x11
    248c:	9a 89       	ldd	r25, Y+18	; 0x12
    248e:	01 97       	sbiw	r24, 0x01	; 1
    2490:	f1 f7       	brne	.-4      	; 0x248e <LCD_displayCharacter+0x29a>
    2492:	9a 8b       	std	Y+18, r25	; 0x12
    2494:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2496:	8b 89       	ldd	r24, Y+19	; 0x13
    2498:	9c 89       	ldd	r25, Y+20	; 0x14
    249a:	01 97       	sbiw	r24, 0x01	; 1
    249c:	9c 8b       	std	Y+20, r25	; 0x14
    249e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24a0:	8b 89       	ldd	r24, Y+19	; 0x13
    24a2:	9c 89       	ldd	r25, Y+20	; 0x14
    24a4:	00 97       	sbiw	r24, 0x00	; 0
    24a6:	69 f7       	brne	.-38     	; 0x2482 <LCD_displayCharacter+0x28e>
    24a8:	14 c0       	rjmp	.+40     	; 0x24d2 <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24aa:	6d 89       	ldd	r22, Y+21	; 0x15
    24ac:	7e 89       	ldd	r23, Y+22	; 0x16
    24ae:	8f 89       	ldd	r24, Y+23	; 0x17
    24b0:	98 8d       	ldd	r25, Y+24	; 0x18
    24b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24b6:	dc 01       	movw	r26, r24
    24b8:	cb 01       	movw	r24, r22
    24ba:	9c 8b       	std	Y+20, r25	; 0x14
    24bc:	8b 8b       	std	Y+19, r24	; 0x13
    24be:	8b 89       	ldd	r24, Y+19	; 0x13
    24c0:	9c 89       	ldd	r25, Y+20	; 0x14
    24c2:	98 8b       	std	Y+16, r25	; 0x10
    24c4:	8f 87       	std	Y+15, r24	; 0x0f
    24c6:	8f 85       	ldd	r24, Y+15	; 0x0f
    24c8:	98 89       	ldd	r25, Y+16	; 0x10
    24ca:	01 97       	sbiw	r24, 0x01	; 1
    24cc:	f1 f7       	brne	.-4      	; 0x24ca <LCD_displayCharacter+0x2d6>
    24ce:	98 8b       	std	Y+16, r25	; 0x10
    24d0:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    24d2:	82 e0       	ldi	r24, 0x02	; 2
    24d4:	61 e0       	ldi	r22, 0x01	; 1
    24d6:	40 e0       	ldi	r20, 0x00	; 0
    24d8:	0e 94 79 09 	call	0x12f2	; 0x12f2 <GPIO_writePin>
    24dc:	80 e0       	ldi	r24, 0x00	; 0
    24de:	90 e0       	ldi	r25, 0x00	; 0
    24e0:	a0 e8       	ldi	r26, 0x80	; 128
    24e2:	bf e3       	ldi	r27, 0x3F	; 63
    24e4:	8b 87       	std	Y+11, r24	; 0x0b
    24e6:	9c 87       	std	Y+12, r25	; 0x0c
    24e8:	ad 87       	std	Y+13, r26	; 0x0d
    24ea:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24ec:	6b 85       	ldd	r22, Y+11	; 0x0b
    24ee:	7c 85       	ldd	r23, Y+12	; 0x0c
    24f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    24f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    24f4:	20 e0       	ldi	r18, 0x00	; 0
    24f6:	30 e0       	ldi	r19, 0x00	; 0
    24f8:	4a ef       	ldi	r20, 0xFA	; 250
    24fa:	54 e4       	ldi	r21, 0x44	; 68
    24fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2500:	dc 01       	movw	r26, r24
    2502:	cb 01       	movw	r24, r22
    2504:	8f 83       	std	Y+7, r24	; 0x07
    2506:	98 87       	std	Y+8, r25	; 0x08
    2508:	a9 87       	std	Y+9, r26	; 0x09
    250a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    250c:	6f 81       	ldd	r22, Y+7	; 0x07
    250e:	78 85       	ldd	r23, Y+8	; 0x08
    2510:	89 85       	ldd	r24, Y+9	; 0x09
    2512:	9a 85       	ldd	r25, Y+10	; 0x0a
    2514:	20 e0       	ldi	r18, 0x00	; 0
    2516:	30 e0       	ldi	r19, 0x00	; 0
    2518:	40 e8       	ldi	r20, 0x80	; 128
    251a:	5f e3       	ldi	r21, 0x3F	; 63
    251c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2520:	88 23       	and	r24, r24
    2522:	2c f4       	brge	.+10     	; 0x252e <LCD_displayCharacter+0x33a>
		__ticks = 1;
    2524:	81 e0       	ldi	r24, 0x01	; 1
    2526:	90 e0       	ldi	r25, 0x00	; 0
    2528:	9e 83       	std	Y+6, r25	; 0x06
    252a:	8d 83       	std	Y+5, r24	; 0x05
    252c:	3f c0       	rjmp	.+126    	; 0x25ac <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    252e:	6f 81       	ldd	r22, Y+7	; 0x07
    2530:	78 85       	ldd	r23, Y+8	; 0x08
    2532:	89 85       	ldd	r24, Y+9	; 0x09
    2534:	9a 85       	ldd	r25, Y+10	; 0x0a
    2536:	20 e0       	ldi	r18, 0x00	; 0
    2538:	3f ef       	ldi	r19, 0xFF	; 255
    253a:	4f e7       	ldi	r20, 0x7F	; 127
    253c:	57 e4       	ldi	r21, 0x47	; 71
    253e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2542:	18 16       	cp	r1, r24
    2544:	4c f5       	brge	.+82     	; 0x2598 <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2546:	6b 85       	ldd	r22, Y+11	; 0x0b
    2548:	7c 85       	ldd	r23, Y+12	; 0x0c
    254a:	8d 85       	ldd	r24, Y+13	; 0x0d
    254c:	9e 85       	ldd	r25, Y+14	; 0x0e
    254e:	20 e0       	ldi	r18, 0x00	; 0
    2550:	30 e0       	ldi	r19, 0x00	; 0
    2552:	40 e2       	ldi	r20, 0x20	; 32
    2554:	51 e4       	ldi	r21, 0x41	; 65
    2556:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    255a:	dc 01       	movw	r26, r24
    255c:	cb 01       	movw	r24, r22
    255e:	bc 01       	movw	r22, r24
    2560:	cd 01       	movw	r24, r26
    2562:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2566:	dc 01       	movw	r26, r24
    2568:	cb 01       	movw	r24, r22
    256a:	9e 83       	std	Y+6, r25	; 0x06
    256c:	8d 83       	std	Y+5, r24	; 0x05
    256e:	0f c0       	rjmp	.+30     	; 0x258e <LCD_displayCharacter+0x39a>
    2570:	88 ec       	ldi	r24, 0xC8	; 200
    2572:	90 e0       	ldi	r25, 0x00	; 0
    2574:	9c 83       	std	Y+4, r25	; 0x04
    2576:	8b 83       	std	Y+3, r24	; 0x03
    2578:	8b 81       	ldd	r24, Y+3	; 0x03
    257a:	9c 81       	ldd	r25, Y+4	; 0x04
    257c:	01 97       	sbiw	r24, 0x01	; 1
    257e:	f1 f7       	brne	.-4      	; 0x257c <LCD_displayCharacter+0x388>
    2580:	9c 83       	std	Y+4, r25	; 0x04
    2582:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2584:	8d 81       	ldd	r24, Y+5	; 0x05
    2586:	9e 81       	ldd	r25, Y+6	; 0x06
    2588:	01 97       	sbiw	r24, 0x01	; 1
    258a:	9e 83       	std	Y+6, r25	; 0x06
    258c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    258e:	8d 81       	ldd	r24, Y+5	; 0x05
    2590:	9e 81       	ldd	r25, Y+6	; 0x06
    2592:	00 97       	sbiw	r24, 0x00	; 0
    2594:	69 f7       	brne	.-38     	; 0x2570 <LCD_displayCharacter+0x37c>
    2596:	14 c0       	rjmp	.+40     	; 0x25c0 <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2598:	6f 81       	ldd	r22, Y+7	; 0x07
    259a:	78 85       	ldd	r23, Y+8	; 0x08
    259c:	89 85       	ldd	r24, Y+9	; 0x09
    259e:	9a 85       	ldd	r25, Y+10	; 0x0a
    25a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25a4:	dc 01       	movw	r26, r24
    25a6:	cb 01       	movw	r24, r22
    25a8:	9e 83       	std	Y+6, r25	; 0x06
    25aa:	8d 83       	std	Y+5, r24	; 0x05
    25ac:	8d 81       	ldd	r24, Y+5	; 0x05
    25ae:	9e 81       	ldd	r25, Y+6	; 0x06
    25b0:	9a 83       	std	Y+2, r25	; 0x02
    25b2:	89 83       	std	Y+1, r24	; 0x01
    25b4:	89 81       	ldd	r24, Y+1	; 0x01
    25b6:	9a 81       	ldd	r25, Y+2	; 0x02
    25b8:	01 97       	sbiw	r24, 0x01	; 1
    25ba:	f1 f7       	brne	.-4      	; 0x25b8 <LCD_displayCharacter+0x3c4>
    25bc:	9a 83       	std	Y+2, r25	; 0x02
    25be:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    25c0:	e9 96       	adiw	r28, 0x39	; 57
    25c2:	0f b6       	in	r0, 0x3f	; 63
    25c4:	f8 94       	cli
    25c6:	de bf       	out	0x3e, r29	; 62
    25c8:	0f be       	out	0x3f, r0	; 63
    25ca:	cd bf       	out	0x3d, r28	; 61
    25cc:	cf 91       	pop	r28
    25ce:	df 91       	pop	r29
    25d0:	08 95       	ret

000025d2 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    25d2:	df 93       	push	r29
    25d4:	cf 93       	push	r28
    25d6:	00 d0       	rcall	.+0      	; 0x25d8 <LCD_displayString+0x6>
    25d8:	0f 92       	push	r0
    25da:	cd b7       	in	r28, 0x3d	; 61
    25dc:	de b7       	in	r29, 0x3e	; 62
    25de:	9b 83       	std	Y+3, r25	; 0x03
    25e0:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    25e2:	19 82       	std	Y+1, r1	; 0x01
    25e4:	0e c0       	rjmp	.+28     	; 0x2602 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    25e6:	89 81       	ldd	r24, Y+1	; 0x01
    25e8:	28 2f       	mov	r18, r24
    25ea:	30 e0       	ldi	r19, 0x00	; 0
    25ec:	8a 81       	ldd	r24, Y+2	; 0x02
    25ee:	9b 81       	ldd	r25, Y+3	; 0x03
    25f0:	fc 01       	movw	r30, r24
    25f2:	e2 0f       	add	r30, r18
    25f4:	f3 1f       	adc	r31, r19
    25f6:	80 81       	ld	r24, Z
    25f8:	0e 94 fa 10 	call	0x21f4	; 0x21f4 <LCD_displayCharacter>
		i++;
    25fc:	89 81       	ldd	r24, Y+1	; 0x01
    25fe:	8f 5f       	subi	r24, 0xFF	; 255
    2600:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2602:	89 81       	ldd	r24, Y+1	; 0x01
    2604:	28 2f       	mov	r18, r24
    2606:	30 e0       	ldi	r19, 0x00	; 0
    2608:	8a 81       	ldd	r24, Y+2	; 0x02
    260a:	9b 81       	ldd	r25, Y+3	; 0x03
    260c:	fc 01       	movw	r30, r24
    260e:	e2 0f       	add	r30, r18
    2610:	f3 1f       	adc	r31, r19
    2612:	80 81       	ld	r24, Z
    2614:	88 23       	and	r24, r24
    2616:	39 f7       	brne	.-50     	; 0x25e6 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    2618:	0f 90       	pop	r0
    261a:	0f 90       	pop	r0
    261c:	0f 90       	pop	r0
    261e:	cf 91       	pop	r28
    2620:	df 91       	pop	r29
    2622:	08 95       	ret

00002624 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    2624:	df 93       	push	r29
    2626:	cf 93       	push	r28
    2628:	00 d0       	rcall	.+0      	; 0x262a <LCD_moveCursor+0x6>
    262a:	00 d0       	rcall	.+0      	; 0x262c <LCD_moveCursor+0x8>
    262c:	0f 92       	push	r0
    262e:	cd b7       	in	r28, 0x3d	; 61
    2630:	de b7       	in	r29, 0x3e	; 62
    2632:	8a 83       	std	Y+2, r24	; 0x02
    2634:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    2636:	8a 81       	ldd	r24, Y+2	; 0x02
    2638:	28 2f       	mov	r18, r24
    263a:	30 e0       	ldi	r19, 0x00	; 0
    263c:	3d 83       	std	Y+5, r19	; 0x05
    263e:	2c 83       	std	Y+4, r18	; 0x04
    2640:	8c 81       	ldd	r24, Y+4	; 0x04
    2642:	9d 81       	ldd	r25, Y+5	; 0x05
    2644:	81 30       	cpi	r24, 0x01	; 1
    2646:	91 05       	cpc	r25, r1
    2648:	c1 f0       	breq	.+48     	; 0x267a <LCD_moveCursor+0x56>
    264a:	2c 81       	ldd	r18, Y+4	; 0x04
    264c:	3d 81       	ldd	r19, Y+5	; 0x05
    264e:	22 30       	cpi	r18, 0x02	; 2
    2650:	31 05       	cpc	r19, r1
    2652:	2c f4       	brge	.+10     	; 0x265e <LCD_moveCursor+0x3a>
    2654:	8c 81       	ldd	r24, Y+4	; 0x04
    2656:	9d 81       	ldd	r25, Y+5	; 0x05
    2658:	00 97       	sbiw	r24, 0x00	; 0
    265a:	61 f0       	breq	.+24     	; 0x2674 <LCD_moveCursor+0x50>
    265c:	19 c0       	rjmp	.+50     	; 0x2690 <LCD_moveCursor+0x6c>
    265e:	2c 81       	ldd	r18, Y+4	; 0x04
    2660:	3d 81       	ldd	r19, Y+5	; 0x05
    2662:	22 30       	cpi	r18, 0x02	; 2
    2664:	31 05       	cpc	r19, r1
    2666:	69 f0       	breq	.+26     	; 0x2682 <LCD_moveCursor+0x5e>
    2668:	8c 81       	ldd	r24, Y+4	; 0x04
    266a:	9d 81       	ldd	r25, Y+5	; 0x05
    266c:	83 30       	cpi	r24, 0x03	; 3
    266e:	91 05       	cpc	r25, r1
    2670:	61 f0       	breq	.+24     	; 0x268a <LCD_moveCursor+0x66>
    2672:	0e c0       	rjmp	.+28     	; 0x2690 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    2674:	8b 81       	ldd	r24, Y+3	; 0x03
    2676:	89 83       	std	Y+1, r24	; 0x01
    2678:	0b c0       	rjmp	.+22     	; 0x2690 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    267a:	8b 81       	ldd	r24, Y+3	; 0x03
    267c:	80 5c       	subi	r24, 0xC0	; 192
    267e:	89 83       	std	Y+1, r24	; 0x01
    2680:	07 c0       	rjmp	.+14     	; 0x2690 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    2682:	8b 81       	ldd	r24, Y+3	; 0x03
    2684:	80 5f       	subi	r24, 0xF0	; 240
    2686:	89 83       	std	Y+1, r24	; 0x01
    2688:	03 c0       	rjmp	.+6      	; 0x2690 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    268a:	8b 81       	ldd	r24, Y+3	; 0x03
    268c:	80 5b       	subi	r24, 0xB0	; 176
    268e:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    2690:	89 81       	ldd	r24, Y+1	; 0x01
    2692:	80 68       	ori	r24, 0x80	; 128
    2694:	0e 94 0b 0f 	call	0x1e16	; 0x1e16 <LCD_sendCommand>
}
    2698:	0f 90       	pop	r0
    269a:	0f 90       	pop	r0
    269c:	0f 90       	pop	r0
    269e:	0f 90       	pop	r0
    26a0:	0f 90       	pop	r0
    26a2:	cf 91       	pop	r28
    26a4:	df 91       	pop	r29
    26a6:	08 95       	ret

000026a8 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    26a8:	df 93       	push	r29
    26aa:	cf 93       	push	r28
    26ac:	00 d0       	rcall	.+0      	; 0x26ae <LCD_displayStringRowColumn+0x6>
    26ae:	00 d0       	rcall	.+0      	; 0x26b0 <LCD_displayStringRowColumn+0x8>
    26b0:	cd b7       	in	r28, 0x3d	; 61
    26b2:	de b7       	in	r29, 0x3e	; 62
    26b4:	89 83       	std	Y+1, r24	; 0x01
    26b6:	6a 83       	std	Y+2, r22	; 0x02
    26b8:	5c 83       	std	Y+4, r21	; 0x04
    26ba:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    26bc:	89 81       	ldd	r24, Y+1	; 0x01
    26be:	6a 81       	ldd	r22, Y+2	; 0x02
    26c0:	0e 94 12 13 	call	0x2624	; 0x2624 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    26c4:	8b 81       	ldd	r24, Y+3	; 0x03
    26c6:	9c 81       	ldd	r25, Y+4	; 0x04
    26c8:	0e 94 e9 12 	call	0x25d2	; 0x25d2 <LCD_displayString>
}
    26cc:	0f 90       	pop	r0
    26ce:	0f 90       	pop	r0
    26d0:	0f 90       	pop	r0
    26d2:	0f 90       	pop	r0
    26d4:	cf 91       	pop	r28
    26d6:	df 91       	pop	r29
    26d8:	08 95       	ret

000026da <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    26da:	df 93       	push	r29
    26dc:	cf 93       	push	r28
    26de:	cd b7       	in	r28, 0x3d	; 61
    26e0:	de b7       	in	r29, 0x3e	; 62
    26e2:	62 97       	sbiw	r28, 0x12	; 18
    26e4:	0f b6       	in	r0, 0x3f	; 63
    26e6:	f8 94       	cli
    26e8:	de bf       	out	0x3e, r29	; 62
    26ea:	0f be       	out	0x3f, r0	; 63
    26ec:	cd bf       	out	0x3d, r28	; 61
    26ee:	9a 8b       	std	Y+18, r25	; 0x12
    26f0:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    26f2:	89 89       	ldd	r24, Y+17	; 0x11
    26f4:	9a 89       	ldd	r25, Y+18	; 0x12
    26f6:	9e 01       	movw	r18, r28
    26f8:	2f 5f       	subi	r18, 0xFF	; 255
    26fa:	3f 4f       	sbci	r19, 0xFF	; 255
    26fc:	b9 01       	movw	r22, r18
    26fe:	4a e0       	ldi	r20, 0x0A	; 10
    2700:	50 e0       	ldi	r21, 0x00	; 0
    2702:	0e 94 23 1e 	call	0x3c46	; 0x3c46 <itoa>
   LCD_displayString(buff); /* Display the string */
    2706:	ce 01       	movw	r24, r28
    2708:	01 96       	adiw	r24, 0x01	; 1
    270a:	0e 94 e9 12 	call	0x25d2	; 0x25d2 <LCD_displayString>
}
    270e:	62 96       	adiw	r28, 0x12	; 18
    2710:	0f b6       	in	r0, 0x3f	; 63
    2712:	f8 94       	cli
    2714:	de bf       	out	0x3e, r29	; 62
    2716:	0f be       	out	0x3f, r0	; 63
    2718:	cd bf       	out	0x3d, r28	; 61
    271a:	cf 91       	pop	r28
    271c:	df 91       	pop	r29
    271e:	08 95       	ret

00002720 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    2720:	df 93       	push	r29
    2722:	cf 93       	push	r28
    2724:	cd b7       	in	r28, 0x3d	; 61
    2726:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    2728:	81 e0       	ldi	r24, 0x01	; 1
    272a:	0e 94 0b 0f 	call	0x1e16	; 0x1e16 <LCD_sendCommand>
}
    272e:	cf 91       	pop	r28
    2730:	df 91       	pop	r29
    2732:	08 95       	ret

00002734 <main>:
uint8 tick = 0;
uint8 attempt_count = 0;

void timer_callback();

int main(void) {
    2734:	0f 93       	push	r16
    2736:	1f 93       	push	r17
    2738:	df 93       	push	r29
    273a:	cf 93       	push	r28
    273c:	cd b7       	in	r28, 0x3d	; 61
    273e:	de b7       	in	r29, 0x3e	; 62
    2740:	ca 5c       	subi	r28, 0xCA	; 202
    2742:	d0 40       	sbci	r29, 0x00	; 0
    2744:	0f b6       	in	r0, 0x3f	; 63
    2746:	f8 94       	cli
    2748:	de bf       	out	0x3e, r29	; 62
    274a:	0f be       	out	0x3f, r0	; 63
    274c:	cd bf       	out	0x3d, r28	; 61
	SREG |= (1 << 7);
    274e:	af e5       	ldi	r26, 0x5F	; 95
    2750:	b0 e0       	ldi	r27, 0x00	; 0
    2752:	ef e5       	ldi	r30, 0x5F	; 95
    2754:	f0 e0       	ldi	r31, 0x00	; 0
    2756:	80 81       	ld	r24, Z
    2758:	80 68       	ori	r24, 0x80	; 128
    275a:	8c 93       	st	X, r24
	LCD_init();
    275c:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <LCD_init>
	UART_ConfigType uart_config = { UART_8Bit, UART_Parity_disable,
			UART_ONE_STOP_BIT, UART_BaudRate };
    2760:	ce 01       	movw	r24, r28
    2762:	89 55       	subi	r24, 0x59	; 89
    2764:	9f 4f       	sbci	r25, 0xFF	; 255
    2766:	cf 53       	subi	r28, 0x3F	; 63
    2768:	df 4f       	sbci	r29, 0xFF	; 255
    276a:	99 83       	std	Y+1, r25	; 0x01
    276c:	88 83       	st	Y, r24
    276e:	c1 5c       	subi	r28, 0xC1	; 193
    2770:	d0 40       	sbci	r29, 0x00	; 0
    2772:	24 e3       	ldi	r18, 0x34	; 52
    2774:	31 e0       	ldi	r19, 0x01	; 1
    2776:	cd 53       	subi	r28, 0x3D	; 61
    2778:	df 4f       	sbci	r29, 0xFF	; 255
    277a:	39 83       	std	Y+1, r19	; 0x01
    277c:	28 83       	st	Y, r18
    277e:	c3 5c       	subi	r28, 0xC3	; 195
    2780:	d0 40       	sbci	r29, 0x00	; 0
    2782:	37 e0       	ldi	r19, 0x07	; 7
    2784:	cb 53       	subi	r28, 0x3B	; 59
    2786:	df 4f       	sbci	r29, 0xFF	; 255
    2788:	38 83       	st	Y, r19
    278a:	c5 5c       	subi	r28, 0xC5	; 197
    278c:	d0 40       	sbci	r29, 0x00	; 0
    278e:	cd 53       	subi	r28, 0x3D	; 61
    2790:	df 4f       	sbci	r29, 0xFF	; 255
    2792:	e8 81       	ld	r30, Y
    2794:	f9 81       	ldd	r31, Y+1	; 0x01
    2796:	c3 5c       	subi	r28, 0xC3	; 195
    2798:	d0 40       	sbci	r29, 0x00	; 0
    279a:	00 80       	ld	r0, Z
    279c:	cd 53       	subi	r28, 0x3D	; 61
    279e:	df 4f       	sbci	r29, 0xFF	; 255
    27a0:	28 81       	ld	r18, Y
    27a2:	39 81       	ldd	r19, Y+1	; 0x01
    27a4:	c3 5c       	subi	r28, 0xC3	; 195
    27a6:	d0 40       	sbci	r29, 0x00	; 0
    27a8:	2f 5f       	subi	r18, 0xFF	; 255
    27aa:	3f 4f       	sbci	r19, 0xFF	; 255
    27ac:	cd 53       	subi	r28, 0x3D	; 61
    27ae:	df 4f       	sbci	r29, 0xFF	; 255
    27b0:	39 83       	std	Y+1, r19	; 0x01
    27b2:	28 83       	st	Y, r18
    27b4:	c3 5c       	subi	r28, 0xC3	; 195
    27b6:	d0 40       	sbci	r29, 0x00	; 0
    27b8:	cf 53       	subi	r28, 0x3F	; 63
    27ba:	df 4f       	sbci	r29, 0xFF	; 255
    27bc:	e8 81       	ld	r30, Y
    27be:	f9 81       	ldd	r31, Y+1	; 0x01
    27c0:	c1 5c       	subi	r28, 0xC1	; 193
    27c2:	d0 40       	sbci	r29, 0x00	; 0
    27c4:	00 82       	st	Z, r0
    27c6:	cf 53       	subi	r28, 0x3F	; 63
    27c8:	df 4f       	sbci	r29, 0xFF	; 255
    27ca:	28 81       	ld	r18, Y
    27cc:	39 81       	ldd	r19, Y+1	; 0x01
    27ce:	c1 5c       	subi	r28, 0xC1	; 193
    27d0:	d0 40       	sbci	r29, 0x00	; 0
    27d2:	2f 5f       	subi	r18, 0xFF	; 255
    27d4:	3f 4f       	sbci	r19, 0xFF	; 255
    27d6:	cf 53       	subi	r28, 0x3F	; 63
    27d8:	df 4f       	sbci	r29, 0xFF	; 255
    27da:	39 83       	std	Y+1, r19	; 0x01
    27dc:	28 83       	st	Y, r18
    27de:	c1 5c       	subi	r28, 0xC1	; 193
    27e0:	d0 40       	sbci	r29, 0x00	; 0
    27e2:	cb 53       	subi	r28, 0x3B	; 59
    27e4:	df 4f       	sbci	r29, 0xFF	; 255
    27e6:	38 81       	ld	r19, Y
    27e8:	c5 5c       	subi	r28, 0xC5	; 197
    27ea:	d0 40       	sbci	r29, 0x00	; 0
    27ec:	31 50       	subi	r19, 0x01	; 1
    27ee:	cb 53       	subi	r28, 0x3B	; 59
    27f0:	df 4f       	sbci	r29, 0xFF	; 255
    27f2:	38 83       	st	Y, r19
    27f4:	c5 5c       	subi	r28, 0xC5	; 197
    27f6:	d0 40       	sbci	r29, 0x00	; 0
    27f8:	cb 53       	subi	r28, 0x3B	; 59
    27fa:	df 4f       	sbci	r29, 0xFF	; 255
    27fc:	88 81       	ld	r24, Y
    27fe:	c5 5c       	subi	r28, 0xC5	; 197
    2800:	d0 40       	sbci	r29, 0x00	; 0
    2802:	88 23       	and	r24, r24
    2804:	21 f6       	brne	.-120    	; 0x278e <main+0x5a>
	UART_init(&uart_config);
    2806:	ce 01       	movw	r24, r28
    2808:	89 55       	subi	r24, 0x59	; 89
    280a:	9f 4f       	sbci	r25, 0xFF	; 255
    280c:	0e 94 cc 0b 	call	0x1798	; 0x1798 <UART_init>
	Timer_ConfigType timer_config = { 0, 7813, TIMER1, NO_CLOCK, COMPARE_MODE };
    2810:	ce 01       	movw	r24, r28
    2812:	82 55       	subi	r24, 0x52	; 82
    2814:	9f 4f       	sbci	r25, 0xFF	; 255
    2816:	ca 53       	subi	r28, 0x3A	; 58
    2818:	df 4f       	sbci	r29, 0xFF	; 255
    281a:	99 83       	std	Y+1, r25	; 0x01
    281c:	88 83       	st	Y, r24
    281e:	c6 5c       	subi	r28, 0xC6	; 198
    2820:	d0 40       	sbci	r29, 0x00	; 0
    2822:	ed e2       	ldi	r30, 0x2D	; 45
    2824:	f1 e0       	ldi	r31, 0x01	; 1
    2826:	c8 53       	subi	r28, 0x38	; 56
    2828:	df 4f       	sbci	r29, 0xFF	; 255
    282a:	f9 83       	std	Y+1, r31	; 0x01
    282c:	e8 83       	st	Y, r30
    282e:	c8 5c       	subi	r28, 0xC8	; 200
    2830:	d0 40       	sbci	r29, 0x00	; 0
    2832:	f7 e0       	ldi	r31, 0x07	; 7
    2834:	c6 53       	subi	r28, 0x36	; 54
    2836:	df 4f       	sbci	r29, 0xFF	; 255
    2838:	f8 83       	st	Y, r31
    283a:	ca 5c       	subi	r28, 0xCA	; 202
    283c:	d0 40       	sbci	r29, 0x00	; 0
    283e:	c8 53       	subi	r28, 0x38	; 56
    2840:	df 4f       	sbci	r29, 0xFF	; 255
    2842:	e8 81       	ld	r30, Y
    2844:	f9 81       	ldd	r31, Y+1	; 0x01
    2846:	c8 5c       	subi	r28, 0xC8	; 200
    2848:	d0 40       	sbci	r29, 0x00	; 0
    284a:	00 80       	ld	r0, Z
    284c:	c8 53       	subi	r28, 0x38	; 56
    284e:	df 4f       	sbci	r29, 0xFF	; 255
    2850:	28 81       	ld	r18, Y
    2852:	39 81       	ldd	r19, Y+1	; 0x01
    2854:	c8 5c       	subi	r28, 0xC8	; 200
    2856:	d0 40       	sbci	r29, 0x00	; 0
    2858:	2f 5f       	subi	r18, 0xFF	; 255
    285a:	3f 4f       	sbci	r19, 0xFF	; 255
    285c:	c8 53       	subi	r28, 0x38	; 56
    285e:	df 4f       	sbci	r29, 0xFF	; 255
    2860:	39 83       	std	Y+1, r19	; 0x01
    2862:	28 83       	st	Y, r18
    2864:	c8 5c       	subi	r28, 0xC8	; 200
    2866:	d0 40       	sbci	r29, 0x00	; 0
    2868:	ca 53       	subi	r28, 0x3A	; 58
    286a:	df 4f       	sbci	r29, 0xFF	; 255
    286c:	e8 81       	ld	r30, Y
    286e:	f9 81       	ldd	r31, Y+1	; 0x01
    2870:	c6 5c       	subi	r28, 0xC6	; 198
    2872:	d0 40       	sbci	r29, 0x00	; 0
    2874:	00 82       	st	Z, r0
    2876:	ca 53       	subi	r28, 0x3A	; 58
    2878:	df 4f       	sbci	r29, 0xFF	; 255
    287a:	28 81       	ld	r18, Y
    287c:	39 81       	ldd	r19, Y+1	; 0x01
    287e:	c6 5c       	subi	r28, 0xC6	; 198
    2880:	d0 40       	sbci	r29, 0x00	; 0
    2882:	2f 5f       	subi	r18, 0xFF	; 255
    2884:	3f 4f       	sbci	r19, 0xFF	; 255
    2886:	ca 53       	subi	r28, 0x3A	; 58
    2888:	df 4f       	sbci	r29, 0xFF	; 255
    288a:	39 83       	std	Y+1, r19	; 0x01
    288c:	28 83       	st	Y, r18
    288e:	c6 5c       	subi	r28, 0xC6	; 198
    2890:	d0 40       	sbci	r29, 0x00	; 0
    2892:	c6 53       	subi	r28, 0x36	; 54
    2894:	df 4f       	sbci	r29, 0xFF	; 255
    2896:	38 81       	ld	r19, Y
    2898:	ca 5c       	subi	r28, 0xCA	; 202
    289a:	d0 40       	sbci	r29, 0x00	; 0
    289c:	31 50       	subi	r19, 0x01	; 1
    289e:	c6 53       	subi	r28, 0x36	; 54
    28a0:	df 4f       	sbci	r29, 0xFF	; 255
    28a2:	38 83       	st	Y, r19
    28a4:	ca 5c       	subi	r28, 0xCA	; 202
    28a6:	d0 40       	sbci	r29, 0x00	; 0
    28a8:	c6 53       	subi	r28, 0x36	; 54
    28aa:	df 4f       	sbci	r29, 0xFF	; 255
    28ac:	88 81       	ld	r24, Y
    28ae:	ca 5c       	subi	r28, 0xCA	; 202
    28b0:	d0 40       	sbci	r29, 0x00	; 0
    28b2:	88 23       	and	r24, r24
    28b4:	21 f6       	brne	.-120    	; 0x283e <main+0x10a>
	Timer_init(&timer_config);
    28b6:	ce 01       	movw	r24, r28
    28b8:	82 55       	subi	r24, 0x52	; 82
    28ba:	9f 4f       	sbci	r25, 0xFF	; 255
    28bc:	0e 94 a3 05 	call	0xb46	; 0xb46 <Timer_init>
	Timer_setCallBack(timer_callback, TIMER1);
    28c0:	8e eb       	ldi	r24, 0xBE	; 190
    28c2:	9d e1       	ldi	r25, 0x1D	; 29
    28c4:	61 e0       	ldi	r22, 0x01	; 1
    28c6:	0e 94 b0 06 	call	0xd60	; 0xd60 <Timer_setCallBack>
	uint8 password[PASSWORD_LENGTH];
	uint8 verification_password[PASSWORD_LENGTH];
	uint8 result;
	uint8 result2;
	while (1) {
		switch (state) {
    28ca:	80 91 42 01 	lds	r24, 0x0142
    28ce:	e8 2f       	mov	r30, r24
    28d0:	f0 e0       	ldi	r31, 0x00	; 0
    28d2:	c1 54       	subi	r28, 0x41	; 65
    28d4:	df 4f       	sbci	r29, 0xFF	; 255
    28d6:	f9 83       	std	Y+1, r31	; 0x01
    28d8:	e8 83       	st	Y, r30
    28da:	cf 5b       	subi	r28, 0xBF	; 191
    28dc:	d0 40       	sbci	r29, 0x00	; 0
    28de:	c1 54       	subi	r28, 0x41	; 65
    28e0:	df 4f       	sbci	r29, 0xFF	; 255
    28e2:	28 81       	ld	r18, Y
    28e4:	39 81       	ldd	r19, Y+1	; 0x01
    28e6:	cf 5b       	subi	r28, 0xBF	; 191
    28e8:	d0 40       	sbci	r29, 0x00	; 0
    28ea:	22 30       	cpi	r18, 0x02	; 2
    28ec:	31 05       	cpc	r19, r1
    28ee:	09 f4       	brne	.+2      	; 0x28f2 <main+0x1be>
    28f0:	5f c2       	rjmp	.+1214   	; 0x2db0 <main+0x67c>
    28f2:	c1 54       	subi	r28, 0x41	; 65
    28f4:	df 4f       	sbci	r29, 0xFF	; 255
    28f6:	88 81       	ld	r24, Y
    28f8:	99 81       	ldd	r25, Y+1	; 0x01
    28fa:	cf 5b       	subi	r28, 0xBF	; 191
    28fc:	d0 40       	sbci	r29, 0x00	; 0
    28fe:	83 30       	cpi	r24, 0x03	; 3
    2900:	91 05       	cpc	r25, r1
    2902:	9c f4       	brge	.+38     	; 0x292a <main+0x1f6>
    2904:	c1 54       	subi	r28, 0x41	; 65
    2906:	df 4f       	sbci	r29, 0xFF	; 255
    2908:	e8 81       	ld	r30, Y
    290a:	f9 81       	ldd	r31, Y+1	; 0x01
    290c:	cf 5b       	subi	r28, 0xBF	; 191
    290e:	d0 40       	sbci	r29, 0x00	; 0
    2910:	30 97       	sbiw	r30, 0x00	; 0
    2912:	51 f1       	breq	.+84     	; 0x2968 <main+0x234>
    2914:	c1 54       	subi	r28, 0x41	; 65
    2916:	df 4f       	sbci	r29, 0xFF	; 255
    2918:	28 81       	ld	r18, Y
    291a:	39 81       	ldd	r19, Y+1	; 0x01
    291c:	cf 5b       	subi	r28, 0xBF	; 191
    291e:	d0 40       	sbci	r29, 0x00	; 0
    2920:	21 30       	cpi	r18, 0x01	; 1
    2922:	31 05       	cpc	r19, r1
    2924:	09 f4       	brne	.+2      	; 0x2928 <main+0x1f4>
    2926:	59 c0       	rjmp	.+178    	; 0x29da <main+0x2a6>
    2928:	d0 cf       	rjmp	.-96     	; 0x28ca <main+0x196>
    292a:	c1 54       	subi	r28, 0x41	; 65
    292c:	df 4f       	sbci	r29, 0xFF	; 255
    292e:	88 81       	ld	r24, Y
    2930:	99 81       	ldd	r25, Y+1	; 0x01
    2932:	cf 5b       	subi	r28, 0xBF	; 191
    2934:	d0 40       	sbci	r29, 0x00	; 0
    2936:	84 30       	cpi	r24, 0x04	; 4
    2938:	91 05       	cpc	r25, r1
    293a:	09 f4       	brne	.+2      	; 0x293e <main+0x20a>
    293c:	f2 c3       	rjmp	.+2020   	; 0x3122 <main+0x9ee>
    293e:	c1 54       	subi	r28, 0x41	; 65
    2940:	df 4f       	sbci	r29, 0xFF	; 255
    2942:	e8 81       	ld	r30, Y
    2944:	f9 81       	ldd	r31, Y+1	; 0x01
    2946:	cf 5b       	subi	r28, 0xBF	; 191
    2948:	d0 40       	sbci	r29, 0x00	; 0
    294a:	e4 30       	cpi	r30, 0x04	; 4
    294c:	f1 05       	cpc	r31, r1
    294e:	0c f4       	brge	.+2      	; 0x2952 <main+0x21e>
    2950:	bf c3       	rjmp	.+1918   	; 0x30d0 <main+0x99c>
    2952:	c1 54       	subi	r28, 0x41	; 65
    2954:	df 4f       	sbci	r29, 0xFF	; 255
    2956:	28 81       	ld	r18, Y
    2958:	39 81       	ldd	r19, Y+1	; 0x01
    295a:	cf 5b       	subi	r28, 0xBF	; 191
    295c:	d0 40       	sbci	r29, 0x00	; 0
    295e:	25 30       	cpi	r18, 0x05	; 5
    2960:	31 05       	cpc	r19, r1
    2962:	09 f4       	brne	.+2      	; 0x2966 <main+0x232>
    2964:	18 c7       	rjmp	.+3632   	; 0x3796 <main+0x1062>
    2966:	b1 cf       	rjmp	.-158    	; 0x28ca <main+0x196>
		case ENTER_PASSWORD:
			LCD_clearScreen();
    2968:	0e 94 90 13 	call	0x2720	; 0x2720 <LCD_clearScreen>
			LCD_displayString("Enter Password:");
    296c:	80 e6       	ldi	r24, 0x60	; 96
    296e:	90 e0       	ldi	r25, 0x00	; 0
    2970:	0e 94 e9 12 	call	0x25d2	; 0x25d2 <LCD_displayString>
			LCD_moveCursor(1, 0);
    2974:	81 e0       	ldi	r24, 0x01	; 1
    2976:	60 e0       	ldi	r22, 0x00	; 0
    2978:	0e 94 12 13 	call	0x2624	; 0x2624 <LCD_moveCursor>
			for (uint8 i = 0; i < PASSWORD_LENGTH; i++) {
    297c:	fe 01       	movw	r30, r28
    297e:	ed 55       	subi	r30, 0x5D	; 93
    2980:	ff 4f       	sbci	r31, 0xFF	; 255
    2982:	10 82       	st	Z, r1
    2984:	1c c0       	rjmp	.+56     	; 0x29be <main+0x28a>
				password[i] = KEYPAD_getPressedKey();
    2986:	fe 01       	movw	r30, r28
    2988:	ed 55       	subi	r30, 0x5D	; 93
    298a:	ff 4f       	sbci	r31, 0xFF	; 255
    298c:	80 81       	ld	r24, Z
    298e:	08 2f       	mov	r16, r24
    2990:	10 e0       	ldi	r17, 0x00	; 0
    2992:	0e 94 e5 0c 	call	0x19ca	; 0x19ca <KEYPAD_getPressedKey>
    2996:	28 2f       	mov	r18, r24
    2998:	ce 01       	movw	r24, r28
    299a:	8b 54       	subi	r24, 0x4B	; 75
    299c:	9f 4f       	sbci	r25, 0xFF	; 255
    299e:	fc 01       	movw	r30, r24
    29a0:	e0 0f       	add	r30, r16
    29a2:	f1 1f       	adc	r31, r17
    29a4:	20 83       	st	Z, r18
				LCD_displayCharacter('*');
    29a6:	8a e2       	ldi	r24, 0x2A	; 42
    29a8:	0e 94 fa 10 	call	0x21f4	; 0x21f4 <LCD_displayCharacter>
		switch (state) {
		case ENTER_PASSWORD:
			LCD_clearScreen();
			LCD_displayString("Enter Password:");
			LCD_moveCursor(1, 0);
			for (uint8 i = 0; i < PASSWORD_LENGTH; i++) {
    29ac:	de 01       	movw	r26, r28
    29ae:	ad 55       	subi	r26, 0x5D	; 93
    29b0:	bf 4f       	sbci	r27, 0xFF	; 255
    29b2:	fe 01       	movw	r30, r28
    29b4:	ed 55       	subi	r30, 0x5D	; 93
    29b6:	ff 4f       	sbci	r31, 0xFF	; 255
    29b8:	80 81       	ld	r24, Z
    29ba:	8f 5f       	subi	r24, 0xFF	; 255
    29bc:	8c 93       	st	X, r24
    29be:	fe 01       	movw	r30, r28
    29c0:	ed 55       	subi	r30, 0x5D	; 93
    29c2:	ff 4f       	sbci	r31, 0xFF	; 255
    29c4:	80 81       	ld	r24, Z
    29c6:	85 30       	cpi	r24, 0x05	; 5
    29c8:	f0 f2       	brcs	.-68     	; 0x2986 <main+0x252>
				password[i] = KEYPAD_getPressedKey();
				LCD_displayCharacter('*');
			}
			while (KEYPAD_getPressedKey() != ENTER_KEY) {
    29ca:	0e 94 e5 0c 	call	0x19ca	; 0x19ca <KEYPAD_getPressedKey>
    29ce:	83 32       	cpi	r24, 0x23	; 35
    29d0:	e1 f7       	brne	.-8      	; 0x29ca <main+0x296>
				// Wait for enter key
			}
			state = RE_ENTER_PASSWORD;
    29d2:	81 e0       	ldi	r24, 0x01	; 1
    29d4:	80 93 42 01 	sts	0x0142, r24
    29d8:	78 cf       	rjmp	.-272    	; 0x28ca <main+0x196>
			break;

		case RE_ENTER_PASSWORD:
			LCD_clearScreen();
    29da:	0e 94 90 13 	call	0x2720	; 0x2720 <LCD_clearScreen>
			LCD_displayString("Re-enter");
    29de:	80 e7       	ldi	r24, 0x70	; 112
    29e0:	90 e0       	ldi	r25, 0x00	; 0
    29e2:	0e 94 e9 12 	call	0x25d2	; 0x25d2 <LCD_displayString>
			LCD_moveCursor(1, 0);
    29e6:	81 e0       	ldi	r24, 0x01	; 1
    29e8:	60 e0       	ldi	r22, 0x00	; 0
    29ea:	0e 94 12 13 	call	0x2624	; 0x2624 <LCD_moveCursor>
			LCD_displayString("pass:");
    29ee:	89 e7       	ldi	r24, 0x79	; 121
    29f0:	90 e0       	ldi	r25, 0x00	; 0
    29f2:	0e 94 e9 12 	call	0x25d2	; 0x25d2 <LCD_displayString>
			for (uint8 j = 0; j < PASSWORD_LENGTH; j++) {
    29f6:	fe 01       	movw	r30, r28
    29f8:	ee 55       	subi	r30, 0x5E	; 94
    29fa:	ff 4f       	sbci	r31, 0xFF	; 255
    29fc:	10 82       	st	Z, r1
    29fe:	1c c0       	rjmp	.+56     	; 0x2a38 <main+0x304>
				verification_password[j] = KEYPAD_getPressedKey();
    2a00:	fe 01       	movw	r30, r28
    2a02:	ee 55       	subi	r30, 0x5E	; 94
    2a04:	ff 4f       	sbci	r31, 0xFF	; 255
    2a06:	80 81       	ld	r24, Z
    2a08:	08 2f       	mov	r16, r24
    2a0a:	10 e0       	ldi	r17, 0x00	; 0
    2a0c:	0e 94 e5 0c 	call	0x19ca	; 0x19ca <KEYPAD_getPressedKey>
    2a10:	28 2f       	mov	r18, r24
    2a12:	ce 01       	movw	r24, r28
    2a14:	86 54       	subi	r24, 0x46	; 70
    2a16:	9f 4f       	sbci	r25, 0xFF	; 255
    2a18:	fc 01       	movw	r30, r24
    2a1a:	e0 0f       	add	r30, r16
    2a1c:	f1 1f       	adc	r31, r17
    2a1e:	20 83       	st	Z, r18
				LCD_displayCharacter('*');
    2a20:	8a e2       	ldi	r24, 0x2A	; 42
    2a22:	0e 94 fa 10 	call	0x21f4	; 0x21f4 <LCD_displayCharacter>
		case RE_ENTER_PASSWORD:
			LCD_clearScreen();
			LCD_displayString("Re-enter");
			LCD_moveCursor(1, 0);
			LCD_displayString("pass:");
			for (uint8 j = 0; j < PASSWORD_LENGTH; j++) {
    2a26:	de 01       	movw	r26, r28
    2a28:	ae 55       	subi	r26, 0x5E	; 94
    2a2a:	bf 4f       	sbci	r27, 0xFF	; 255
    2a2c:	fe 01       	movw	r30, r28
    2a2e:	ee 55       	subi	r30, 0x5E	; 94
    2a30:	ff 4f       	sbci	r31, 0xFF	; 255
    2a32:	80 81       	ld	r24, Z
    2a34:	8f 5f       	subi	r24, 0xFF	; 255
    2a36:	8c 93       	st	X, r24
    2a38:	fe 01       	movw	r30, r28
    2a3a:	ee 55       	subi	r30, 0x5E	; 94
    2a3c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a3e:	80 81       	ld	r24, Z
    2a40:	85 30       	cpi	r24, 0x05	; 5
    2a42:	f0 f2       	brcs	.-68     	; 0x2a00 <main+0x2cc>
				verification_password[j] = KEYPAD_getPressedKey();
				LCD_displayCharacter('*');
			}
			while (KEYPAD_getPressedKey() != ENTER_KEY) {
    2a44:	0e 94 e5 0c 	call	0x19ca	; 0x19ca <KEYPAD_getPressedKey>
    2a48:	83 32       	cpi	r24, 0x23	; 35
    2a4a:	e1 f7       	brne	.-8      	; 0x2a44 <main+0x310>
				// Wait for enter key
			}

			// Send password and verification password to Control ECU with delays
			for (uint8 k = 0; k < PASSWORD_LENGTH; k++) {
    2a4c:	fe 01       	movw	r30, r28
    2a4e:	ef 55       	subi	r30, 0x5F	; 95
    2a50:	ff 4f       	sbci	r31, 0xFF	; 255
    2a52:	10 82       	st	Z, r1
    2a54:	cb c0       	rjmp	.+406    	; 0x2bec <main+0x4b8>
				UART_sendByte(password[k]);
    2a56:	fe 01       	movw	r30, r28
    2a58:	ef 55       	subi	r30, 0x5F	; 95
    2a5a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a5c:	80 81       	ld	r24, Z
    2a5e:	28 2f       	mov	r18, r24
    2a60:	30 e0       	ldi	r19, 0x00	; 0
    2a62:	ce 01       	movw	r24, r28
    2a64:	8b 54       	subi	r24, 0x4B	; 75
    2a66:	9f 4f       	sbci	r25, 0xFF	; 255
    2a68:	fc 01       	movw	r30, r24
    2a6a:	e2 0f       	add	r30, r18
    2a6c:	f3 1f       	adc	r31, r19
    2a6e:	80 81       	ld	r24, Z
    2a70:	0e 94 53 0c 	call	0x18a6	; 0x18a6 <UART_sendByte>
    2a74:	fe 01       	movw	r30, r28
    2a76:	e9 56       	subi	r30, 0x69	; 105
    2a78:	ff 4f       	sbci	r31, 0xFF	; 255
    2a7a:	80 e0       	ldi	r24, 0x00	; 0
    2a7c:	90 e0       	ldi	r25, 0x00	; 0
    2a7e:	a8 e4       	ldi	r26, 0x48	; 72
    2a80:	b2 e4       	ldi	r27, 0x42	; 66
    2a82:	80 83       	st	Z, r24
    2a84:	91 83       	std	Z+1, r25	; 0x01
    2a86:	a2 83       	std	Z+2, r26	; 0x02
    2a88:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a8a:	8e 01       	movw	r16, r28
    2a8c:	0d 56       	subi	r16, 0x6D	; 109
    2a8e:	1f 4f       	sbci	r17, 0xFF	; 255
    2a90:	fe 01       	movw	r30, r28
    2a92:	e9 56       	subi	r30, 0x69	; 105
    2a94:	ff 4f       	sbci	r31, 0xFF	; 255
    2a96:	60 81       	ld	r22, Z
    2a98:	71 81       	ldd	r23, Z+1	; 0x01
    2a9a:	82 81       	ldd	r24, Z+2	; 0x02
    2a9c:	93 81       	ldd	r25, Z+3	; 0x03
    2a9e:	20 e0       	ldi	r18, 0x00	; 0
    2aa0:	30 e0       	ldi	r19, 0x00	; 0
    2aa2:	4a ef       	ldi	r20, 0xFA	; 250
    2aa4:	54 e4       	ldi	r21, 0x44	; 68
    2aa6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2aaa:	dc 01       	movw	r26, r24
    2aac:	cb 01       	movw	r24, r22
    2aae:	f8 01       	movw	r30, r16
    2ab0:	80 83       	st	Z, r24
    2ab2:	91 83       	std	Z+1, r25	; 0x01
    2ab4:	a2 83       	std	Z+2, r26	; 0x02
    2ab6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2ab8:	fe 01       	movw	r30, r28
    2aba:	ed 56       	subi	r30, 0x6D	; 109
    2abc:	ff 4f       	sbci	r31, 0xFF	; 255
    2abe:	60 81       	ld	r22, Z
    2ac0:	71 81       	ldd	r23, Z+1	; 0x01
    2ac2:	82 81       	ldd	r24, Z+2	; 0x02
    2ac4:	93 81       	ldd	r25, Z+3	; 0x03
    2ac6:	20 e0       	ldi	r18, 0x00	; 0
    2ac8:	30 e0       	ldi	r19, 0x00	; 0
    2aca:	40 e8       	ldi	r20, 0x80	; 128
    2acc:	5f e3       	ldi	r21, 0x3F	; 63
    2ace:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2ad2:	88 23       	and	r24, r24
    2ad4:	44 f4       	brge	.+16     	; 0x2ae6 <main+0x3b2>
		__ticks = 1;
    2ad6:	fe 01       	movw	r30, r28
    2ad8:	ef 56       	subi	r30, 0x6F	; 111
    2ada:	ff 4f       	sbci	r31, 0xFF	; 255
    2adc:	81 e0       	ldi	r24, 0x01	; 1
    2ade:	90 e0       	ldi	r25, 0x00	; 0
    2ae0:	91 83       	std	Z+1, r25	; 0x01
    2ae2:	80 83       	st	Z, r24
    2ae4:	64 c0       	rjmp	.+200    	; 0x2bae <main+0x47a>
	else if (__tmp > 65535)
    2ae6:	fe 01       	movw	r30, r28
    2ae8:	ed 56       	subi	r30, 0x6D	; 109
    2aea:	ff 4f       	sbci	r31, 0xFF	; 255
    2aec:	60 81       	ld	r22, Z
    2aee:	71 81       	ldd	r23, Z+1	; 0x01
    2af0:	82 81       	ldd	r24, Z+2	; 0x02
    2af2:	93 81       	ldd	r25, Z+3	; 0x03
    2af4:	20 e0       	ldi	r18, 0x00	; 0
    2af6:	3f ef       	ldi	r19, 0xFF	; 255
    2af8:	4f e7       	ldi	r20, 0x7F	; 127
    2afa:	57 e4       	ldi	r21, 0x47	; 71
    2afc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b00:	18 16       	cp	r1, r24
    2b02:	0c f0       	brlt	.+2      	; 0x2b06 <main+0x3d2>
    2b04:	43 c0       	rjmp	.+134    	; 0x2b8c <main+0x458>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b06:	fe 01       	movw	r30, r28
    2b08:	e9 56       	subi	r30, 0x69	; 105
    2b0a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b0c:	60 81       	ld	r22, Z
    2b0e:	71 81       	ldd	r23, Z+1	; 0x01
    2b10:	82 81       	ldd	r24, Z+2	; 0x02
    2b12:	93 81       	ldd	r25, Z+3	; 0x03
    2b14:	20 e0       	ldi	r18, 0x00	; 0
    2b16:	30 e0       	ldi	r19, 0x00	; 0
    2b18:	40 e2       	ldi	r20, 0x20	; 32
    2b1a:	51 e4       	ldi	r21, 0x41	; 65
    2b1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b20:	dc 01       	movw	r26, r24
    2b22:	cb 01       	movw	r24, r22
    2b24:	8e 01       	movw	r16, r28
    2b26:	0f 56       	subi	r16, 0x6F	; 111
    2b28:	1f 4f       	sbci	r17, 0xFF	; 255
    2b2a:	bc 01       	movw	r22, r24
    2b2c:	cd 01       	movw	r24, r26
    2b2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b32:	dc 01       	movw	r26, r24
    2b34:	cb 01       	movw	r24, r22
    2b36:	f8 01       	movw	r30, r16
    2b38:	91 83       	std	Z+1, r25	; 0x01
    2b3a:	80 83       	st	Z, r24
    2b3c:	1f c0       	rjmp	.+62     	; 0x2b7c <main+0x448>
    2b3e:	fe 01       	movw	r30, r28
    2b40:	e1 57       	subi	r30, 0x71	; 113
    2b42:	ff 4f       	sbci	r31, 0xFF	; 255
    2b44:	88 ec       	ldi	r24, 0xC8	; 200
    2b46:	90 e0       	ldi	r25, 0x00	; 0
    2b48:	91 83       	std	Z+1, r25	; 0x01
    2b4a:	80 83       	st	Z, r24
    2b4c:	fe 01       	movw	r30, r28
    2b4e:	e1 57       	subi	r30, 0x71	; 113
    2b50:	ff 4f       	sbci	r31, 0xFF	; 255
    2b52:	80 81       	ld	r24, Z
    2b54:	91 81       	ldd	r25, Z+1	; 0x01
    2b56:	01 97       	sbiw	r24, 0x01	; 1
    2b58:	f1 f7       	brne	.-4      	; 0x2b56 <main+0x422>
    2b5a:	fe 01       	movw	r30, r28
    2b5c:	e1 57       	subi	r30, 0x71	; 113
    2b5e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b60:	91 83       	std	Z+1, r25	; 0x01
    2b62:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b64:	de 01       	movw	r26, r28
    2b66:	af 56       	subi	r26, 0x6F	; 111
    2b68:	bf 4f       	sbci	r27, 0xFF	; 255
    2b6a:	fe 01       	movw	r30, r28
    2b6c:	ef 56       	subi	r30, 0x6F	; 111
    2b6e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b70:	80 81       	ld	r24, Z
    2b72:	91 81       	ldd	r25, Z+1	; 0x01
    2b74:	01 97       	sbiw	r24, 0x01	; 1
    2b76:	11 96       	adiw	r26, 0x01	; 1
    2b78:	9c 93       	st	X, r25
    2b7a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b7c:	fe 01       	movw	r30, r28
    2b7e:	ef 56       	subi	r30, 0x6F	; 111
    2b80:	ff 4f       	sbci	r31, 0xFF	; 255
    2b82:	80 81       	ld	r24, Z
    2b84:	91 81       	ldd	r25, Z+1	; 0x01
    2b86:	00 97       	sbiw	r24, 0x00	; 0
    2b88:	d1 f6       	brne	.-76     	; 0x2b3e <main+0x40a>
    2b8a:	27 c0       	rjmp	.+78     	; 0x2bda <main+0x4a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b8c:	8e 01       	movw	r16, r28
    2b8e:	0f 56       	subi	r16, 0x6F	; 111
    2b90:	1f 4f       	sbci	r17, 0xFF	; 255
    2b92:	fe 01       	movw	r30, r28
    2b94:	ed 56       	subi	r30, 0x6D	; 109
    2b96:	ff 4f       	sbci	r31, 0xFF	; 255
    2b98:	60 81       	ld	r22, Z
    2b9a:	71 81       	ldd	r23, Z+1	; 0x01
    2b9c:	82 81       	ldd	r24, Z+2	; 0x02
    2b9e:	93 81       	ldd	r25, Z+3	; 0x03
    2ba0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ba4:	dc 01       	movw	r26, r24
    2ba6:	cb 01       	movw	r24, r22
    2ba8:	f8 01       	movw	r30, r16
    2baa:	91 83       	std	Z+1, r25	; 0x01
    2bac:	80 83       	st	Z, r24
    2bae:	de 01       	movw	r26, r28
    2bb0:	a3 57       	subi	r26, 0x73	; 115
    2bb2:	bf 4f       	sbci	r27, 0xFF	; 255
    2bb4:	fe 01       	movw	r30, r28
    2bb6:	ef 56       	subi	r30, 0x6F	; 111
    2bb8:	ff 4f       	sbci	r31, 0xFF	; 255
    2bba:	80 81       	ld	r24, Z
    2bbc:	91 81       	ldd	r25, Z+1	; 0x01
    2bbe:	8d 93       	st	X+, r24
    2bc0:	9c 93       	st	X, r25
    2bc2:	fe 01       	movw	r30, r28
    2bc4:	e3 57       	subi	r30, 0x73	; 115
    2bc6:	ff 4f       	sbci	r31, 0xFF	; 255
    2bc8:	80 81       	ld	r24, Z
    2bca:	91 81       	ldd	r25, Z+1	; 0x01
    2bcc:	01 97       	sbiw	r24, 0x01	; 1
    2bce:	f1 f7       	brne	.-4      	; 0x2bcc <main+0x498>
    2bd0:	fe 01       	movw	r30, r28
    2bd2:	e3 57       	subi	r30, 0x73	; 115
    2bd4:	ff 4f       	sbci	r31, 0xFF	; 255
    2bd6:	91 83       	std	Z+1, r25	; 0x01
    2bd8:	80 83       	st	Z, r24
			while (KEYPAD_getPressedKey() != ENTER_KEY) {
				// Wait for enter key
			}

			// Send password and verification password to Control ECU with delays
			for (uint8 k = 0; k < PASSWORD_LENGTH; k++) {
    2bda:	de 01       	movw	r26, r28
    2bdc:	af 55       	subi	r26, 0x5F	; 95
    2bde:	bf 4f       	sbci	r27, 0xFF	; 255
    2be0:	fe 01       	movw	r30, r28
    2be2:	ef 55       	subi	r30, 0x5F	; 95
    2be4:	ff 4f       	sbci	r31, 0xFF	; 255
    2be6:	80 81       	ld	r24, Z
    2be8:	8f 5f       	subi	r24, 0xFF	; 255
    2bea:	8c 93       	st	X, r24
    2bec:	fe 01       	movw	r30, r28
    2bee:	ef 55       	subi	r30, 0x5F	; 95
    2bf0:	ff 4f       	sbci	r31, 0xFF	; 255
    2bf2:	80 81       	ld	r24, Z
    2bf4:	85 30       	cpi	r24, 0x05	; 5
    2bf6:	08 f4       	brcc	.+2      	; 0x2bfa <main+0x4c6>
    2bf8:	2e cf       	rjmp	.-420    	; 0x2a56 <main+0x322>
				UART_sendByte(password[k]);
				_delay_ms(50);
			}
			for (uint8 k = 0; k < PASSWORD_LENGTH; k++) {
    2bfa:	fe 01       	movw	r30, r28
    2bfc:	e0 56       	subi	r30, 0x60	; 96
    2bfe:	ff 4f       	sbci	r31, 0xFF	; 255
    2c00:	10 82       	st	Z, r1
    2c02:	cb c0       	rjmp	.+406    	; 0x2d9a <main+0x666>
				UART_sendByte(verification_password[k]);
    2c04:	fe 01       	movw	r30, r28
    2c06:	e0 56       	subi	r30, 0x60	; 96
    2c08:	ff 4f       	sbci	r31, 0xFF	; 255
    2c0a:	80 81       	ld	r24, Z
    2c0c:	28 2f       	mov	r18, r24
    2c0e:	30 e0       	ldi	r19, 0x00	; 0
    2c10:	ce 01       	movw	r24, r28
    2c12:	86 54       	subi	r24, 0x46	; 70
    2c14:	9f 4f       	sbci	r25, 0xFF	; 255
    2c16:	fc 01       	movw	r30, r24
    2c18:	e2 0f       	add	r30, r18
    2c1a:	f3 1f       	adc	r31, r19
    2c1c:	80 81       	ld	r24, Z
    2c1e:	0e 94 53 0c 	call	0x18a6	; 0x18a6 <UART_sendByte>
    2c22:	fe 01       	movw	r30, r28
    2c24:	e7 57       	subi	r30, 0x77	; 119
    2c26:	ff 4f       	sbci	r31, 0xFF	; 255
    2c28:	80 e0       	ldi	r24, 0x00	; 0
    2c2a:	90 e0       	ldi	r25, 0x00	; 0
    2c2c:	a8 e4       	ldi	r26, 0x48	; 72
    2c2e:	b2 e4       	ldi	r27, 0x42	; 66
    2c30:	80 83       	st	Z, r24
    2c32:	91 83       	std	Z+1, r25	; 0x01
    2c34:	a2 83       	std	Z+2, r26	; 0x02
    2c36:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c38:	8e 01       	movw	r16, r28
    2c3a:	0b 57       	subi	r16, 0x7B	; 123
    2c3c:	1f 4f       	sbci	r17, 0xFF	; 255
    2c3e:	fe 01       	movw	r30, r28
    2c40:	e7 57       	subi	r30, 0x77	; 119
    2c42:	ff 4f       	sbci	r31, 0xFF	; 255
    2c44:	60 81       	ld	r22, Z
    2c46:	71 81       	ldd	r23, Z+1	; 0x01
    2c48:	82 81       	ldd	r24, Z+2	; 0x02
    2c4a:	93 81       	ldd	r25, Z+3	; 0x03
    2c4c:	20 e0       	ldi	r18, 0x00	; 0
    2c4e:	30 e0       	ldi	r19, 0x00	; 0
    2c50:	4a ef       	ldi	r20, 0xFA	; 250
    2c52:	54 e4       	ldi	r21, 0x44	; 68
    2c54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c58:	dc 01       	movw	r26, r24
    2c5a:	cb 01       	movw	r24, r22
    2c5c:	f8 01       	movw	r30, r16
    2c5e:	80 83       	st	Z, r24
    2c60:	91 83       	std	Z+1, r25	; 0x01
    2c62:	a2 83       	std	Z+2, r26	; 0x02
    2c64:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2c66:	fe 01       	movw	r30, r28
    2c68:	eb 57       	subi	r30, 0x7B	; 123
    2c6a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c6c:	60 81       	ld	r22, Z
    2c6e:	71 81       	ldd	r23, Z+1	; 0x01
    2c70:	82 81       	ldd	r24, Z+2	; 0x02
    2c72:	93 81       	ldd	r25, Z+3	; 0x03
    2c74:	20 e0       	ldi	r18, 0x00	; 0
    2c76:	30 e0       	ldi	r19, 0x00	; 0
    2c78:	40 e8       	ldi	r20, 0x80	; 128
    2c7a:	5f e3       	ldi	r21, 0x3F	; 63
    2c7c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c80:	88 23       	and	r24, r24
    2c82:	44 f4       	brge	.+16     	; 0x2c94 <main+0x560>
		__ticks = 1;
    2c84:	fe 01       	movw	r30, r28
    2c86:	ed 57       	subi	r30, 0x7D	; 125
    2c88:	ff 4f       	sbci	r31, 0xFF	; 255
    2c8a:	81 e0       	ldi	r24, 0x01	; 1
    2c8c:	90 e0       	ldi	r25, 0x00	; 0
    2c8e:	91 83       	std	Z+1, r25	; 0x01
    2c90:	80 83       	st	Z, r24
    2c92:	64 c0       	rjmp	.+200    	; 0x2d5c <main+0x628>
	else if (__tmp > 65535)
    2c94:	fe 01       	movw	r30, r28
    2c96:	eb 57       	subi	r30, 0x7B	; 123
    2c98:	ff 4f       	sbci	r31, 0xFF	; 255
    2c9a:	60 81       	ld	r22, Z
    2c9c:	71 81       	ldd	r23, Z+1	; 0x01
    2c9e:	82 81       	ldd	r24, Z+2	; 0x02
    2ca0:	93 81       	ldd	r25, Z+3	; 0x03
    2ca2:	20 e0       	ldi	r18, 0x00	; 0
    2ca4:	3f ef       	ldi	r19, 0xFF	; 255
    2ca6:	4f e7       	ldi	r20, 0x7F	; 127
    2ca8:	57 e4       	ldi	r21, 0x47	; 71
    2caa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2cae:	18 16       	cp	r1, r24
    2cb0:	0c f0       	brlt	.+2      	; 0x2cb4 <main+0x580>
    2cb2:	43 c0       	rjmp	.+134    	; 0x2d3a <main+0x606>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cb4:	fe 01       	movw	r30, r28
    2cb6:	e7 57       	subi	r30, 0x77	; 119
    2cb8:	ff 4f       	sbci	r31, 0xFF	; 255
    2cba:	60 81       	ld	r22, Z
    2cbc:	71 81       	ldd	r23, Z+1	; 0x01
    2cbe:	82 81       	ldd	r24, Z+2	; 0x02
    2cc0:	93 81       	ldd	r25, Z+3	; 0x03
    2cc2:	20 e0       	ldi	r18, 0x00	; 0
    2cc4:	30 e0       	ldi	r19, 0x00	; 0
    2cc6:	40 e2       	ldi	r20, 0x20	; 32
    2cc8:	51 e4       	ldi	r21, 0x41	; 65
    2cca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cce:	dc 01       	movw	r26, r24
    2cd0:	cb 01       	movw	r24, r22
    2cd2:	8e 01       	movw	r16, r28
    2cd4:	0d 57       	subi	r16, 0x7D	; 125
    2cd6:	1f 4f       	sbci	r17, 0xFF	; 255
    2cd8:	bc 01       	movw	r22, r24
    2cda:	cd 01       	movw	r24, r26
    2cdc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ce0:	dc 01       	movw	r26, r24
    2ce2:	cb 01       	movw	r24, r22
    2ce4:	f8 01       	movw	r30, r16
    2ce6:	91 83       	std	Z+1, r25	; 0x01
    2ce8:	80 83       	st	Z, r24
    2cea:	1f c0       	rjmp	.+62     	; 0x2d2a <main+0x5f6>
    2cec:	fe 01       	movw	r30, r28
    2cee:	ef 57       	subi	r30, 0x7F	; 127
    2cf0:	ff 4f       	sbci	r31, 0xFF	; 255
    2cf2:	88 ec       	ldi	r24, 0xC8	; 200
    2cf4:	90 e0       	ldi	r25, 0x00	; 0
    2cf6:	91 83       	std	Z+1, r25	; 0x01
    2cf8:	80 83       	st	Z, r24
    2cfa:	fe 01       	movw	r30, r28
    2cfc:	ef 57       	subi	r30, 0x7F	; 127
    2cfe:	ff 4f       	sbci	r31, 0xFF	; 255
    2d00:	80 81       	ld	r24, Z
    2d02:	91 81       	ldd	r25, Z+1	; 0x01
    2d04:	01 97       	sbiw	r24, 0x01	; 1
    2d06:	f1 f7       	brne	.-4      	; 0x2d04 <main+0x5d0>
    2d08:	fe 01       	movw	r30, r28
    2d0a:	ef 57       	subi	r30, 0x7F	; 127
    2d0c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d0e:	91 83       	std	Z+1, r25	; 0x01
    2d10:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d12:	de 01       	movw	r26, r28
    2d14:	ad 57       	subi	r26, 0x7D	; 125
    2d16:	bf 4f       	sbci	r27, 0xFF	; 255
    2d18:	fe 01       	movw	r30, r28
    2d1a:	ed 57       	subi	r30, 0x7D	; 125
    2d1c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d1e:	80 81       	ld	r24, Z
    2d20:	91 81       	ldd	r25, Z+1	; 0x01
    2d22:	01 97       	sbiw	r24, 0x01	; 1
    2d24:	11 96       	adiw	r26, 0x01	; 1
    2d26:	9c 93       	st	X, r25
    2d28:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d2a:	fe 01       	movw	r30, r28
    2d2c:	ed 57       	subi	r30, 0x7D	; 125
    2d2e:	ff 4f       	sbci	r31, 0xFF	; 255
    2d30:	80 81       	ld	r24, Z
    2d32:	91 81       	ldd	r25, Z+1	; 0x01
    2d34:	00 97       	sbiw	r24, 0x00	; 0
    2d36:	d1 f6       	brne	.-76     	; 0x2cec <main+0x5b8>
    2d38:	27 c0       	rjmp	.+78     	; 0x2d88 <main+0x654>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d3a:	8e 01       	movw	r16, r28
    2d3c:	0d 57       	subi	r16, 0x7D	; 125
    2d3e:	1f 4f       	sbci	r17, 0xFF	; 255
    2d40:	fe 01       	movw	r30, r28
    2d42:	eb 57       	subi	r30, 0x7B	; 123
    2d44:	ff 4f       	sbci	r31, 0xFF	; 255
    2d46:	60 81       	ld	r22, Z
    2d48:	71 81       	ldd	r23, Z+1	; 0x01
    2d4a:	82 81       	ldd	r24, Z+2	; 0x02
    2d4c:	93 81       	ldd	r25, Z+3	; 0x03
    2d4e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d52:	dc 01       	movw	r26, r24
    2d54:	cb 01       	movw	r24, r22
    2d56:	f8 01       	movw	r30, r16
    2d58:	91 83       	std	Z+1, r25	; 0x01
    2d5a:	80 83       	st	Z, r24
    2d5c:	de 01       	movw	r26, r28
    2d5e:	a1 58       	subi	r26, 0x81	; 129
    2d60:	bf 4f       	sbci	r27, 0xFF	; 255
    2d62:	fe 01       	movw	r30, r28
    2d64:	ed 57       	subi	r30, 0x7D	; 125
    2d66:	ff 4f       	sbci	r31, 0xFF	; 255
    2d68:	80 81       	ld	r24, Z
    2d6a:	91 81       	ldd	r25, Z+1	; 0x01
    2d6c:	8d 93       	st	X+, r24
    2d6e:	9c 93       	st	X, r25
    2d70:	fe 01       	movw	r30, r28
    2d72:	e1 58       	subi	r30, 0x81	; 129
    2d74:	ff 4f       	sbci	r31, 0xFF	; 255
    2d76:	80 81       	ld	r24, Z
    2d78:	91 81       	ldd	r25, Z+1	; 0x01
    2d7a:	01 97       	sbiw	r24, 0x01	; 1
    2d7c:	f1 f7       	brne	.-4      	; 0x2d7a <main+0x646>
    2d7e:	fe 01       	movw	r30, r28
    2d80:	e1 58       	subi	r30, 0x81	; 129
    2d82:	ff 4f       	sbci	r31, 0xFF	; 255
    2d84:	91 83       	std	Z+1, r25	; 0x01
    2d86:	80 83       	st	Z, r24
			// Send password and verification password to Control ECU with delays
			for (uint8 k = 0; k < PASSWORD_LENGTH; k++) {
				UART_sendByte(password[k]);
				_delay_ms(50);
			}
			for (uint8 k = 0; k < PASSWORD_LENGTH; k++) {
    2d88:	de 01       	movw	r26, r28
    2d8a:	a0 56       	subi	r26, 0x60	; 96
    2d8c:	bf 4f       	sbci	r27, 0xFF	; 255
    2d8e:	fe 01       	movw	r30, r28
    2d90:	e0 56       	subi	r30, 0x60	; 96
    2d92:	ff 4f       	sbci	r31, 0xFF	; 255
    2d94:	80 81       	ld	r24, Z
    2d96:	8f 5f       	subi	r24, 0xFF	; 255
    2d98:	8c 93       	st	X, r24
    2d9a:	fe 01       	movw	r30, r28
    2d9c:	e0 56       	subi	r30, 0x60	; 96
    2d9e:	ff 4f       	sbci	r31, 0xFF	; 255
    2da0:	80 81       	ld	r24, Z
    2da2:	85 30       	cpi	r24, 0x05	; 5
    2da4:	08 f4       	brcc	.+2      	; 0x2da8 <main+0x674>
    2da6:	2e cf       	rjmp	.-420    	; 0x2c04 <main+0x4d0>
				UART_sendByte(verification_password[k]);
				_delay_ms(50);
			}

			state = WAIT_FOR_CONFIRMATION;
    2da8:	82 e0       	ldi	r24, 0x02	; 2
    2daa:	80 93 42 01 	sts	0x0142, r24
    2dae:	8d cd       	rjmp	.-1254   	; 0x28ca <main+0x196>
			break;

		case WAIT_FOR_CONFIRMATION:
			result = UART_recieveByte();
    2db0:	0e 94 6a 0c 	call	0x18d4	; 0x18d4 <UART_recieveByte>
    2db4:	fe 01       	movw	r30, r28
    2db6:	ea 55       	subi	r30, 0x5A	; 90
    2db8:	ff 4f       	sbci	r31, 0xFF	; 255
    2dba:	80 83       	st	Z, r24
			if (result == 1) {
    2dbc:	fe 01       	movw	r30, r28
    2dbe:	ea 55       	subi	r30, 0x5A	; 90
    2dc0:	ff 4f       	sbci	r31, 0xFF	; 255
    2dc2:	80 81       	ld	r24, Z
    2dc4:	81 30       	cpi	r24, 0x01	; 1
    2dc6:	09 f0       	breq	.+2      	; 0x2dca <main+0x696>
    2dc8:	be c0       	rjmp	.+380    	; 0x2f46 <main+0x812>
				LCD_clearScreen();
    2dca:	0e 94 90 13 	call	0x2720	; 0x2720 <LCD_clearScreen>
				LCD_displayString("Access Granted!");
    2dce:	8f e7       	ldi	r24, 0x7F	; 127
    2dd0:	90 e0       	ldi	r25, 0x00	; 0
    2dd2:	0e 94 e9 12 	call	0x25d2	; 0x25d2 <LCD_displayString>
    2dd6:	fe 01       	movw	r30, r28
    2dd8:	e5 58       	subi	r30, 0x85	; 133
    2dda:	ff 4f       	sbci	r31, 0xFF	; 255
    2ddc:	80 e0       	ldi	r24, 0x00	; 0
    2dde:	90 e0       	ldi	r25, 0x00	; 0
    2de0:	aa ef       	ldi	r26, 0xFA	; 250
    2de2:	b3 e4       	ldi	r27, 0x43	; 67
    2de4:	80 83       	st	Z, r24
    2de6:	91 83       	std	Z+1, r25	; 0x01
    2de8:	a2 83       	std	Z+2, r26	; 0x02
    2dea:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2dec:	8e 01       	movw	r16, r28
    2dee:	09 58       	subi	r16, 0x89	; 137
    2df0:	1f 4f       	sbci	r17, 0xFF	; 255
    2df2:	fe 01       	movw	r30, r28
    2df4:	e5 58       	subi	r30, 0x85	; 133
    2df6:	ff 4f       	sbci	r31, 0xFF	; 255
    2df8:	60 81       	ld	r22, Z
    2dfa:	71 81       	ldd	r23, Z+1	; 0x01
    2dfc:	82 81       	ldd	r24, Z+2	; 0x02
    2dfe:	93 81       	ldd	r25, Z+3	; 0x03
    2e00:	20 e0       	ldi	r18, 0x00	; 0
    2e02:	30 e0       	ldi	r19, 0x00	; 0
    2e04:	4a ef       	ldi	r20, 0xFA	; 250
    2e06:	54 e4       	ldi	r21, 0x44	; 68
    2e08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e0c:	dc 01       	movw	r26, r24
    2e0e:	cb 01       	movw	r24, r22
    2e10:	f8 01       	movw	r30, r16
    2e12:	80 83       	st	Z, r24
    2e14:	91 83       	std	Z+1, r25	; 0x01
    2e16:	a2 83       	std	Z+2, r26	; 0x02
    2e18:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2e1a:	fe 01       	movw	r30, r28
    2e1c:	e9 58       	subi	r30, 0x89	; 137
    2e1e:	ff 4f       	sbci	r31, 0xFF	; 255
    2e20:	60 81       	ld	r22, Z
    2e22:	71 81       	ldd	r23, Z+1	; 0x01
    2e24:	82 81       	ldd	r24, Z+2	; 0x02
    2e26:	93 81       	ldd	r25, Z+3	; 0x03
    2e28:	20 e0       	ldi	r18, 0x00	; 0
    2e2a:	30 e0       	ldi	r19, 0x00	; 0
    2e2c:	40 e8       	ldi	r20, 0x80	; 128
    2e2e:	5f e3       	ldi	r21, 0x3F	; 63
    2e30:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e34:	88 23       	and	r24, r24
    2e36:	44 f4       	brge	.+16     	; 0x2e48 <main+0x714>
		__ticks = 1;
    2e38:	fe 01       	movw	r30, r28
    2e3a:	eb 58       	subi	r30, 0x8B	; 139
    2e3c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e3e:	81 e0       	ldi	r24, 0x01	; 1
    2e40:	90 e0       	ldi	r25, 0x00	; 0
    2e42:	91 83       	std	Z+1, r25	; 0x01
    2e44:	80 83       	st	Z, r24
    2e46:	64 c0       	rjmp	.+200    	; 0x2f10 <main+0x7dc>
	else if (__tmp > 65535)
    2e48:	fe 01       	movw	r30, r28
    2e4a:	e9 58       	subi	r30, 0x89	; 137
    2e4c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e4e:	60 81       	ld	r22, Z
    2e50:	71 81       	ldd	r23, Z+1	; 0x01
    2e52:	82 81       	ldd	r24, Z+2	; 0x02
    2e54:	93 81       	ldd	r25, Z+3	; 0x03
    2e56:	20 e0       	ldi	r18, 0x00	; 0
    2e58:	3f ef       	ldi	r19, 0xFF	; 255
    2e5a:	4f e7       	ldi	r20, 0x7F	; 127
    2e5c:	57 e4       	ldi	r21, 0x47	; 71
    2e5e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e62:	18 16       	cp	r1, r24
    2e64:	0c f0       	brlt	.+2      	; 0x2e68 <main+0x734>
    2e66:	43 c0       	rjmp	.+134    	; 0x2eee <main+0x7ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e68:	fe 01       	movw	r30, r28
    2e6a:	e5 58       	subi	r30, 0x85	; 133
    2e6c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e6e:	60 81       	ld	r22, Z
    2e70:	71 81       	ldd	r23, Z+1	; 0x01
    2e72:	82 81       	ldd	r24, Z+2	; 0x02
    2e74:	93 81       	ldd	r25, Z+3	; 0x03
    2e76:	20 e0       	ldi	r18, 0x00	; 0
    2e78:	30 e0       	ldi	r19, 0x00	; 0
    2e7a:	40 e2       	ldi	r20, 0x20	; 32
    2e7c:	51 e4       	ldi	r21, 0x41	; 65
    2e7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e82:	dc 01       	movw	r26, r24
    2e84:	cb 01       	movw	r24, r22
    2e86:	8e 01       	movw	r16, r28
    2e88:	0b 58       	subi	r16, 0x8B	; 139
    2e8a:	1f 4f       	sbci	r17, 0xFF	; 255
    2e8c:	bc 01       	movw	r22, r24
    2e8e:	cd 01       	movw	r24, r26
    2e90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e94:	dc 01       	movw	r26, r24
    2e96:	cb 01       	movw	r24, r22
    2e98:	f8 01       	movw	r30, r16
    2e9a:	91 83       	std	Z+1, r25	; 0x01
    2e9c:	80 83       	st	Z, r24
    2e9e:	1f c0       	rjmp	.+62     	; 0x2ede <main+0x7aa>
    2ea0:	fe 01       	movw	r30, r28
    2ea2:	ed 58       	subi	r30, 0x8D	; 141
    2ea4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ea6:	88 ec       	ldi	r24, 0xC8	; 200
    2ea8:	90 e0       	ldi	r25, 0x00	; 0
    2eaa:	91 83       	std	Z+1, r25	; 0x01
    2eac:	80 83       	st	Z, r24
    2eae:	fe 01       	movw	r30, r28
    2eb0:	ed 58       	subi	r30, 0x8D	; 141
    2eb2:	ff 4f       	sbci	r31, 0xFF	; 255
    2eb4:	80 81       	ld	r24, Z
    2eb6:	91 81       	ldd	r25, Z+1	; 0x01
    2eb8:	01 97       	sbiw	r24, 0x01	; 1
    2eba:	f1 f7       	brne	.-4      	; 0x2eb8 <main+0x784>
    2ebc:	fe 01       	movw	r30, r28
    2ebe:	ed 58       	subi	r30, 0x8D	; 141
    2ec0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ec2:	91 83       	std	Z+1, r25	; 0x01
    2ec4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ec6:	de 01       	movw	r26, r28
    2ec8:	ab 58       	subi	r26, 0x8B	; 139
    2eca:	bf 4f       	sbci	r27, 0xFF	; 255
    2ecc:	fe 01       	movw	r30, r28
    2ece:	eb 58       	subi	r30, 0x8B	; 139
    2ed0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ed2:	80 81       	ld	r24, Z
    2ed4:	91 81       	ldd	r25, Z+1	; 0x01
    2ed6:	01 97       	sbiw	r24, 0x01	; 1
    2ed8:	11 96       	adiw	r26, 0x01	; 1
    2eda:	9c 93       	st	X, r25
    2edc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ede:	fe 01       	movw	r30, r28
    2ee0:	eb 58       	subi	r30, 0x8B	; 139
    2ee2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ee4:	80 81       	ld	r24, Z
    2ee6:	91 81       	ldd	r25, Z+1	; 0x01
    2ee8:	00 97       	sbiw	r24, 0x00	; 0
    2eea:	d1 f6       	brne	.-76     	; 0x2ea0 <main+0x76c>
    2eec:	28 c0       	rjmp	.+80     	; 0x2f3e <main+0x80a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2eee:	8e 01       	movw	r16, r28
    2ef0:	0b 58       	subi	r16, 0x8B	; 139
    2ef2:	1f 4f       	sbci	r17, 0xFF	; 255
    2ef4:	fe 01       	movw	r30, r28
    2ef6:	e9 58       	subi	r30, 0x89	; 137
    2ef8:	ff 4f       	sbci	r31, 0xFF	; 255
    2efa:	60 81       	ld	r22, Z
    2efc:	71 81       	ldd	r23, Z+1	; 0x01
    2efe:	82 81       	ldd	r24, Z+2	; 0x02
    2f00:	93 81       	ldd	r25, Z+3	; 0x03
    2f02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f06:	dc 01       	movw	r26, r24
    2f08:	cb 01       	movw	r24, r22
    2f0a:	f8 01       	movw	r30, r16
    2f0c:	91 83       	std	Z+1, r25	; 0x01
    2f0e:	80 83       	st	Z, r24
    2f10:	de 01       	movw	r26, r28
    2f12:	af 58       	subi	r26, 0x8F	; 143
    2f14:	bf 4f       	sbci	r27, 0xFF	; 255
    2f16:	fe 01       	movw	r30, r28
    2f18:	eb 58       	subi	r30, 0x8B	; 139
    2f1a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f1c:	80 81       	ld	r24, Z
    2f1e:	91 81       	ldd	r25, Z+1	; 0x01
    2f20:	11 96       	adiw	r26, 0x01	; 1
    2f22:	9c 93       	st	X, r25
    2f24:	8e 93       	st	-X, r24
    2f26:	fe 01       	movw	r30, r28
    2f28:	ef 58       	subi	r30, 0x8F	; 143
    2f2a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f2c:	80 81       	ld	r24, Z
    2f2e:	91 81       	ldd	r25, Z+1	; 0x01
    2f30:	01 97       	sbiw	r24, 0x01	; 1
    2f32:	f1 f7       	brne	.-4      	; 0x2f30 <main+0x7fc>
    2f34:	fe 01       	movw	r30, r28
    2f36:	ef 58       	subi	r30, 0x8F	; 143
    2f38:	ff 4f       	sbci	r31, 0xFF	; 255
    2f3a:	91 83       	std	Z+1, r25	; 0x01
    2f3c:	80 83       	st	Z, r24
				_delay_ms(500);
				state = MAIN_OPTIONS;
    2f3e:	83 e0       	ldi	r24, 0x03	; 3
    2f40:	80 93 42 01 	sts	0x0142, r24
    2f44:	c2 cc       	rjmp	.-1660   	; 0x28ca <main+0x196>
			} else {
				LCD_clearScreen();
    2f46:	0e 94 90 13 	call	0x2720	; 0x2720 <LCD_clearScreen>
				LCD_displayString("Password");
    2f4a:	8f e8       	ldi	r24, 0x8F	; 143
    2f4c:	90 e0       	ldi	r25, 0x00	; 0
    2f4e:	0e 94 e9 12 	call	0x25d2	; 0x25d2 <LCD_displayString>
				LCD_moveCursor(1, 0);
    2f52:	81 e0       	ldi	r24, 0x01	; 1
    2f54:	60 e0       	ldi	r22, 0x00	; 0
    2f56:	0e 94 12 13 	call	0x2624	; 0x2624 <LCD_moveCursor>
				LCD_displayString("Mismatch");
    2f5a:	88 e9       	ldi	r24, 0x98	; 152
    2f5c:	90 e0       	ldi	r25, 0x00	; 0
    2f5e:	0e 94 e9 12 	call	0x25d2	; 0x25d2 <LCD_displayString>
    2f62:	fe 01       	movw	r30, r28
    2f64:	e3 59       	subi	r30, 0x93	; 147
    2f66:	ff 4f       	sbci	r31, 0xFF	; 255
    2f68:	80 e0       	ldi	r24, 0x00	; 0
    2f6a:	90 e0       	ldi	r25, 0x00	; 0
    2f6c:	aa ef       	ldi	r26, 0xFA	; 250
    2f6e:	b3 e4       	ldi	r27, 0x43	; 67
    2f70:	80 83       	st	Z, r24
    2f72:	91 83       	std	Z+1, r25	; 0x01
    2f74:	a2 83       	std	Z+2, r26	; 0x02
    2f76:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f78:	8e 01       	movw	r16, r28
    2f7a:	07 59       	subi	r16, 0x97	; 151
    2f7c:	1f 4f       	sbci	r17, 0xFF	; 255
    2f7e:	fe 01       	movw	r30, r28
    2f80:	e3 59       	subi	r30, 0x93	; 147
    2f82:	ff 4f       	sbci	r31, 0xFF	; 255
    2f84:	60 81       	ld	r22, Z
    2f86:	71 81       	ldd	r23, Z+1	; 0x01
    2f88:	82 81       	ldd	r24, Z+2	; 0x02
    2f8a:	93 81       	ldd	r25, Z+3	; 0x03
    2f8c:	20 e0       	ldi	r18, 0x00	; 0
    2f8e:	30 e0       	ldi	r19, 0x00	; 0
    2f90:	4a ef       	ldi	r20, 0xFA	; 250
    2f92:	54 e4       	ldi	r21, 0x44	; 68
    2f94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f98:	dc 01       	movw	r26, r24
    2f9a:	cb 01       	movw	r24, r22
    2f9c:	f8 01       	movw	r30, r16
    2f9e:	80 83       	st	Z, r24
    2fa0:	91 83       	std	Z+1, r25	; 0x01
    2fa2:	a2 83       	std	Z+2, r26	; 0x02
    2fa4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2fa6:	fe 01       	movw	r30, r28
    2fa8:	e7 59       	subi	r30, 0x97	; 151
    2faa:	ff 4f       	sbci	r31, 0xFF	; 255
    2fac:	60 81       	ld	r22, Z
    2fae:	71 81       	ldd	r23, Z+1	; 0x01
    2fb0:	82 81       	ldd	r24, Z+2	; 0x02
    2fb2:	93 81       	ldd	r25, Z+3	; 0x03
    2fb4:	20 e0       	ldi	r18, 0x00	; 0
    2fb6:	30 e0       	ldi	r19, 0x00	; 0
    2fb8:	40 e8       	ldi	r20, 0x80	; 128
    2fba:	5f e3       	ldi	r21, 0x3F	; 63
    2fbc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2fc0:	88 23       	and	r24, r24
    2fc2:	44 f4       	brge	.+16     	; 0x2fd4 <main+0x8a0>
		__ticks = 1;
    2fc4:	fe 01       	movw	r30, r28
    2fc6:	e9 59       	subi	r30, 0x99	; 153
    2fc8:	ff 4f       	sbci	r31, 0xFF	; 255
    2fca:	81 e0       	ldi	r24, 0x01	; 1
    2fcc:	90 e0       	ldi	r25, 0x00	; 0
    2fce:	91 83       	std	Z+1, r25	; 0x01
    2fd0:	80 83       	st	Z, r24
    2fd2:	64 c0       	rjmp	.+200    	; 0x309c <main+0x968>
	else if (__tmp > 65535)
    2fd4:	fe 01       	movw	r30, r28
    2fd6:	e7 59       	subi	r30, 0x97	; 151
    2fd8:	ff 4f       	sbci	r31, 0xFF	; 255
    2fda:	60 81       	ld	r22, Z
    2fdc:	71 81       	ldd	r23, Z+1	; 0x01
    2fde:	82 81       	ldd	r24, Z+2	; 0x02
    2fe0:	93 81       	ldd	r25, Z+3	; 0x03
    2fe2:	20 e0       	ldi	r18, 0x00	; 0
    2fe4:	3f ef       	ldi	r19, 0xFF	; 255
    2fe6:	4f e7       	ldi	r20, 0x7F	; 127
    2fe8:	57 e4       	ldi	r21, 0x47	; 71
    2fea:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2fee:	18 16       	cp	r1, r24
    2ff0:	0c f0       	brlt	.+2      	; 0x2ff4 <main+0x8c0>
    2ff2:	43 c0       	rjmp	.+134    	; 0x307a <main+0x946>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ff4:	fe 01       	movw	r30, r28
    2ff6:	e3 59       	subi	r30, 0x93	; 147
    2ff8:	ff 4f       	sbci	r31, 0xFF	; 255
    2ffa:	60 81       	ld	r22, Z
    2ffc:	71 81       	ldd	r23, Z+1	; 0x01
    2ffe:	82 81       	ldd	r24, Z+2	; 0x02
    3000:	93 81       	ldd	r25, Z+3	; 0x03
    3002:	20 e0       	ldi	r18, 0x00	; 0
    3004:	30 e0       	ldi	r19, 0x00	; 0
    3006:	40 e2       	ldi	r20, 0x20	; 32
    3008:	51 e4       	ldi	r21, 0x41	; 65
    300a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    300e:	dc 01       	movw	r26, r24
    3010:	cb 01       	movw	r24, r22
    3012:	8e 01       	movw	r16, r28
    3014:	09 59       	subi	r16, 0x99	; 153
    3016:	1f 4f       	sbci	r17, 0xFF	; 255
    3018:	bc 01       	movw	r22, r24
    301a:	cd 01       	movw	r24, r26
    301c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3020:	dc 01       	movw	r26, r24
    3022:	cb 01       	movw	r24, r22
    3024:	f8 01       	movw	r30, r16
    3026:	91 83       	std	Z+1, r25	; 0x01
    3028:	80 83       	st	Z, r24
    302a:	1f c0       	rjmp	.+62     	; 0x306a <main+0x936>
    302c:	fe 01       	movw	r30, r28
    302e:	eb 59       	subi	r30, 0x9B	; 155
    3030:	ff 4f       	sbci	r31, 0xFF	; 255
    3032:	88 ec       	ldi	r24, 0xC8	; 200
    3034:	90 e0       	ldi	r25, 0x00	; 0
    3036:	91 83       	std	Z+1, r25	; 0x01
    3038:	80 83       	st	Z, r24
    303a:	fe 01       	movw	r30, r28
    303c:	eb 59       	subi	r30, 0x9B	; 155
    303e:	ff 4f       	sbci	r31, 0xFF	; 255
    3040:	80 81       	ld	r24, Z
    3042:	91 81       	ldd	r25, Z+1	; 0x01
    3044:	01 97       	sbiw	r24, 0x01	; 1
    3046:	f1 f7       	brne	.-4      	; 0x3044 <main+0x910>
    3048:	fe 01       	movw	r30, r28
    304a:	eb 59       	subi	r30, 0x9B	; 155
    304c:	ff 4f       	sbci	r31, 0xFF	; 255
    304e:	91 83       	std	Z+1, r25	; 0x01
    3050:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3052:	de 01       	movw	r26, r28
    3054:	a9 59       	subi	r26, 0x99	; 153
    3056:	bf 4f       	sbci	r27, 0xFF	; 255
    3058:	fe 01       	movw	r30, r28
    305a:	e9 59       	subi	r30, 0x99	; 153
    305c:	ff 4f       	sbci	r31, 0xFF	; 255
    305e:	80 81       	ld	r24, Z
    3060:	91 81       	ldd	r25, Z+1	; 0x01
    3062:	01 97       	sbiw	r24, 0x01	; 1
    3064:	11 96       	adiw	r26, 0x01	; 1
    3066:	9c 93       	st	X, r25
    3068:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    306a:	fe 01       	movw	r30, r28
    306c:	e9 59       	subi	r30, 0x99	; 153
    306e:	ff 4f       	sbci	r31, 0xFF	; 255
    3070:	80 81       	ld	r24, Z
    3072:	91 81       	ldd	r25, Z+1	; 0x01
    3074:	00 97       	sbiw	r24, 0x00	; 0
    3076:	d1 f6       	brne	.-76     	; 0x302c <main+0x8f8>
    3078:	28 c0       	rjmp	.+80     	; 0x30ca <main+0x996>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    307a:	8e 01       	movw	r16, r28
    307c:	09 59       	subi	r16, 0x99	; 153
    307e:	1f 4f       	sbci	r17, 0xFF	; 255
    3080:	fe 01       	movw	r30, r28
    3082:	e7 59       	subi	r30, 0x97	; 151
    3084:	ff 4f       	sbci	r31, 0xFF	; 255
    3086:	60 81       	ld	r22, Z
    3088:	71 81       	ldd	r23, Z+1	; 0x01
    308a:	82 81       	ldd	r24, Z+2	; 0x02
    308c:	93 81       	ldd	r25, Z+3	; 0x03
    308e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3092:	dc 01       	movw	r26, r24
    3094:	cb 01       	movw	r24, r22
    3096:	f8 01       	movw	r30, r16
    3098:	91 83       	std	Z+1, r25	; 0x01
    309a:	80 83       	st	Z, r24
    309c:	de 01       	movw	r26, r28
    309e:	ad 59       	subi	r26, 0x9D	; 157
    30a0:	bf 4f       	sbci	r27, 0xFF	; 255
    30a2:	fe 01       	movw	r30, r28
    30a4:	e9 59       	subi	r30, 0x99	; 153
    30a6:	ff 4f       	sbci	r31, 0xFF	; 255
    30a8:	80 81       	ld	r24, Z
    30aa:	91 81       	ldd	r25, Z+1	; 0x01
    30ac:	11 96       	adiw	r26, 0x01	; 1
    30ae:	9c 93       	st	X, r25
    30b0:	8e 93       	st	-X, r24
    30b2:	fe 01       	movw	r30, r28
    30b4:	ed 59       	subi	r30, 0x9D	; 157
    30b6:	ff 4f       	sbci	r31, 0xFF	; 255
    30b8:	80 81       	ld	r24, Z
    30ba:	91 81       	ldd	r25, Z+1	; 0x01
    30bc:	01 97       	sbiw	r24, 0x01	; 1
    30be:	f1 f7       	brne	.-4      	; 0x30bc <main+0x988>
    30c0:	fe 01       	movw	r30, r28
    30c2:	ed 59       	subi	r30, 0x9D	; 157
    30c4:	ff 4f       	sbci	r31, 0xFF	; 255
    30c6:	91 83       	std	Z+1, r25	; 0x01
    30c8:	80 83       	st	Z, r24
				_delay_ms(500);
				state = ENTER_PASSWORD;
    30ca:	10 92 42 01 	sts	0x0142, r1
    30ce:	fd cb       	rjmp	.-2054   	; 0x28ca <main+0x196>
			}
			break;

		case MAIN_OPTIONS:
			LCD_clearScreen();
    30d0:	0e 94 90 13 	call	0x2720	; 0x2720 <LCD_clearScreen>
			LCD_displayString("+:Open Door");
    30d4:	81 ea       	ldi	r24, 0xA1	; 161
    30d6:	90 e0       	ldi	r25, 0x00	; 0
    30d8:	0e 94 e9 12 	call	0x25d2	; 0x25d2 <LCD_displayString>
			LCD_moveCursor(1, 0);
    30dc:	81 e0       	ldi	r24, 0x01	; 1
    30de:	60 e0       	ldi	r22, 0x00	; 0
    30e0:	0e 94 12 13 	call	0x2624	; 0x2624 <LCD_moveCursor>
			LCD_displayString("-:Change Pass");
    30e4:	8d ea       	ldi	r24, 0xAD	; 173
    30e6:	90 e0       	ldi	r25, 0x00	; 0
    30e8:	0e 94 e9 12 	call	0x25d2	; 0x25d2 <LCD_displayString>

			uint8 option = KEYPAD_getPressedKey();
    30ec:	0e 94 e5 0c 	call	0x19ca	; 0x19ca <KEYPAD_getPressedKey>
    30f0:	fe 01       	movw	r30, r28
    30f2:	ec 55       	subi	r30, 0x5C	; 92
    30f4:	ff 4f       	sbci	r31, 0xFF	; 255
    30f6:	80 83       	st	Z, r24
			if (option == '+') {
    30f8:	fe 01       	movw	r30, r28
    30fa:	ec 55       	subi	r30, 0x5C	; 92
    30fc:	ff 4f       	sbci	r31, 0xFF	; 255
    30fe:	80 81       	ld	r24, Z
    3100:	8b 32       	cpi	r24, 0x2B	; 43
    3102:	21 f4       	brne	.+8      	; 0x310c <main+0x9d8>
				state = OPEN_DOOR;
    3104:	84 e0       	ldi	r24, 0x04	; 4
    3106:	80 93 42 01 	sts	0x0142, r24
    310a:	df cb       	rjmp	.-2114   	; 0x28ca <main+0x196>
			} else if (option == '-') {
    310c:	fe 01       	movw	r30, r28
    310e:	ec 55       	subi	r30, 0x5C	; 92
    3110:	ff 4f       	sbci	r31, 0xFF	; 255
    3112:	80 81       	ld	r24, Z
    3114:	8d 32       	cpi	r24, 0x2D	; 45
    3116:	09 f0       	breq	.+2      	; 0x311a <main+0x9e6>
    3118:	d8 cb       	rjmp	.-2128   	; 0x28ca <main+0x196>
				state = CHANGE_PASSWORD;
    311a:	85 e0       	ldi	r24, 0x05	; 5
    311c:	80 93 42 01 	sts	0x0142, r24
    3120:	d4 cb       	rjmp	.-2136   	; 0x28ca <main+0x196>
			}
			break;

		case OPEN_DOOR:
			UART_sendByte(0);
    3122:	80 e0       	ldi	r24, 0x00	; 0
    3124:	0e 94 53 0c 	call	0x18a6	; 0x18a6 <UART_sendByte>
			LCD_clearScreen();
    3128:	0e 94 90 13 	call	0x2720	; 0x2720 <LCD_clearScreen>
			LCD_displayString("Enter Password:");
    312c:	80 e6       	ldi	r24, 0x60	; 96
    312e:	90 e0       	ldi	r25, 0x00	; 0
    3130:	0e 94 e9 12 	call	0x25d2	; 0x25d2 <LCD_displayString>
			LCD_moveCursor(1, 0);
    3134:	81 e0       	ldi	r24, 0x01	; 1
    3136:	60 e0       	ldi	r22, 0x00	; 0
    3138:	0e 94 12 13 	call	0x2624	; 0x2624 <LCD_moveCursor>

			for (uint8 q = 0; q < PASSWORD_LENGTH; q++) {
    313c:	fe 01       	movw	r30, r28
    313e:	e1 56       	subi	r30, 0x61	; 97
    3140:	ff 4f       	sbci	r31, 0xFF	; 255
    3142:	10 82       	st	Z, r1
    3144:	1c c0       	rjmp	.+56     	; 0x317e <main+0xa4a>
				password[q] = KEYPAD_getPressedKey();
    3146:	fe 01       	movw	r30, r28
    3148:	e1 56       	subi	r30, 0x61	; 97
    314a:	ff 4f       	sbci	r31, 0xFF	; 255
    314c:	80 81       	ld	r24, Z
    314e:	08 2f       	mov	r16, r24
    3150:	10 e0       	ldi	r17, 0x00	; 0
    3152:	0e 94 e5 0c 	call	0x19ca	; 0x19ca <KEYPAD_getPressedKey>
    3156:	28 2f       	mov	r18, r24
    3158:	ce 01       	movw	r24, r28
    315a:	8b 54       	subi	r24, 0x4B	; 75
    315c:	9f 4f       	sbci	r25, 0xFF	; 255
    315e:	fc 01       	movw	r30, r24
    3160:	e0 0f       	add	r30, r16
    3162:	f1 1f       	adc	r31, r17
    3164:	20 83       	st	Z, r18
				LCD_displayCharacter('*');
    3166:	8a e2       	ldi	r24, 0x2A	; 42
    3168:	0e 94 fa 10 	call	0x21f4	; 0x21f4 <LCD_displayCharacter>
			UART_sendByte(0);
			LCD_clearScreen();
			LCD_displayString("Enter Password:");
			LCD_moveCursor(1, 0);

			for (uint8 q = 0; q < PASSWORD_LENGTH; q++) {
    316c:	de 01       	movw	r26, r28
    316e:	a1 56       	subi	r26, 0x61	; 97
    3170:	bf 4f       	sbci	r27, 0xFF	; 255
    3172:	fe 01       	movw	r30, r28
    3174:	e1 56       	subi	r30, 0x61	; 97
    3176:	ff 4f       	sbci	r31, 0xFF	; 255
    3178:	80 81       	ld	r24, Z
    317a:	8f 5f       	subi	r24, 0xFF	; 255
    317c:	8c 93       	st	X, r24
    317e:	fe 01       	movw	r30, r28
    3180:	e1 56       	subi	r30, 0x61	; 97
    3182:	ff 4f       	sbci	r31, 0xFF	; 255
    3184:	80 81       	ld	r24, Z
    3186:	85 30       	cpi	r24, 0x05	; 5
    3188:	f0 f2       	brcs	.-68     	; 0x3146 <main+0xa12>
				password[q] = KEYPAD_getPressedKey();
				LCD_displayCharacter('*');
			}

			while (KEYPAD_getPressedKey() != ENTER_KEY) {
    318a:	0e 94 e5 0c 	call	0x19ca	; 0x19ca <KEYPAD_getPressedKey>
    318e:	83 32       	cpi	r24, 0x23	; 35
    3190:	e1 f7       	brne	.-8      	; 0x318a <main+0xa56>
				// Wait for enter key
			}

			for (uint8 w = 0; w < PASSWORD_LENGTH; w++) {
    3192:	fe 01       	movw	r30, r28
    3194:	e2 56       	subi	r30, 0x62	; 98
    3196:	ff 4f       	sbci	r31, 0xFF	; 255
    3198:	10 82       	st	Z, r1
    319a:	cb c0       	rjmp	.+406    	; 0x3332 <main+0xbfe>
				UART_sendByte(password[w]);
    319c:	fe 01       	movw	r30, r28
    319e:	e2 56       	subi	r30, 0x62	; 98
    31a0:	ff 4f       	sbci	r31, 0xFF	; 255
    31a2:	80 81       	ld	r24, Z
    31a4:	28 2f       	mov	r18, r24
    31a6:	30 e0       	ldi	r19, 0x00	; 0
    31a8:	ce 01       	movw	r24, r28
    31aa:	8b 54       	subi	r24, 0x4B	; 75
    31ac:	9f 4f       	sbci	r25, 0xFF	; 255
    31ae:	fc 01       	movw	r30, r24
    31b0:	e2 0f       	add	r30, r18
    31b2:	f3 1f       	adc	r31, r19
    31b4:	80 81       	ld	r24, Z
    31b6:	0e 94 53 0c 	call	0x18a6	; 0x18a6 <UART_sendByte>
    31ba:	fe 01       	movw	r30, r28
    31bc:	e1 5a       	subi	r30, 0xA1	; 161
    31be:	ff 4f       	sbci	r31, 0xFF	; 255
    31c0:	80 e0       	ldi	r24, 0x00	; 0
    31c2:	90 e0       	ldi	r25, 0x00	; 0
    31c4:	a8 e4       	ldi	r26, 0x48	; 72
    31c6:	b2 e4       	ldi	r27, 0x42	; 66
    31c8:	80 83       	st	Z, r24
    31ca:	91 83       	std	Z+1, r25	; 0x01
    31cc:	a2 83       	std	Z+2, r26	; 0x02
    31ce:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31d0:	8e 01       	movw	r16, r28
    31d2:	05 5a       	subi	r16, 0xA5	; 165
    31d4:	1f 4f       	sbci	r17, 0xFF	; 255
    31d6:	fe 01       	movw	r30, r28
    31d8:	e1 5a       	subi	r30, 0xA1	; 161
    31da:	ff 4f       	sbci	r31, 0xFF	; 255
    31dc:	60 81       	ld	r22, Z
    31de:	71 81       	ldd	r23, Z+1	; 0x01
    31e0:	82 81       	ldd	r24, Z+2	; 0x02
    31e2:	93 81       	ldd	r25, Z+3	; 0x03
    31e4:	20 e0       	ldi	r18, 0x00	; 0
    31e6:	30 e0       	ldi	r19, 0x00	; 0
    31e8:	4a ef       	ldi	r20, 0xFA	; 250
    31ea:	54 e4       	ldi	r21, 0x44	; 68
    31ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31f0:	dc 01       	movw	r26, r24
    31f2:	cb 01       	movw	r24, r22
    31f4:	f8 01       	movw	r30, r16
    31f6:	80 83       	st	Z, r24
    31f8:	91 83       	std	Z+1, r25	; 0x01
    31fa:	a2 83       	std	Z+2, r26	; 0x02
    31fc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    31fe:	fe 01       	movw	r30, r28
    3200:	e5 5a       	subi	r30, 0xA5	; 165
    3202:	ff 4f       	sbci	r31, 0xFF	; 255
    3204:	60 81       	ld	r22, Z
    3206:	71 81       	ldd	r23, Z+1	; 0x01
    3208:	82 81       	ldd	r24, Z+2	; 0x02
    320a:	93 81       	ldd	r25, Z+3	; 0x03
    320c:	20 e0       	ldi	r18, 0x00	; 0
    320e:	30 e0       	ldi	r19, 0x00	; 0
    3210:	40 e8       	ldi	r20, 0x80	; 128
    3212:	5f e3       	ldi	r21, 0x3F	; 63
    3214:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3218:	88 23       	and	r24, r24
    321a:	44 f4       	brge	.+16     	; 0x322c <main+0xaf8>
		__ticks = 1;
    321c:	fe 01       	movw	r30, r28
    321e:	e7 5a       	subi	r30, 0xA7	; 167
    3220:	ff 4f       	sbci	r31, 0xFF	; 255
    3222:	81 e0       	ldi	r24, 0x01	; 1
    3224:	90 e0       	ldi	r25, 0x00	; 0
    3226:	91 83       	std	Z+1, r25	; 0x01
    3228:	80 83       	st	Z, r24
    322a:	64 c0       	rjmp	.+200    	; 0x32f4 <main+0xbc0>
	else if (__tmp > 65535)
    322c:	fe 01       	movw	r30, r28
    322e:	e5 5a       	subi	r30, 0xA5	; 165
    3230:	ff 4f       	sbci	r31, 0xFF	; 255
    3232:	60 81       	ld	r22, Z
    3234:	71 81       	ldd	r23, Z+1	; 0x01
    3236:	82 81       	ldd	r24, Z+2	; 0x02
    3238:	93 81       	ldd	r25, Z+3	; 0x03
    323a:	20 e0       	ldi	r18, 0x00	; 0
    323c:	3f ef       	ldi	r19, 0xFF	; 255
    323e:	4f e7       	ldi	r20, 0x7F	; 127
    3240:	57 e4       	ldi	r21, 0x47	; 71
    3242:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3246:	18 16       	cp	r1, r24
    3248:	0c f0       	brlt	.+2      	; 0x324c <main+0xb18>
    324a:	43 c0       	rjmp	.+134    	; 0x32d2 <main+0xb9e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    324c:	fe 01       	movw	r30, r28
    324e:	e1 5a       	subi	r30, 0xA1	; 161
    3250:	ff 4f       	sbci	r31, 0xFF	; 255
    3252:	60 81       	ld	r22, Z
    3254:	71 81       	ldd	r23, Z+1	; 0x01
    3256:	82 81       	ldd	r24, Z+2	; 0x02
    3258:	93 81       	ldd	r25, Z+3	; 0x03
    325a:	20 e0       	ldi	r18, 0x00	; 0
    325c:	30 e0       	ldi	r19, 0x00	; 0
    325e:	40 e2       	ldi	r20, 0x20	; 32
    3260:	51 e4       	ldi	r21, 0x41	; 65
    3262:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3266:	dc 01       	movw	r26, r24
    3268:	cb 01       	movw	r24, r22
    326a:	8e 01       	movw	r16, r28
    326c:	07 5a       	subi	r16, 0xA7	; 167
    326e:	1f 4f       	sbci	r17, 0xFF	; 255
    3270:	bc 01       	movw	r22, r24
    3272:	cd 01       	movw	r24, r26
    3274:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3278:	dc 01       	movw	r26, r24
    327a:	cb 01       	movw	r24, r22
    327c:	f8 01       	movw	r30, r16
    327e:	91 83       	std	Z+1, r25	; 0x01
    3280:	80 83       	st	Z, r24
    3282:	1f c0       	rjmp	.+62     	; 0x32c2 <main+0xb8e>
    3284:	fe 01       	movw	r30, r28
    3286:	e9 5a       	subi	r30, 0xA9	; 169
    3288:	ff 4f       	sbci	r31, 0xFF	; 255
    328a:	88 ec       	ldi	r24, 0xC8	; 200
    328c:	90 e0       	ldi	r25, 0x00	; 0
    328e:	91 83       	std	Z+1, r25	; 0x01
    3290:	80 83       	st	Z, r24
    3292:	fe 01       	movw	r30, r28
    3294:	e9 5a       	subi	r30, 0xA9	; 169
    3296:	ff 4f       	sbci	r31, 0xFF	; 255
    3298:	80 81       	ld	r24, Z
    329a:	91 81       	ldd	r25, Z+1	; 0x01
    329c:	01 97       	sbiw	r24, 0x01	; 1
    329e:	f1 f7       	brne	.-4      	; 0x329c <main+0xb68>
    32a0:	fe 01       	movw	r30, r28
    32a2:	e9 5a       	subi	r30, 0xA9	; 169
    32a4:	ff 4f       	sbci	r31, 0xFF	; 255
    32a6:	91 83       	std	Z+1, r25	; 0x01
    32a8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32aa:	de 01       	movw	r26, r28
    32ac:	a7 5a       	subi	r26, 0xA7	; 167
    32ae:	bf 4f       	sbci	r27, 0xFF	; 255
    32b0:	fe 01       	movw	r30, r28
    32b2:	e7 5a       	subi	r30, 0xA7	; 167
    32b4:	ff 4f       	sbci	r31, 0xFF	; 255
    32b6:	80 81       	ld	r24, Z
    32b8:	91 81       	ldd	r25, Z+1	; 0x01
    32ba:	01 97       	sbiw	r24, 0x01	; 1
    32bc:	11 96       	adiw	r26, 0x01	; 1
    32be:	9c 93       	st	X, r25
    32c0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32c2:	fe 01       	movw	r30, r28
    32c4:	e7 5a       	subi	r30, 0xA7	; 167
    32c6:	ff 4f       	sbci	r31, 0xFF	; 255
    32c8:	80 81       	ld	r24, Z
    32ca:	91 81       	ldd	r25, Z+1	; 0x01
    32cc:	00 97       	sbiw	r24, 0x00	; 0
    32ce:	d1 f6       	brne	.-76     	; 0x3284 <main+0xb50>
    32d0:	27 c0       	rjmp	.+78     	; 0x3320 <main+0xbec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32d2:	8e 01       	movw	r16, r28
    32d4:	07 5a       	subi	r16, 0xA7	; 167
    32d6:	1f 4f       	sbci	r17, 0xFF	; 255
    32d8:	fe 01       	movw	r30, r28
    32da:	e5 5a       	subi	r30, 0xA5	; 165
    32dc:	ff 4f       	sbci	r31, 0xFF	; 255
    32de:	60 81       	ld	r22, Z
    32e0:	71 81       	ldd	r23, Z+1	; 0x01
    32e2:	82 81       	ldd	r24, Z+2	; 0x02
    32e4:	93 81       	ldd	r25, Z+3	; 0x03
    32e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32ea:	dc 01       	movw	r26, r24
    32ec:	cb 01       	movw	r24, r22
    32ee:	f8 01       	movw	r30, r16
    32f0:	91 83       	std	Z+1, r25	; 0x01
    32f2:	80 83       	st	Z, r24
    32f4:	de 01       	movw	r26, r28
    32f6:	ab 5a       	subi	r26, 0xAB	; 171
    32f8:	bf 4f       	sbci	r27, 0xFF	; 255
    32fa:	fe 01       	movw	r30, r28
    32fc:	e7 5a       	subi	r30, 0xA7	; 167
    32fe:	ff 4f       	sbci	r31, 0xFF	; 255
    3300:	80 81       	ld	r24, Z
    3302:	91 81       	ldd	r25, Z+1	; 0x01
    3304:	8d 93       	st	X+, r24
    3306:	9c 93       	st	X, r25
    3308:	fe 01       	movw	r30, r28
    330a:	eb 5a       	subi	r30, 0xAB	; 171
    330c:	ff 4f       	sbci	r31, 0xFF	; 255
    330e:	80 81       	ld	r24, Z
    3310:	91 81       	ldd	r25, Z+1	; 0x01
    3312:	01 97       	sbiw	r24, 0x01	; 1
    3314:	f1 f7       	brne	.-4      	; 0x3312 <main+0xbde>
    3316:	fe 01       	movw	r30, r28
    3318:	eb 5a       	subi	r30, 0xAB	; 171
    331a:	ff 4f       	sbci	r31, 0xFF	; 255
    331c:	91 83       	std	Z+1, r25	; 0x01
    331e:	80 83       	st	Z, r24

			while (KEYPAD_getPressedKey() != ENTER_KEY) {
				// Wait for enter key
			}

			for (uint8 w = 0; w < PASSWORD_LENGTH; w++) {
    3320:	de 01       	movw	r26, r28
    3322:	a2 56       	subi	r26, 0x62	; 98
    3324:	bf 4f       	sbci	r27, 0xFF	; 255
    3326:	fe 01       	movw	r30, r28
    3328:	e2 56       	subi	r30, 0x62	; 98
    332a:	ff 4f       	sbci	r31, 0xFF	; 255
    332c:	80 81       	ld	r24, Z
    332e:	8f 5f       	subi	r24, 0xFF	; 255
    3330:	8c 93       	st	X, r24
    3332:	fe 01       	movw	r30, r28
    3334:	e2 56       	subi	r30, 0x62	; 98
    3336:	ff 4f       	sbci	r31, 0xFF	; 255
    3338:	80 81       	ld	r24, Z
    333a:	85 30       	cpi	r24, 0x05	; 5
    333c:	08 f4       	brcc	.+2      	; 0x3340 <main+0xc0c>
    333e:	2e cf       	rjmp	.-420    	; 0x319c <main+0xa68>
				UART_sendByte(password[w]);
				_delay_ms(50);
			}

			result2 = UART_recieveByte();
    3340:	0e 94 6a 0c 	call	0x18d4	; 0x18d4 <UART_recieveByte>
    3344:	fe 01       	movw	r30, r28
    3346:	eb 55       	subi	r30, 0x5B	; 91
    3348:	ff 4f       	sbci	r31, 0xFF	; 255
    334a:	80 83       	st	Z, r24
    334c:	fe 01       	movw	r30, r28
    334e:	ef 5a       	subi	r30, 0xAF	; 175
    3350:	ff 4f       	sbci	r31, 0xFF	; 255
    3352:	80 e0       	ldi	r24, 0x00	; 0
    3354:	90 e0       	ldi	r25, 0x00	; 0
    3356:	a8 e4       	ldi	r26, 0x48	; 72
    3358:	b2 e4       	ldi	r27, 0x42	; 66
    335a:	80 83       	st	Z, r24
    335c:	91 83       	std	Z+1, r25	; 0x01
    335e:	a2 83       	std	Z+2, r26	; 0x02
    3360:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3362:	8e 01       	movw	r16, r28
    3364:	03 5b       	subi	r16, 0xB3	; 179
    3366:	1f 4f       	sbci	r17, 0xFF	; 255
    3368:	fe 01       	movw	r30, r28
    336a:	ef 5a       	subi	r30, 0xAF	; 175
    336c:	ff 4f       	sbci	r31, 0xFF	; 255
    336e:	60 81       	ld	r22, Z
    3370:	71 81       	ldd	r23, Z+1	; 0x01
    3372:	82 81       	ldd	r24, Z+2	; 0x02
    3374:	93 81       	ldd	r25, Z+3	; 0x03
    3376:	20 e0       	ldi	r18, 0x00	; 0
    3378:	30 e0       	ldi	r19, 0x00	; 0
    337a:	4a ef       	ldi	r20, 0xFA	; 250
    337c:	54 e4       	ldi	r21, 0x44	; 68
    337e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3382:	dc 01       	movw	r26, r24
    3384:	cb 01       	movw	r24, r22
    3386:	f8 01       	movw	r30, r16
    3388:	80 83       	st	Z, r24
    338a:	91 83       	std	Z+1, r25	; 0x01
    338c:	a2 83       	std	Z+2, r26	; 0x02
    338e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3390:	fe 01       	movw	r30, r28
    3392:	e3 5b       	subi	r30, 0xB3	; 179
    3394:	ff 4f       	sbci	r31, 0xFF	; 255
    3396:	60 81       	ld	r22, Z
    3398:	71 81       	ldd	r23, Z+1	; 0x01
    339a:	82 81       	ldd	r24, Z+2	; 0x02
    339c:	93 81       	ldd	r25, Z+3	; 0x03
    339e:	20 e0       	ldi	r18, 0x00	; 0
    33a0:	30 e0       	ldi	r19, 0x00	; 0
    33a2:	40 e8       	ldi	r20, 0x80	; 128
    33a4:	5f e3       	ldi	r21, 0x3F	; 63
    33a6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    33aa:	88 23       	and	r24, r24
    33ac:	44 f4       	brge	.+16     	; 0x33be <main+0xc8a>
		__ticks = 1;
    33ae:	fe 01       	movw	r30, r28
    33b0:	e5 5b       	subi	r30, 0xB5	; 181
    33b2:	ff 4f       	sbci	r31, 0xFF	; 255
    33b4:	81 e0       	ldi	r24, 0x01	; 1
    33b6:	90 e0       	ldi	r25, 0x00	; 0
    33b8:	91 83       	std	Z+1, r25	; 0x01
    33ba:	80 83       	st	Z, r24
    33bc:	64 c0       	rjmp	.+200    	; 0x3486 <main+0xd52>
	else if (__tmp > 65535)
    33be:	fe 01       	movw	r30, r28
    33c0:	e3 5b       	subi	r30, 0xB3	; 179
    33c2:	ff 4f       	sbci	r31, 0xFF	; 255
    33c4:	60 81       	ld	r22, Z
    33c6:	71 81       	ldd	r23, Z+1	; 0x01
    33c8:	82 81       	ldd	r24, Z+2	; 0x02
    33ca:	93 81       	ldd	r25, Z+3	; 0x03
    33cc:	20 e0       	ldi	r18, 0x00	; 0
    33ce:	3f ef       	ldi	r19, 0xFF	; 255
    33d0:	4f e7       	ldi	r20, 0x7F	; 127
    33d2:	57 e4       	ldi	r21, 0x47	; 71
    33d4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    33d8:	18 16       	cp	r1, r24
    33da:	0c f0       	brlt	.+2      	; 0x33de <main+0xcaa>
    33dc:	43 c0       	rjmp	.+134    	; 0x3464 <main+0xd30>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33de:	fe 01       	movw	r30, r28
    33e0:	ef 5a       	subi	r30, 0xAF	; 175
    33e2:	ff 4f       	sbci	r31, 0xFF	; 255
    33e4:	60 81       	ld	r22, Z
    33e6:	71 81       	ldd	r23, Z+1	; 0x01
    33e8:	82 81       	ldd	r24, Z+2	; 0x02
    33ea:	93 81       	ldd	r25, Z+3	; 0x03
    33ec:	20 e0       	ldi	r18, 0x00	; 0
    33ee:	30 e0       	ldi	r19, 0x00	; 0
    33f0:	40 e2       	ldi	r20, 0x20	; 32
    33f2:	51 e4       	ldi	r21, 0x41	; 65
    33f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33f8:	dc 01       	movw	r26, r24
    33fa:	cb 01       	movw	r24, r22
    33fc:	8e 01       	movw	r16, r28
    33fe:	05 5b       	subi	r16, 0xB5	; 181
    3400:	1f 4f       	sbci	r17, 0xFF	; 255
    3402:	bc 01       	movw	r22, r24
    3404:	cd 01       	movw	r24, r26
    3406:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    340a:	dc 01       	movw	r26, r24
    340c:	cb 01       	movw	r24, r22
    340e:	f8 01       	movw	r30, r16
    3410:	91 83       	std	Z+1, r25	; 0x01
    3412:	80 83       	st	Z, r24
    3414:	1f c0       	rjmp	.+62     	; 0x3454 <main+0xd20>
    3416:	fe 01       	movw	r30, r28
    3418:	e7 5b       	subi	r30, 0xB7	; 183
    341a:	ff 4f       	sbci	r31, 0xFF	; 255
    341c:	88 ec       	ldi	r24, 0xC8	; 200
    341e:	90 e0       	ldi	r25, 0x00	; 0
    3420:	91 83       	std	Z+1, r25	; 0x01
    3422:	80 83       	st	Z, r24
    3424:	fe 01       	movw	r30, r28
    3426:	e7 5b       	subi	r30, 0xB7	; 183
    3428:	ff 4f       	sbci	r31, 0xFF	; 255
    342a:	80 81       	ld	r24, Z
    342c:	91 81       	ldd	r25, Z+1	; 0x01
    342e:	01 97       	sbiw	r24, 0x01	; 1
    3430:	f1 f7       	brne	.-4      	; 0x342e <main+0xcfa>
    3432:	fe 01       	movw	r30, r28
    3434:	e7 5b       	subi	r30, 0xB7	; 183
    3436:	ff 4f       	sbci	r31, 0xFF	; 255
    3438:	91 83       	std	Z+1, r25	; 0x01
    343a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    343c:	de 01       	movw	r26, r28
    343e:	a5 5b       	subi	r26, 0xB5	; 181
    3440:	bf 4f       	sbci	r27, 0xFF	; 255
    3442:	fe 01       	movw	r30, r28
    3444:	e5 5b       	subi	r30, 0xB5	; 181
    3446:	ff 4f       	sbci	r31, 0xFF	; 255
    3448:	80 81       	ld	r24, Z
    344a:	91 81       	ldd	r25, Z+1	; 0x01
    344c:	01 97       	sbiw	r24, 0x01	; 1
    344e:	11 96       	adiw	r26, 0x01	; 1
    3450:	9c 93       	st	X, r25
    3452:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3454:	fe 01       	movw	r30, r28
    3456:	e5 5b       	subi	r30, 0xB5	; 181
    3458:	ff 4f       	sbci	r31, 0xFF	; 255
    345a:	80 81       	ld	r24, Z
    345c:	91 81       	ldd	r25, Z+1	; 0x01
    345e:	00 97       	sbiw	r24, 0x00	; 0
    3460:	d1 f6       	brne	.-76     	; 0x3416 <main+0xce2>
    3462:	28 c0       	rjmp	.+80     	; 0x34b4 <main+0xd80>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3464:	8e 01       	movw	r16, r28
    3466:	05 5b       	subi	r16, 0xB5	; 181
    3468:	1f 4f       	sbci	r17, 0xFF	; 255
    346a:	fe 01       	movw	r30, r28
    346c:	e3 5b       	subi	r30, 0xB3	; 179
    346e:	ff 4f       	sbci	r31, 0xFF	; 255
    3470:	60 81       	ld	r22, Z
    3472:	71 81       	ldd	r23, Z+1	; 0x01
    3474:	82 81       	ldd	r24, Z+2	; 0x02
    3476:	93 81       	ldd	r25, Z+3	; 0x03
    3478:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    347c:	dc 01       	movw	r26, r24
    347e:	cb 01       	movw	r24, r22
    3480:	f8 01       	movw	r30, r16
    3482:	91 83       	std	Z+1, r25	; 0x01
    3484:	80 83       	st	Z, r24
    3486:	de 01       	movw	r26, r28
    3488:	a9 5b       	subi	r26, 0xB9	; 185
    348a:	bf 4f       	sbci	r27, 0xFF	; 255
    348c:	fe 01       	movw	r30, r28
    348e:	e5 5b       	subi	r30, 0xB5	; 181
    3490:	ff 4f       	sbci	r31, 0xFF	; 255
    3492:	80 81       	ld	r24, Z
    3494:	91 81       	ldd	r25, Z+1	; 0x01
    3496:	11 96       	adiw	r26, 0x01	; 1
    3498:	9c 93       	st	X, r25
    349a:	8e 93       	st	-X, r24
    349c:	fe 01       	movw	r30, r28
    349e:	e9 5b       	subi	r30, 0xB9	; 185
    34a0:	ff 4f       	sbci	r31, 0xFF	; 255
    34a2:	80 81       	ld	r24, Z
    34a4:	91 81       	ldd	r25, Z+1	; 0x01
    34a6:	01 97       	sbiw	r24, 0x01	; 1
    34a8:	f1 f7       	brne	.-4      	; 0x34a6 <main+0xd72>
    34aa:	fe 01       	movw	r30, r28
    34ac:	e9 5b       	subi	r30, 0xB9	; 185
    34ae:	ff 4f       	sbci	r31, 0xFF	; 255
    34b0:	91 83       	std	Z+1, r25	; 0x01
    34b2:	80 83       	st	Z, r24
			_delay_ms(50);
			if (result2 == 1) {
    34b4:	fe 01       	movw	r30, r28
    34b6:	eb 55       	subi	r30, 0x5B	; 91
    34b8:	ff 4f       	sbci	r31, 0xFF	; 255
    34ba:	80 81       	ld	r24, Z
    34bc:	81 30       	cpi	r24, 0x01	; 1
    34be:	09 f0       	breq	.+2      	; 0x34c2 <main+0xd8e>
    34c0:	cf c0       	rjmp	.+414    	; 0x3660 <main+0xf2c>
				LCD_clearScreen();
    34c2:	0e 94 90 13 	call	0x2720	; 0x2720 <LCD_clearScreen>
				LCD_displayString("Door Opening    ");
    34c6:	8b eb       	ldi	r24, 0xBB	; 187
    34c8:	90 e0       	ldi	r25, 0x00	; 0
    34ca:	0e 94 e9 12 	call	0x25d2	; 0x25d2 <LCD_displayString>
				tick = 0;
    34ce:	10 92 43 01 	sts	0x0143, r1
				Timer_start(TIMER1, F_CPU_1024);
    34d2:	81 e0       	ldi	r24, 0x01	; 1
    34d4:	65 e0       	ldi	r22, 0x05	; 5
    34d6:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <Timer_start>
				while (tick <= DOOR_OPEN_TIME)
    34da:	80 91 43 01 	lds	r24, 0x0143
    34de:	80 31       	cpi	r24, 0x10	; 16
    34e0:	e0 f3       	brcs	.-8      	; 0x34da <main+0xda6>
					;
				uint8 PIR_status = 1;
    34e2:	fe 01       	movw	r30, r28
    34e4:	e3 56       	subi	r30, 0x63	; 99
    34e6:	ff 4f       	sbci	r31, 0xFF	; 255
    34e8:	81 e0       	ldi	r24, 0x01	; 1
    34ea:	80 83       	st	Z, r24
				if (PIR_status == 1) {
    34ec:	fe 01       	movw	r30, r28
    34ee:	e3 56       	subi	r30, 0x63	; 99
    34f0:	ff 4f       	sbci	r31, 0xFF	; 255
    34f2:	80 81       	ld	r24, Z
    34f4:	81 30       	cpi	r24, 0x01	; 1
    34f6:	09 f0       	breq	.+2      	; 0x34fa <main+0xdc6>
    34f8:	9a c0       	rjmp	.+308    	; 0x362e <main+0xefa>
					LCD_clearScreen();
    34fa:	0e 94 90 13 	call	0x2720	; 0x2720 <LCD_clearScreen>
					LCD_displayString("waiting for ");
    34fe:	8c ec       	ldi	r24, 0xCC	; 204
    3500:	90 e0       	ldi	r25, 0x00	; 0
    3502:	0e 94 e9 12 	call	0x25d2	; 0x25d2 <LCD_displayString>
					LCD_moveCursor(1, 0);
    3506:	81 e0       	ldi	r24, 0x01	; 1
    3508:	60 e0       	ldi	r22, 0x00	; 0
    350a:	0e 94 12 13 	call	0x2624	; 0x2624 <LCD_moveCursor>
					LCD_displayString("people");
    350e:	89 ed       	ldi	r24, 0xD9	; 217
    3510:	90 e0       	ldi	r25, 0x00	; 0
    3512:	0e 94 e9 12 	call	0x25d2	; 0x25d2 <LCD_displayString>
    3516:	8b c0       	rjmp	.+278    	; 0x362e <main+0xefa>
				}
				while (PIR_status == 1) {
					PIR_status = UART_recieveByte();
    3518:	0e 94 6a 0c 	call	0x18d4	; 0x18d4 <UART_recieveByte>
    351c:	fe 01       	movw	r30, r28
    351e:	e3 56       	subi	r30, 0x63	; 99
    3520:	ff 4f       	sbci	r31, 0xFF	; 255
    3522:	80 83       	st	Z, r24
    3524:	fe 01       	movw	r30, r28
    3526:	ed 5b       	subi	r30, 0xBD	; 189
    3528:	ff 4f       	sbci	r31, 0xFF	; 255
    352a:	80 e0       	ldi	r24, 0x00	; 0
    352c:	90 e0       	ldi	r25, 0x00	; 0
    352e:	a8 e4       	ldi	r26, 0x48	; 72
    3530:	b2 e4       	ldi	r27, 0x42	; 66
    3532:	80 83       	st	Z, r24
    3534:	91 83       	std	Z+1, r25	; 0x01
    3536:	a2 83       	std	Z+2, r26	; 0x02
    3538:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    353a:	8e 01       	movw	r16, r28
    353c:	01 5c       	subi	r16, 0xC1	; 193
    353e:	1f 4f       	sbci	r17, 0xFF	; 255
    3540:	fe 01       	movw	r30, r28
    3542:	ed 5b       	subi	r30, 0xBD	; 189
    3544:	ff 4f       	sbci	r31, 0xFF	; 255
    3546:	60 81       	ld	r22, Z
    3548:	71 81       	ldd	r23, Z+1	; 0x01
    354a:	82 81       	ldd	r24, Z+2	; 0x02
    354c:	93 81       	ldd	r25, Z+3	; 0x03
    354e:	20 e0       	ldi	r18, 0x00	; 0
    3550:	30 e0       	ldi	r19, 0x00	; 0
    3552:	4a ef       	ldi	r20, 0xFA	; 250
    3554:	54 e4       	ldi	r21, 0x44	; 68
    3556:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    355a:	dc 01       	movw	r26, r24
    355c:	cb 01       	movw	r24, r22
    355e:	f8 01       	movw	r30, r16
    3560:	80 83       	st	Z, r24
    3562:	91 83       	std	Z+1, r25	; 0x01
    3564:	a2 83       	std	Z+2, r26	; 0x02
    3566:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3568:	fe 01       	movw	r30, r28
    356a:	ff 96       	adiw	r30, 0x3f	; 63
    356c:	60 81       	ld	r22, Z
    356e:	71 81       	ldd	r23, Z+1	; 0x01
    3570:	82 81       	ldd	r24, Z+2	; 0x02
    3572:	93 81       	ldd	r25, Z+3	; 0x03
    3574:	20 e0       	ldi	r18, 0x00	; 0
    3576:	30 e0       	ldi	r19, 0x00	; 0
    3578:	40 e8       	ldi	r20, 0x80	; 128
    357a:	5f e3       	ldi	r21, 0x3F	; 63
    357c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3580:	88 23       	and	r24, r24
    3582:	2c f4       	brge	.+10     	; 0x358e <main+0xe5a>
		__ticks = 1;
    3584:	81 e0       	ldi	r24, 0x01	; 1
    3586:	90 e0       	ldi	r25, 0x00	; 0
    3588:	9e af       	std	Y+62, r25	; 0x3e
    358a:	8d af       	std	Y+61, r24	; 0x3d
    358c:	46 c0       	rjmp	.+140    	; 0x361a <main+0xee6>
	else if (__tmp > 65535)
    358e:	fe 01       	movw	r30, r28
    3590:	ff 96       	adiw	r30, 0x3f	; 63
    3592:	60 81       	ld	r22, Z
    3594:	71 81       	ldd	r23, Z+1	; 0x01
    3596:	82 81       	ldd	r24, Z+2	; 0x02
    3598:	93 81       	ldd	r25, Z+3	; 0x03
    359a:	20 e0       	ldi	r18, 0x00	; 0
    359c:	3f ef       	ldi	r19, 0xFF	; 255
    359e:	4f e7       	ldi	r20, 0x7F	; 127
    35a0:	57 e4       	ldi	r21, 0x47	; 71
    35a2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    35a6:	18 16       	cp	r1, r24
    35a8:	64 f5       	brge	.+88     	; 0x3602 <main+0xece>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    35aa:	fe 01       	movw	r30, r28
    35ac:	ed 5b       	subi	r30, 0xBD	; 189
    35ae:	ff 4f       	sbci	r31, 0xFF	; 255
    35b0:	60 81       	ld	r22, Z
    35b2:	71 81       	ldd	r23, Z+1	; 0x01
    35b4:	82 81       	ldd	r24, Z+2	; 0x02
    35b6:	93 81       	ldd	r25, Z+3	; 0x03
    35b8:	20 e0       	ldi	r18, 0x00	; 0
    35ba:	30 e0       	ldi	r19, 0x00	; 0
    35bc:	40 e2       	ldi	r20, 0x20	; 32
    35be:	51 e4       	ldi	r21, 0x41	; 65
    35c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35c4:	dc 01       	movw	r26, r24
    35c6:	cb 01       	movw	r24, r22
    35c8:	bc 01       	movw	r22, r24
    35ca:	cd 01       	movw	r24, r26
    35cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35d0:	dc 01       	movw	r26, r24
    35d2:	cb 01       	movw	r24, r22
    35d4:	9e af       	std	Y+62, r25	; 0x3e
    35d6:	8d af       	std	Y+61, r24	; 0x3d
    35d8:	0f c0       	rjmp	.+30     	; 0x35f8 <main+0xec4>
    35da:	88 ec       	ldi	r24, 0xC8	; 200
    35dc:	90 e0       	ldi	r25, 0x00	; 0
    35de:	9c af       	std	Y+60, r25	; 0x3c
    35e0:	8b af       	std	Y+59, r24	; 0x3b
    35e2:	8b ad       	ldd	r24, Y+59	; 0x3b
    35e4:	9c ad       	ldd	r25, Y+60	; 0x3c
    35e6:	01 97       	sbiw	r24, 0x01	; 1
    35e8:	f1 f7       	brne	.-4      	; 0x35e6 <main+0xeb2>
    35ea:	9c af       	std	Y+60, r25	; 0x3c
    35ec:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35ee:	8d ad       	ldd	r24, Y+61	; 0x3d
    35f0:	9e ad       	ldd	r25, Y+62	; 0x3e
    35f2:	01 97       	sbiw	r24, 0x01	; 1
    35f4:	9e af       	std	Y+62, r25	; 0x3e
    35f6:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35f8:	8d ad       	ldd	r24, Y+61	; 0x3d
    35fa:	9e ad       	ldd	r25, Y+62	; 0x3e
    35fc:	00 97       	sbiw	r24, 0x00	; 0
    35fe:	69 f7       	brne	.-38     	; 0x35da <main+0xea6>
    3600:	16 c0       	rjmp	.+44     	; 0x362e <main+0xefa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3602:	fe 01       	movw	r30, r28
    3604:	ff 96       	adiw	r30, 0x3f	; 63
    3606:	60 81       	ld	r22, Z
    3608:	71 81       	ldd	r23, Z+1	; 0x01
    360a:	82 81       	ldd	r24, Z+2	; 0x02
    360c:	93 81       	ldd	r25, Z+3	; 0x03
    360e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3612:	dc 01       	movw	r26, r24
    3614:	cb 01       	movw	r24, r22
    3616:	9e af       	std	Y+62, r25	; 0x3e
    3618:	8d af       	std	Y+61, r24	; 0x3d
    361a:	8d ad       	ldd	r24, Y+61	; 0x3d
    361c:	9e ad       	ldd	r25, Y+62	; 0x3e
    361e:	9a af       	std	Y+58, r25	; 0x3a
    3620:	89 af       	std	Y+57, r24	; 0x39
    3622:	89 ad       	ldd	r24, Y+57	; 0x39
    3624:	9a ad       	ldd	r25, Y+58	; 0x3a
    3626:	01 97       	sbiw	r24, 0x01	; 1
    3628:	f1 f7       	brne	.-4      	; 0x3626 <main+0xef2>
    362a:	9a af       	std	Y+58, r25	; 0x3a
    362c:	89 af       	std	Y+57, r24	; 0x39
					LCD_clearScreen();
					LCD_displayString("waiting for ");
					LCD_moveCursor(1, 0);
					LCD_displayString("people");
				}
				while (PIR_status == 1) {
    362e:	fe 01       	movw	r30, r28
    3630:	e3 56       	subi	r30, 0x63	; 99
    3632:	ff 4f       	sbci	r31, 0xFF	; 255
    3634:	80 81       	ld	r24, Z
    3636:	81 30       	cpi	r24, 0x01	; 1
    3638:	09 f4       	brne	.+2      	; 0x363c <main+0xf08>
    363a:	6e cf       	rjmp	.-292    	; 0x3518 <main+0xde4>
					PIR_status = UART_recieveByte();
					_delay_ms(50);
				}
				tick = 0;
    363c:	10 92 43 01 	sts	0x0143, r1
				LCD_clearScreen();
    3640:	0e 94 90 13 	call	0x2720	; 0x2720 <LCD_clearScreen>
				LCD_displayString("Door closing");
    3644:	80 ee       	ldi	r24, 0xE0	; 224
    3646:	90 e0       	ldi	r25, 0x00	; 0
    3648:	0e 94 e9 12 	call	0x25d2	; 0x25d2 <LCD_displayString>
				while (tick <= DOOR_OPEN_TIME)
    364c:	80 91 43 01 	lds	r24, 0x0143
    3650:	80 31       	cpi	r24, 0x10	; 16
    3652:	e0 f3       	brcs	.-8      	; 0x364c <main+0xf18>
					;
				attempt_count = 0;
    3654:	10 92 44 01 	sts	0x0144, r1
				state = MAIN_OPTIONS;
    3658:	83 e0       	ldi	r24, 0x03	; 3
    365a:	80 93 42 01 	sts	0x0142, r24
    365e:	35 c9       	rjmp	.-3478   	; 0x28ca <main+0x196>
			} else {
				LCD_clearScreen();
    3660:	0e 94 90 13 	call	0x2720	; 0x2720 <LCD_clearScreen>
				LCD_displayString("Incorrect Pass");
    3664:	8d ee       	ldi	r24, 0xED	; 237
    3666:	90 e0       	ldi	r25, 0x00	; 0
    3668:	0e 94 e9 12 	call	0x25d2	; 0x25d2 <LCD_displayString>
    366c:	80 e0       	ldi	r24, 0x00	; 0
    366e:	90 e0       	ldi	r25, 0x00	; 0
    3670:	aa ef       	ldi	r26, 0xFA	; 250
    3672:	b3 e4       	ldi	r27, 0x43	; 67
    3674:	8d ab       	std	Y+53, r24	; 0x35
    3676:	9e ab       	std	Y+54, r25	; 0x36
    3678:	af ab       	std	Y+55, r26	; 0x37
    367a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    367c:	6d a9       	ldd	r22, Y+53	; 0x35
    367e:	7e a9       	ldd	r23, Y+54	; 0x36
    3680:	8f a9       	ldd	r24, Y+55	; 0x37
    3682:	98 ad       	ldd	r25, Y+56	; 0x38
    3684:	20 e0       	ldi	r18, 0x00	; 0
    3686:	30 e0       	ldi	r19, 0x00	; 0
    3688:	4a ef       	ldi	r20, 0xFA	; 250
    368a:	54 e4       	ldi	r21, 0x44	; 68
    368c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3690:	dc 01       	movw	r26, r24
    3692:	cb 01       	movw	r24, r22
    3694:	89 ab       	std	Y+49, r24	; 0x31
    3696:	9a ab       	std	Y+50, r25	; 0x32
    3698:	ab ab       	std	Y+51, r26	; 0x33
    369a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    369c:	69 a9       	ldd	r22, Y+49	; 0x31
    369e:	7a a9       	ldd	r23, Y+50	; 0x32
    36a0:	8b a9       	ldd	r24, Y+51	; 0x33
    36a2:	9c a9       	ldd	r25, Y+52	; 0x34
    36a4:	20 e0       	ldi	r18, 0x00	; 0
    36a6:	30 e0       	ldi	r19, 0x00	; 0
    36a8:	40 e8       	ldi	r20, 0x80	; 128
    36aa:	5f e3       	ldi	r21, 0x3F	; 63
    36ac:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    36b0:	88 23       	and	r24, r24
    36b2:	2c f4       	brge	.+10     	; 0x36be <main+0xf8a>
		__ticks = 1;
    36b4:	81 e0       	ldi	r24, 0x01	; 1
    36b6:	90 e0       	ldi	r25, 0x00	; 0
    36b8:	98 ab       	std	Y+48, r25	; 0x30
    36ba:	8f a7       	std	Y+47, r24	; 0x2f
    36bc:	3f c0       	rjmp	.+126    	; 0x373c <main+0x1008>
	else if (__tmp > 65535)
    36be:	69 a9       	ldd	r22, Y+49	; 0x31
    36c0:	7a a9       	ldd	r23, Y+50	; 0x32
    36c2:	8b a9       	ldd	r24, Y+51	; 0x33
    36c4:	9c a9       	ldd	r25, Y+52	; 0x34
    36c6:	20 e0       	ldi	r18, 0x00	; 0
    36c8:	3f ef       	ldi	r19, 0xFF	; 255
    36ca:	4f e7       	ldi	r20, 0x7F	; 127
    36cc:	57 e4       	ldi	r21, 0x47	; 71
    36ce:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    36d2:	18 16       	cp	r1, r24
    36d4:	4c f5       	brge	.+82     	; 0x3728 <main+0xff4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    36d6:	6d a9       	ldd	r22, Y+53	; 0x35
    36d8:	7e a9       	ldd	r23, Y+54	; 0x36
    36da:	8f a9       	ldd	r24, Y+55	; 0x37
    36dc:	98 ad       	ldd	r25, Y+56	; 0x38
    36de:	20 e0       	ldi	r18, 0x00	; 0
    36e0:	30 e0       	ldi	r19, 0x00	; 0
    36e2:	40 e2       	ldi	r20, 0x20	; 32
    36e4:	51 e4       	ldi	r21, 0x41	; 65
    36e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36ea:	dc 01       	movw	r26, r24
    36ec:	cb 01       	movw	r24, r22
    36ee:	bc 01       	movw	r22, r24
    36f0:	cd 01       	movw	r24, r26
    36f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36f6:	dc 01       	movw	r26, r24
    36f8:	cb 01       	movw	r24, r22
    36fa:	98 ab       	std	Y+48, r25	; 0x30
    36fc:	8f a7       	std	Y+47, r24	; 0x2f
    36fe:	0f c0       	rjmp	.+30     	; 0x371e <main+0xfea>
    3700:	88 ec       	ldi	r24, 0xC8	; 200
    3702:	90 e0       	ldi	r25, 0x00	; 0
    3704:	9e a7       	std	Y+46, r25	; 0x2e
    3706:	8d a7       	std	Y+45, r24	; 0x2d
    3708:	8d a5       	ldd	r24, Y+45	; 0x2d
    370a:	9e a5       	ldd	r25, Y+46	; 0x2e
    370c:	01 97       	sbiw	r24, 0x01	; 1
    370e:	f1 f7       	brne	.-4      	; 0x370c <main+0xfd8>
    3710:	9e a7       	std	Y+46, r25	; 0x2e
    3712:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3714:	8f a5       	ldd	r24, Y+47	; 0x2f
    3716:	98 a9       	ldd	r25, Y+48	; 0x30
    3718:	01 97       	sbiw	r24, 0x01	; 1
    371a:	98 ab       	std	Y+48, r25	; 0x30
    371c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    371e:	8f a5       	ldd	r24, Y+47	; 0x2f
    3720:	98 a9       	ldd	r25, Y+48	; 0x30
    3722:	00 97       	sbiw	r24, 0x00	; 0
    3724:	69 f7       	brne	.-38     	; 0x3700 <main+0xfcc>
    3726:	14 c0       	rjmp	.+40     	; 0x3750 <main+0x101c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3728:	69 a9       	ldd	r22, Y+49	; 0x31
    372a:	7a a9       	ldd	r23, Y+50	; 0x32
    372c:	8b a9       	ldd	r24, Y+51	; 0x33
    372e:	9c a9       	ldd	r25, Y+52	; 0x34
    3730:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3734:	dc 01       	movw	r26, r24
    3736:	cb 01       	movw	r24, r22
    3738:	98 ab       	std	Y+48, r25	; 0x30
    373a:	8f a7       	std	Y+47, r24	; 0x2f
    373c:	8f a5       	ldd	r24, Y+47	; 0x2f
    373e:	98 a9       	ldd	r25, Y+48	; 0x30
    3740:	9c a7       	std	Y+44, r25	; 0x2c
    3742:	8b a7       	std	Y+43, r24	; 0x2b
    3744:	8b a5       	ldd	r24, Y+43	; 0x2b
    3746:	9c a5       	ldd	r25, Y+44	; 0x2c
    3748:	01 97       	sbiw	r24, 0x01	; 1
    374a:	f1 f7       	brne	.-4      	; 0x3748 <main+0x1014>
    374c:	9c a7       	std	Y+44, r25	; 0x2c
    374e:	8b a7       	std	Y+43, r24	; 0x2b
				_delay_ms(500);

				attempt_count++;
    3750:	80 91 44 01 	lds	r24, 0x0144
    3754:	8f 5f       	subi	r24, 0xFF	; 255
    3756:	80 93 44 01 	sts	0x0144, r24
				if (attempt_count == MAX_ATTEMPTS) {
    375a:	80 91 44 01 	lds	r24, 0x0144
    375e:	83 30       	cpi	r24, 0x03	; 3
    3760:	b1 f4       	brne	.+44     	; 0x378e <main+0x105a>
					LCD_clearScreen();
    3762:	0e 94 90 13 	call	0x2720	; 0x2720 <LCD_clearScreen>
					LCD_displayString("System Locked");
    3766:	8c ef       	ldi	r24, 0xFC	; 252
    3768:	90 e0       	ldi	r25, 0x00	; 0
    376a:	0e 94 e9 12 	call	0x25d2	; 0x25d2 <LCD_displayString>
					attempt_count = 0; // Reset attempt count after lockout
    376e:	10 92 44 01 	sts	0x0144, r1
					tick = 0;
    3772:	10 92 43 01 	sts	0x0143, r1
					Timer_start(TIMER1, F_CPU_1024);
    3776:	81 e0       	ldi	r24, 0x01	; 1
    3778:	65 e0       	ldi	r22, 0x05	; 5
    377a:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <Timer_start>
					while (tick <= LOCKOUT_TIME)
    377e:	80 91 43 01 	lds	r24, 0x0143
    3782:	8d 33       	cpi	r24, 0x3D	; 61
    3784:	e0 f3       	brcs	.-8      	; 0x377e <main+0x104a>
						;
					state = MAIN_OPTIONS;
    3786:	83 e0       	ldi	r24, 0x03	; 3
    3788:	80 93 42 01 	sts	0x0142, r24
    378c:	9e c8       	rjmp	.-3780   	; 0x28ca <main+0x196>

				} else {
					state = OPEN_DOOR; // Retry password entry
    378e:	84 e0       	ldi	r24, 0x04	; 4
    3790:	80 93 42 01 	sts	0x0142, r24
    3794:	9a c8       	rjmp	.-3788   	; 0x28ca <main+0x196>
				}
			}
			break;

		case CHANGE_PASSWORD:
			UART_sendByte(1);
    3796:	81 e0       	ldi	r24, 0x01	; 1
    3798:	0e 94 53 0c 	call	0x18a6	; 0x18a6 <UART_sendByte>
			LCD_clearScreen();
    379c:	0e 94 90 13 	call	0x2720	; 0x2720 <LCD_clearScreen>
			LCD_displayString("Enter Old");
    37a0:	8a e0       	ldi	r24, 0x0A	; 10
    37a2:	91 e0       	ldi	r25, 0x01	; 1
    37a4:	0e 94 e9 12 	call	0x25d2	; 0x25d2 <LCD_displayString>
			LCD_moveCursor(1, 0);
    37a8:	81 e0       	ldi	r24, 0x01	; 1
    37aa:	60 e0       	ldi	r22, 0x00	; 0
    37ac:	0e 94 12 13 	call	0x2624	; 0x2624 <LCD_moveCursor>
			LCD_displayString("Password:");
    37b0:	84 e1       	ldi	r24, 0x14	; 20
    37b2:	91 e0       	ldi	r25, 0x01	; 1
    37b4:	0e 94 e9 12 	call	0x25d2	; 0x25d2 <LCD_displayString>
			for (uint8 h = 0; h < PASSWORD_LENGTH; h++) {
    37b8:	fe 01       	movw	r30, r28
    37ba:	e4 56       	subi	r30, 0x64	; 100
    37bc:	ff 4f       	sbci	r31, 0xFF	; 255
    37be:	10 82       	st	Z, r1
    37c0:	1c c0       	rjmp	.+56     	; 0x37fa <main+0x10c6>
				password[h] = KEYPAD_getPressedKey();
    37c2:	fe 01       	movw	r30, r28
    37c4:	e4 56       	subi	r30, 0x64	; 100
    37c6:	ff 4f       	sbci	r31, 0xFF	; 255
    37c8:	80 81       	ld	r24, Z
    37ca:	08 2f       	mov	r16, r24
    37cc:	10 e0       	ldi	r17, 0x00	; 0
    37ce:	0e 94 e5 0c 	call	0x19ca	; 0x19ca <KEYPAD_getPressedKey>
    37d2:	28 2f       	mov	r18, r24
    37d4:	ce 01       	movw	r24, r28
    37d6:	8b 54       	subi	r24, 0x4B	; 75
    37d8:	9f 4f       	sbci	r25, 0xFF	; 255
    37da:	fc 01       	movw	r30, r24
    37dc:	e0 0f       	add	r30, r16
    37de:	f1 1f       	adc	r31, r17
    37e0:	20 83       	st	Z, r18
				LCD_displayCharacter('*');
    37e2:	8a e2       	ldi	r24, 0x2A	; 42
    37e4:	0e 94 fa 10 	call	0x21f4	; 0x21f4 <LCD_displayCharacter>
			UART_sendByte(1);
			LCD_clearScreen();
			LCD_displayString("Enter Old");
			LCD_moveCursor(1, 0);
			LCD_displayString("Password:");
			for (uint8 h = 0; h < PASSWORD_LENGTH; h++) {
    37e8:	de 01       	movw	r26, r28
    37ea:	a4 56       	subi	r26, 0x64	; 100
    37ec:	bf 4f       	sbci	r27, 0xFF	; 255
    37ee:	fe 01       	movw	r30, r28
    37f0:	e4 56       	subi	r30, 0x64	; 100
    37f2:	ff 4f       	sbci	r31, 0xFF	; 255
    37f4:	80 81       	ld	r24, Z
    37f6:	8f 5f       	subi	r24, 0xFF	; 255
    37f8:	8c 93       	st	X, r24
    37fa:	fe 01       	movw	r30, r28
    37fc:	e4 56       	subi	r30, 0x64	; 100
    37fe:	ff 4f       	sbci	r31, 0xFF	; 255
    3800:	80 81       	ld	r24, Z
    3802:	85 30       	cpi	r24, 0x05	; 5
    3804:	f0 f2       	brcs	.-68     	; 0x37c2 <main+0x108e>
				password[h] = KEYPAD_getPressedKey();
				LCD_displayCharacter('*');
			}

			while (KEYPAD_getPressedKey() != ENTER_KEY)
    3806:	0e 94 e5 0c 	call	0x19ca	; 0x19ca <KEYPAD_getPressedKey>
    380a:	83 32       	cpi	r24, 0x23	; 35
    380c:	e1 f7       	brne	.-8      	; 0x3806 <main+0x10d2>
				; // Wait for enter key

			for (uint8 w = 0; w < PASSWORD_LENGTH; w++) {
    380e:	fe 01       	movw	r30, r28
    3810:	e5 56       	subi	r30, 0x65	; 101
    3812:	ff 4f       	sbci	r31, 0xFF	; 255
    3814:	10 82       	st	Z, r1
    3816:	8a c0       	rjmp	.+276    	; 0x392c <main+0x11f8>
				UART_sendByte(password[w]);
    3818:	fe 01       	movw	r30, r28
    381a:	e5 56       	subi	r30, 0x65	; 101
    381c:	ff 4f       	sbci	r31, 0xFF	; 255
    381e:	80 81       	ld	r24, Z
    3820:	28 2f       	mov	r18, r24
    3822:	30 e0       	ldi	r19, 0x00	; 0
    3824:	ce 01       	movw	r24, r28
    3826:	8b 54       	subi	r24, 0x4B	; 75
    3828:	9f 4f       	sbci	r25, 0xFF	; 255
    382a:	fc 01       	movw	r30, r24
    382c:	e2 0f       	add	r30, r18
    382e:	f3 1f       	adc	r31, r19
    3830:	80 81       	ld	r24, Z
    3832:	0e 94 53 0c 	call	0x18a6	; 0x18a6 <UART_sendByte>
    3836:	80 e0       	ldi	r24, 0x00	; 0
    3838:	90 e0       	ldi	r25, 0x00	; 0
    383a:	a8 e4       	ldi	r26, 0x48	; 72
    383c:	b2 e4       	ldi	r27, 0x42	; 66
    383e:	8f a3       	std	Y+39, r24	; 0x27
    3840:	98 a7       	std	Y+40, r25	; 0x28
    3842:	a9 a7       	std	Y+41, r26	; 0x29
    3844:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3846:	6f a1       	ldd	r22, Y+39	; 0x27
    3848:	78 a5       	ldd	r23, Y+40	; 0x28
    384a:	89 a5       	ldd	r24, Y+41	; 0x29
    384c:	9a a5       	ldd	r25, Y+42	; 0x2a
    384e:	20 e0       	ldi	r18, 0x00	; 0
    3850:	30 e0       	ldi	r19, 0x00	; 0
    3852:	4a ef       	ldi	r20, 0xFA	; 250
    3854:	54 e4       	ldi	r21, 0x44	; 68
    3856:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    385a:	dc 01       	movw	r26, r24
    385c:	cb 01       	movw	r24, r22
    385e:	8b a3       	std	Y+35, r24	; 0x23
    3860:	9c a3       	std	Y+36, r25	; 0x24
    3862:	ad a3       	std	Y+37, r26	; 0x25
    3864:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3866:	6b a1       	ldd	r22, Y+35	; 0x23
    3868:	7c a1       	ldd	r23, Y+36	; 0x24
    386a:	8d a1       	ldd	r24, Y+37	; 0x25
    386c:	9e a1       	ldd	r25, Y+38	; 0x26
    386e:	20 e0       	ldi	r18, 0x00	; 0
    3870:	30 e0       	ldi	r19, 0x00	; 0
    3872:	40 e8       	ldi	r20, 0x80	; 128
    3874:	5f e3       	ldi	r21, 0x3F	; 63
    3876:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    387a:	88 23       	and	r24, r24
    387c:	2c f4       	brge	.+10     	; 0x3888 <main+0x1154>
		__ticks = 1;
    387e:	81 e0       	ldi	r24, 0x01	; 1
    3880:	90 e0       	ldi	r25, 0x00	; 0
    3882:	9a a3       	std	Y+34, r25	; 0x22
    3884:	89 a3       	std	Y+33, r24	; 0x21
    3886:	3f c0       	rjmp	.+126    	; 0x3906 <main+0x11d2>
	else if (__tmp > 65535)
    3888:	6b a1       	ldd	r22, Y+35	; 0x23
    388a:	7c a1       	ldd	r23, Y+36	; 0x24
    388c:	8d a1       	ldd	r24, Y+37	; 0x25
    388e:	9e a1       	ldd	r25, Y+38	; 0x26
    3890:	20 e0       	ldi	r18, 0x00	; 0
    3892:	3f ef       	ldi	r19, 0xFF	; 255
    3894:	4f e7       	ldi	r20, 0x7F	; 127
    3896:	57 e4       	ldi	r21, 0x47	; 71
    3898:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    389c:	18 16       	cp	r1, r24
    389e:	4c f5       	brge	.+82     	; 0x38f2 <main+0x11be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    38a0:	6f a1       	ldd	r22, Y+39	; 0x27
    38a2:	78 a5       	ldd	r23, Y+40	; 0x28
    38a4:	89 a5       	ldd	r24, Y+41	; 0x29
    38a6:	9a a5       	ldd	r25, Y+42	; 0x2a
    38a8:	20 e0       	ldi	r18, 0x00	; 0
    38aa:	30 e0       	ldi	r19, 0x00	; 0
    38ac:	40 e2       	ldi	r20, 0x20	; 32
    38ae:	51 e4       	ldi	r21, 0x41	; 65
    38b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38b4:	dc 01       	movw	r26, r24
    38b6:	cb 01       	movw	r24, r22
    38b8:	bc 01       	movw	r22, r24
    38ba:	cd 01       	movw	r24, r26
    38bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38c0:	dc 01       	movw	r26, r24
    38c2:	cb 01       	movw	r24, r22
    38c4:	9a a3       	std	Y+34, r25	; 0x22
    38c6:	89 a3       	std	Y+33, r24	; 0x21
    38c8:	0f c0       	rjmp	.+30     	; 0x38e8 <main+0x11b4>
    38ca:	88 ec       	ldi	r24, 0xC8	; 200
    38cc:	90 e0       	ldi	r25, 0x00	; 0
    38ce:	98 a3       	std	Y+32, r25	; 0x20
    38d0:	8f 8f       	std	Y+31, r24	; 0x1f
    38d2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    38d4:	98 a1       	ldd	r25, Y+32	; 0x20
    38d6:	01 97       	sbiw	r24, 0x01	; 1
    38d8:	f1 f7       	brne	.-4      	; 0x38d6 <main+0x11a2>
    38da:	98 a3       	std	Y+32, r25	; 0x20
    38dc:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    38de:	89 a1       	ldd	r24, Y+33	; 0x21
    38e0:	9a a1       	ldd	r25, Y+34	; 0x22
    38e2:	01 97       	sbiw	r24, 0x01	; 1
    38e4:	9a a3       	std	Y+34, r25	; 0x22
    38e6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    38e8:	89 a1       	ldd	r24, Y+33	; 0x21
    38ea:	9a a1       	ldd	r25, Y+34	; 0x22
    38ec:	00 97       	sbiw	r24, 0x00	; 0
    38ee:	69 f7       	brne	.-38     	; 0x38ca <main+0x1196>
    38f0:	14 c0       	rjmp	.+40     	; 0x391a <main+0x11e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    38f2:	6b a1       	ldd	r22, Y+35	; 0x23
    38f4:	7c a1       	ldd	r23, Y+36	; 0x24
    38f6:	8d a1       	ldd	r24, Y+37	; 0x25
    38f8:	9e a1       	ldd	r25, Y+38	; 0x26
    38fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38fe:	dc 01       	movw	r26, r24
    3900:	cb 01       	movw	r24, r22
    3902:	9a a3       	std	Y+34, r25	; 0x22
    3904:	89 a3       	std	Y+33, r24	; 0x21
    3906:	89 a1       	ldd	r24, Y+33	; 0x21
    3908:	9a a1       	ldd	r25, Y+34	; 0x22
    390a:	9e 8f       	std	Y+30, r25	; 0x1e
    390c:	8d 8f       	std	Y+29, r24	; 0x1d
    390e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3910:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3912:	01 97       	sbiw	r24, 0x01	; 1
    3914:	f1 f7       	brne	.-4      	; 0x3912 <main+0x11de>
    3916:	9e 8f       	std	Y+30, r25	; 0x1e
    3918:	8d 8f       	std	Y+29, r24	; 0x1d
			}

			while (KEYPAD_getPressedKey() != ENTER_KEY)
				; // Wait for enter key

			for (uint8 w = 0; w < PASSWORD_LENGTH; w++) {
    391a:	de 01       	movw	r26, r28
    391c:	a5 56       	subi	r26, 0x65	; 101
    391e:	bf 4f       	sbci	r27, 0xFF	; 255
    3920:	fe 01       	movw	r30, r28
    3922:	e5 56       	subi	r30, 0x65	; 101
    3924:	ff 4f       	sbci	r31, 0xFF	; 255
    3926:	80 81       	ld	r24, Z
    3928:	8f 5f       	subi	r24, 0xFF	; 255
    392a:	8c 93       	st	X, r24
    392c:	fe 01       	movw	r30, r28
    392e:	e5 56       	subi	r30, 0x65	; 101
    3930:	ff 4f       	sbci	r31, 0xFF	; 255
    3932:	80 81       	ld	r24, Z
    3934:	85 30       	cpi	r24, 0x05	; 5
    3936:	08 f4       	brcc	.+2      	; 0x393a <main+0x1206>
    3938:	6f cf       	rjmp	.-290    	; 0x3818 <main+0x10e4>
				UART_sendByte(password[w]);
				_delay_ms(50);
			}

			result2 = UART_recieveByte();
    393a:	0e 94 6a 0c 	call	0x18d4	; 0x18d4 <UART_recieveByte>
    393e:	fe 01       	movw	r30, r28
    3940:	eb 55       	subi	r30, 0x5B	; 91
    3942:	ff 4f       	sbci	r31, 0xFF	; 255
    3944:	80 83       	st	Z, r24
    3946:	80 e0       	ldi	r24, 0x00	; 0
    3948:	90 e0       	ldi	r25, 0x00	; 0
    394a:	a8 e4       	ldi	r26, 0x48	; 72
    394c:	b2 e4       	ldi	r27, 0x42	; 66
    394e:	89 8f       	std	Y+25, r24	; 0x19
    3950:	9a 8f       	std	Y+26, r25	; 0x1a
    3952:	ab 8f       	std	Y+27, r26	; 0x1b
    3954:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3956:	69 8d       	ldd	r22, Y+25	; 0x19
    3958:	7a 8d       	ldd	r23, Y+26	; 0x1a
    395a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    395c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    395e:	20 e0       	ldi	r18, 0x00	; 0
    3960:	30 e0       	ldi	r19, 0x00	; 0
    3962:	4a ef       	ldi	r20, 0xFA	; 250
    3964:	54 e4       	ldi	r21, 0x44	; 68
    3966:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    396a:	dc 01       	movw	r26, r24
    396c:	cb 01       	movw	r24, r22
    396e:	8d 8b       	std	Y+21, r24	; 0x15
    3970:	9e 8b       	std	Y+22, r25	; 0x16
    3972:	af 8b       	std	Y+23, r26	; 0x17
    3974:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3976:	6d 89       	ldd	r22, Y+21	; 0x15
    3978:	7e 89       	ldd	r23, Y+22	; 0x16
    397a:	8f 89       	ldd	r24, Y+23	; 0x17
    397c:	98 8d       	ldd	r25, Y+24	; 0x18
    397e:	20 e0       	ldi	r18, 0x00	; 0
    3980:	30 e0       	ldi	r19, 0x00	; 0
    3982:	40 e8       	ldi	r20, 0x80	; 128
    3984:	5f e3       	ldi	r21, 0x3F	; 63
    3986:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    398a:	88 23       	and	r24, r24
    398c:	2c f4       	brge	.+10     	; 0x3998 <main+0x1264>
		__ticks = 1;
    398e:	81 e0       	ldi	r24, 0x01	; 1
    3990:	90 e0       	ldi	r25, 0x00	; 0
    3992:	9c 8b       	std	Y+20, r25	; 0x14
    3994:	8b 8b       	std	Y+19, r24	; 0x13
    3996:	3f c0       	rjmp	.+126    	; 0x3a16 <main+0x12e2>
	else if (__tmp > 65535)
    3998:	6d 89       	ldd	r22, Y+21	; 0x15
    399a:	7e 89       	ldd	r23, Y+22	; 0x16
    399c:	8f 89       	ldd	r24, Y+23	; 0x17
    399e:	98 8d       	ldd	r25, Y+24	; 0x18
    39a0:	20 e0       	ldi	r18, 0x00	; 0
    39a2:	3f ef       	ldi	r19, 0xFF	; 255
    39a4:	4f e7       	ldi	r20, 0x7F	; 127
    39a6:	57 e4       	ldi	r21, 0x47	; 71
    39a8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    39ac:	18 16       	cp	r1, r24
    39ae:	4c f5       	brge	.+82     	; 0x3a02 <main+0x12ce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    39b0:	69 8d       	ldd	r22, Y+25	; 0x19
    39b2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    39b4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    39b6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    39b8:	20 e0       	ldi	r18, 0x00	; 0
    39ba:	30 e0       	ldi	r19, 0x00	; 0
    39bc:	40 e2       	ldi	r20, 0x20	; 32
    39be:	51 e4       	ldi	r21, 0x41	; 65
    39c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39c4:	dc 01       	movw	r26, r24
    39c6:	cb 01       	movw	r24, r22
    39c8:	bc 01       	movw	r22, r24
    39ca:	cd 01       	movw	r24, r26
    39cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39d0:	dc 01       	movw	r26, r24
    39d2:	cb 01       	movw	r24, r22
    39d4:	9c 8b       	std	Y+20, r25	; 0x14
    39d6:	8b 8b       	std	Y+19, r24	; 0x13
    39d8:	0f c0       	rjmp	.+30     	; 0x39f8 <main+0x12c4>
    39da:	88 ec       	ldi	r24, 0xC8	; 200
    39dc:	90 e0       	ldi	r25, 0x00	; 0
    39de:	9a 8b       	std	Y+18, r25	; 0x12
    39e0:	89 8b       	std	Y+17, r24	; 0x11
    39e2:	89 89       	ldd	r24, Y+17	; 0x11
    39e4:	9a 89       	ldd	r25, Y+18	; 0x12
    39e6:	01 97       	sbiw	r24, 0x01	; 1
    39e8:	f1 f7       	brne	.-4      	; 0x39e6 <main+0x12b2>
    39ea:	9a 8b       	std	Y+18, r25	; 0x12
    39ec:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    39ee:	8b 89       	ldd	r24, Y+19	; 0x13
    39f0:	9c 89       	ldd	r25, Y+20	; 0x14
    39f2:	01 97       	sbiw	r24, 0x01	; 1
    39f4:	9c 8b       	std	Y+20, r25	; 0x14
    39f6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    39f8:	8b 89       	ldd	r24, Y+19	; 0x13
    39fa:	9c 89       	ldd	r25, Y+20	; 0x14
    39fc:	00 97       	sbiw	r24, 0x00	; 0
    39fe:	69 f7       	brne	.-38     	; 0x39da <main+0x12a6>
    3a00:	14 c0       	rjmp	.+40     	; 0x3a2a <main+0x12f6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a02:	6d 89       	ldd	r22, Y+21	; 0x15
    3a04:	7e 89       	ldd	r23, Y+22	; 0x16
    3a06:	8f 89       	ldd	r24, Y+23	; 0x17
    3a08:	98 8d       	ldd	r25, Y+24	; 0x18
    3a0a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a0e:	dc 01       	movw	r26, r24
    3a10:	cb 01       	movw	r24, r22
    3a12:	9c 8b       	std	Y+20, r25	; 0x14
    3a14:	8b 8b       	std	Y+19, r24	; 0x13
    3a16:	8b 89       	ldd	r24, Y+19	; 0x13
    3a18:	9c 89       	ldd	r25, Y+20	; 0x14
    3a1a:	98 8b       	std	Y+16, r25	; 0x10
    3a1c:	8f 87       	std	Y+15, r24	; 0x0f
    3a1e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3a20:	98 89       	ldd	r25, Y+16	; 0x10
    3a22:	01 97       	sbiw	r24, 0x01	; 1
    3a24:	f1 f7       	brne	.-4      	; 0x3a22 <main+0x12ee>
    3a26:	98 8b       	std	Y+16, r25	; 0x10
    3a28:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(50);
			if (result2 == 1) {
    3a2a:	fe 01       	movw	r30, r28
    3a2c:	eb 55       	subi	r30, 0x5B	; 91
    3a2e:	ff 4f       	sbci	r31, 0xFF	; 255
    3a30:	80 81       	ld	r24, Z
    3a32:	81 30       	cpi	r24, 0x01	; 1
    3a34:	31 f4       	brne	.+12     	; 0x3a42 <main+0x130e>
				attempt_count = 0;
    3a36:	10 92 44 01 	sts	0x0144, r1
				state = ENTER_PASSWORD; // Go to new password entry
    3a3a:	10 92 42 01 	sts	0x0142, r1
    3a3e:	0c 94 65 14 	jmp	0x28ca	; 0x28ca <main+0x196>
			} else {
				LCD_clearScreen();
    3a42:	0e 94 90 13 	call	0x2720	; 0x2720 <LCD_clearScreen>
				LCD_displayString("Incorrect Pass");
    3a46:	8d ee       	ldi	r24, 0xED	; 237
    3a48:	90 e0       	ldi	r25, 0x00	; 0
    3a4a:	0e 94 e9 12 	call	0x25d2	; 0x25d2 <LCD_displayString>
    3a4e:	80 e0       	ldi	r24, 0x00	; 0
    3a50:	90 e0       	ldi	r25, 0x00	; 0
    3a52:	aa ef       	ldi	r26, 0xFA	; 250
    3a54:	b3 e4       	ldi	r27, 0x43	; 67
    3a56:	8b 87       	std	Y+11, r24	; 0x0b
    3a58:	9c 87       	std	Y+12, r25	; 0x0c
    3a5a:	ad 87       	std	Y+13, r26	; 0x0d
    3a5c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a5e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3a60:	7c 85       	ldd	r23, Y+12	; 0x0c
    3a62:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a64:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a66:	20 e0       	ldi	r18, 0x00	; 0
    3a68:	30 e0       	ldi	r19, 0x00	; 0
    3a6a:	4a ef       	ldi	r20, 0xFA	; 250
    3a6c:	54 e4       	ldi	r21, 0x44	; 68
    3a6e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a72:	dc 01       	movw	r26, r24
    3a74:	cb 01       	movw	r24, r22
    3a76:	8f 83       	std	Y+7, r24	; 0x07
    3a78:	98 87       	std	Y+8, r25	; 0x08
    3a7a:	a9 87       	std	Y+9, r26	; 0x09
    3a7c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3a7e:	6f 81       	ldd	r22, Y+7	; 0x07
    3a80:	78 85       	ldd	r23, Y+8	; 0x08
    3a82:	89 85       	ldd	r24, Y+9	; 0x09
    3a84:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a86:	20 e0       	ldi	r18, 0x00	; 0
    3a88:	30 e0       	ldi	r19, 0x00	; 0
    3a8a:	40 e8       	ldi	r20, 0x80	; 128
    3a8c:	5f e3       	ldi	r21, 0x3F	; 63
    3a8e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3a92:	88 23       	and	r24, r24
    3a94:	2c f4       	brge	.+10     	; 0x3aa0 <main+0x136c>
		__ticks = 1;
    3a96:	81 e0       	ldi	r24, 0x01	; 1
    3a98:	90 e0       	ldi	r25, 0x00	; 0
    3a9a:	9e 83       	std	Y+6, r25	; 0x06
    3a9c:	8d 83       	std	Y+5, r24	; 0x05
    3a9e:	3f c0       	rjmp	.+126    	; 0x3b1e <main+0x13ea>
	else if (__tmp > 65535)
    3aa0:	6f 81       	ldd	r22, Y+7	; 0x07
    3aa2:	78 85       	ldd	r23, Y+8	; 0x08
    3aa4:	89 85       	ldd	r24, Y+9	; 0x09
    3aa6:	9a 85       	ldd	r25, Y+10	; 0x0a
    3aa8:	20 e0       	ldi	r18, 0x00	; 0
    3aaa:	3f ef       	ldi	r19, 0xFF	; 255
    3aac:	4f e7       	ldi	r20, 0x7F	; 127
    3aae:	57 e4       	ldi	r21, 0x47	; 71
    3ab0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3ab4:	18 16       	cp	r1, r24
    3ab6:	4c f5       	brge	.+82     	; 0x3b0a <main+0x13d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ab8:	6b 85       	ldd	r22, Y+11	; 0x0b
    3aba:	7c 85       	ldd	r23, Y+12	; 0x0c
    3abc:	8d 85       	ldd	r24, Y+13	; 0x0d
    3abe:	9e 85       	ldd	r25, Y+14	; 0x0e
    3ac0:	20 e0       	ldi	r18, 0x00	; 0
    3ac2:	30 e0       	ldi	r19, 0x00	; 0
    3ac4:	40 e2       	ldi	r20, 0x20	; 32
    3ac6:	51 e4       	ldi	r21, 0x41	; 65
    3ac8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3acc:	dc 01       	movw	r26, r24
    3ace:	cb 01       	movw	r24, r22
    3ad0:	bc 01       	movw	r22, r24
    3ad2:	cd 01       	movw	r24, r26
    3ad4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ad8:	dc 01       	movw	r26, r24
    3ada:	cb 01       	movw	r24, r22
    3adc:	9e 83       	std	Y+6, r25	; 0x06
    3ade:	8d 83       	std	Y+5, r24	; 0x05
    3ae0:	0f c0       	rjmp	.+30     	; 0x3b00 <main+0x13cc>
    3ae2:	88 ec       	ldi	r24, 0xC8	; 200
    3ae4:	90 e0       	ldi	r25, 0x00	; 0
    3ae6:	9c 83       	std	Y+4, r25	; 0x04
    3ae8:	8b 83       	std	Y+3, r24	; 0x03
    3aea:	8b 81       	ldd	r24, Y+3	; 0x03
    3aec:	9c 81       	ldd	r25, Y+4	; 0x04
    3aee:	01 97       	sbiw	r24, 0x01	; 1
    3af0:	f1 f7       	brne	.-4      	; 0x3aee <main+0x13ba>
    3af2:	9c 83       	std	Y+4, r25	; 0x04
    3af4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3af6:	8d 81       	ldd	r24, Y+5	; 0x05
    3af8:	9e 81       	ldd	r25, Y+6	; 0x06
    3afa:	01 97       	sbiw	r24, 0x01	; 1
    3afc:	9e 83       	std	Y+6, r25	; 0x06
    3afe:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b00:	8d 81       	ldd	r24, Y+5	; 0x05
    3b02:	9e 81       	ldd	r25, Y+6	; 0x06
    3b04:	00 97       	sbiw	r24, 0x00	; 0
    3b06:	69 f7       	brne	.-38     	; 0x3ae2 <main+0x13ae>
    3b08:	14 c0       	rjmp	.+40     	; 0x3b32 <main+0x13fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b0a:	6f 81       	ldd	r22, Y+7	; 0x07
    3b0c:	78 85       	ldd	r23, Y+8	; 0x08
    3b0e:	89 85       	ldd	r24, Y+9	; 0x09
    3b10:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b16:	dc 01       	movw	r26, r24
    3b18:	cb 01       	movw	r24, r22
    3b1a:	9e 83       	std	Y+6, r25	; 0x06
    3b1c:	8d 83       	std	Y+5, r24	; 0x05
    3b1e:	8d 81       	ldd	r24, Y+5	; 0x05
    3b20:	9e 81       	ldd	r25, Y+6	; 0x06
    3b22:	9a 83       	std	Y+2, r25	; 0x02
    3b24:	89 83       	std	Y+1, r24	; 0x01
    3b26:	89 81       	ldd	r24, Y+1	; 0x01
    3b28:	9a 81       	ldd	r25, Y+2	; 0x02
    3b2a:	01 97       	sbiw	r24, 0x01	; 1
    3b2c:	f1 f7       	brne	.-4      	; 0x3b2a <main+0x13f6>
    3b2e:	9a 83       	std	Y+2, r25	; 0x02
    3b30:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(500);

				attempt_count++;
    3b32:	80 91 44 01 	lds	r24, 0x0144
    3b36:	8f 5f       	subi	r24, 0xFF	; 255
    3b38:	80 93 44 01 	sts	0x0144, r24
				if (attempt_count >= MAX_ATTEMPTS) {
    3b3c:	80 91 44 01 	lds	r24, 0x0144
    3b40:	83 30       	cpi	r24, 0x03	; 3
    3b42:	b8 f0       	brcs	.+46     	; 0x3b72 <main+0x143e>
					LCD_clearScreen();
    3b44:	0e 94 90 13 	call	0x2720	; 0x2720 <LCD_clearScreen>
					LCD_displayString("System Locked");
    3b48:	8c ef       	ldi	r24, 0xFC	; 252
    3b4a:	90 e0       	ldi	r25, 0x00	; 0
    3b4c:	0e 94 e9 12 	call	0x25d2	; 0x25d2 <LCD_displayString>
					attempt_count = 0; // Reset attempt count after lockout
    3b50:	10 92 44 01 	sts	0x0144, r1
					tick = 0;
    3b54:	10 92 43 01 	sts	0x0143, r1
					Timer_start(TIMER1, F_CPU_1024);
    3b58:	81 e0       	ldi	r24, 0x01	; 1
    3b5a:	65 e0       	ldi	r22, 0x05	; 5
    3b5c:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <Timer_start>
					while (tick <= LOCKOUT_TIME);
    3b60:	80 91 43 01 	lds	r24, 0x0143
    3b64:	8d 33       	cpi	r24, 0x3D	; 61
    3b66:	e0 f3       	brcs	.-8      	; 0x3b60 <main+0x142c>
					state = MAIN_OPTIONS;
    3b68:	83 e0       	ldi	r24, 0x03	; 3
    3b6a:	80 93 42 01 	sts	0x0142, r24
    3b6e:	0c 94 65 14 	jmp	0x28ca	; 0x28ca <main+0x196>
				} else {
					state = CHANGE_PASSWORD; // Retry password entry for change
    3b72:	85 e0       	ldi	r24, 0x05	; 5
    3b74:	80 93 42 01 	sts	0x0142, r24
    3b78:	0c 94 65 14 	jmp	0x28ca	; 0x28ca <main+0x196>

00003b7c <timer_callback>:
			break;
		}
	}
}

void timer_callback() {
    3b7c:	df 93       	push	r29
    3b7e:	cf 93       	push	r28
    3b80:	cd b7       	in	r28, 0x3d	; 61
    3b82:	de b7       	in	r29, 0x3e	; 62
	tick++;
    3b84:	80 91 43 01 	lds	r24, 0x0143
    3b88:	8f 5f       	subi	r24, 0xFF	; 255
    3b8a:	80 93 43 01 	sts	0x0143, r24
}
    3b8e:	cf 91       	pop	r28
    3b90:	df 91       	pop	r29
    3b92:	08 95       	ret

00003b94 <__udivmodsi4>:
    3b94:	a1 e2       	ldi	r26, 0x21	; 33
    3b96:	1a 2e       	mov	r1, r26
    3b98:	aa 1b       	sub	r26, r26
    3b9a:	bb 1b       	sub	r27, r27
    3b9c:	fd 01       	movw	r30, r26
    3b9e:	0d c0       	rjmp	.+26     	; 0x3bba <__udivmodsi4_ep>

00003ba0 <__udivmodsi4_loop>:
    3ba0:	aa 1f       	adc	r26, r26
    3ba2:	bb 1f       	adc	r27, r27
    3ba4:	ee 1f       	adc	r30, r30
    3ba6:	ff 1f       	adc	r31, r31
    3ba8:	a2 17       	cp	r26, r18
    3baa:	b3 07       	cpc	r27, r19
    3bac:	e4 07       	cpc	r30, r20
    3bae:	f5 07       	cpc	r31, r21
    3bb0:	20 f0       	brcs	.+8      	; 0x3bba <__udivmodsi4_ep>
    3bb2:	a2 1b       	sub	r26, r18
    3bb4:	b3 0b       	sbc	r27, r19
    3bb6:	e4 0b       	sbc	r30, r20
    3bb8:	f5 0b       	sbc	r31, r21

00003bba <__udivmodsi4_ep>:
    3bba:	66 1f       	adc	r22, r22
    3bbc:	77 1f       	adc	r23, r23
    3bbe:	88 1f       	adc	r24, r24
    3bc0:	99 1f       	adc	r25, r25
    3bc2:	1a 94       	dec	r1
    3bc4:	69 f7       	brne	.-38     	; 0x3ba0 <__udivmodsi4_loop>
    3bc6:	60 95       	com	r22
    3bc8:	70 95       	com	r23
    3bca:	80 95       	com	r24
    3bcc:	90 95       	com	r25
    3bce:	9b 01       	movw	r18, r22
    3bd0:	ac 01       	movw	r20, r24
    3bd2:	bd 01       	movw	r22, r26
    3bd4:	cf 01       	movw	r24, r30
    3bd6:	08 95       	ret

00003bd8 <__prologue_saves__>:
    3bd8:	2f 92       	push	r2
    3bda:	3f 92       	push	r3
    3bdc:	4f 92       	push	r4
    3bde:	5f 92       	push	r5
    3be0:	6f 92       	push	r6
    3be2:	7f 92       	push	r7
    3be4:	8f 92       	push	r8
    3be6:	9f 92       	push	r9
    3be8:	af 92       	push	r10
    3bea:	bf 92       	push	r11
    3bec:	cf 92       	push	r12
    3bee:	df 92       	push	r13
    3bf0:	ef 92       	push	r14
    3bf2:	ff 92       	push	r15
    3bf4:	0f 93       	push	r16
    3bf6:	1f 93       	push	r17
    3bf8:	cf 93       	push	r28
    3bfa:	df 93       	push	r29
    3bfc:	cd b7       	in	r28, 0x3d	; 61
    3bfe:	de b7       	in	r29, 0x3e	; 62
    3c00:	ca 1b       	sub	r28, r26
    3c02:	db 0b       	sbc	r29, r27
    3c04:	0f b6       	in	r0, 0x3f	; 63
    3c06:	f8 94       	cli
    3c08:	de bf       	out	0x3e, r29	; 62
    3c0a:	0f be       	out	0x3f, r0	; 63
    3c0c:	cd bf       	out	0x3d, r28	; 61
    3c0e:	09 94       	ijmp

00003c10 <__epilogue_restores__>:
    3c10:	2a 88       	ldd	r2, Y+18	; 0x12
    3c12:	39 88       	ldd	r3, Y+17	; 0x11
    3c14:	48 88       	ldd	r4, Y+16	; 0x10
    3c16:	5f 84       	ldd	r5, Y+15	; 0x0f
    3c18:	6e 84       	ldd	r6, Y+14	; 0x0e
    3c1a:	7d 84       	ldd	r7, Y+13	; 0x0d
    3c1c:	8c 84       	ldd	r8, Y+12	; 0x0c
    3c1e:	9b 84       	ldd	r9, Y+11	; 0x0b
    3c20:	aa 84       	ldd	r10, Y+10	; 0x0a
    3c22:	b9 84       	ldd	r11, Y+9	; 0x09
    3c24:	c8 84       	ldd	r12, Y+8	; 0x08
    3c26:	df 80       	ldd	r13, Y+7	; 0x07
    3c28:	ee 80       	ldd	r14, Y+6	; 0x06
    3c2a:	fd 80       	ldd	r15, Y+5	; 0x05
    3c2c:	0c 81       	ldd	r16, Y+4	; 0x04
    3c2e:	1b 81       	ldd	r17, Y+3	; 0x03
    3c30:	aa 81       	ldd	r26, Y+2	; 0x02
    3c32:	b9 81       	ldd	r27, Y+1	; 0x01
    3c34:	ce 0f       	add	r28, r30
    3c36:	d1 1d       	adc	r29, r1
    3c38:	0f b6       	in	r0, 0x3f	; 63
    3c3a:	f8 94       	cli
    3c3c:	de bf       	out	0x3e, r29	; 62
    3c3e:	0f be       	out	0x3f, r0	; 63
    3c40:	cd bf       	out	0x3d, r28	; 61
    3c42:	ed 01       	movw	r28, r26
    3c44:	08 95       	ret

00003c46 <itoa>:
    3c46:	fb 01       	movw	r30, r22
    3c48:	9f 01       	movw	r18, r30
    3c4a:	e8 94       	clt
    3c4c:	42 30       	cpi	r20, 0x02	; 2
    3c4e:	c4 f0       	brlt	.+48     	; 0x3c80 <itoa+0x3a>
    3c50:	45 32       	cpi	r20, 0x25	; 37
    3c52:	b4 f4       	brge	.+44     	; 0x3c80 <itoa+0x3a>
    3c54:	4a 30       	cpi	r20, 0x0A	; 10
    3c56:	29 f4       	brne	.+10     	; 0x3c62 <itoa+0x1c>
    3c58:	97 fb       	bst	r25, 7
    3c5a:	1e f4       	brtc	.+6      	; 0x3c62 <itoa+0x1c>
    3c5c:	90 95       	com	r25
    3c5e:	81 95       	neg	r24
    3c60:	9f 4f       	sbci	r25, 0xFF	; 255
    3c62:	64 2f       	mov	r22, r20
    3c64:	77 27       	eor	r23, r23
    3c66:	0e 94 54 1e 	call	0x3ca8	; 0x3ca8 <__udivmodhi4>
    3c6a:	80 5d       	subi	r24, 0xD0	; 208
    3c6c:	8a 33       	cpi	r24, 0x3A	; 58
    3c6e:	0c f0       	brlt	.+2      	; 0x3c72 <itoa+0x2c>
    3c70:	89 5d       	subi	r24, 0xD9	; 217
    3c72:	81 93       	st	Z+, r24
    3c74:	cb 01       	movw	r24, r22
    3c76:	00 97       	sbiw	r24, 0x00	; 0
    3c78:	a1 f7       	brne	.-24     	; 0x3c62 <itoa+0x1c>
    3c7a:	16 f4       	brtc	.+4      	; 0x3c80 <itoa+0x3a>
    3c7c:	5d e2       	ldi	r21, 0x2D	; 45
    3c7e:	51 93       	st	Z+, r21
    3c80:	10 82       	st	Z, r1
    3c82:	c9 01       	movw	r24, r18
    3c84:	0c 94 44 1e 	jmp	0x3c88	; 0x3c88 <strrev>

00003c88 <strrev>:
    3c88:	dc 01       	movw	r26, r24
    3c8a:	fc 01       	movw	r30, r24
    3c8c:	67 2f       	mov	r22, r23
    3c8e:	71 91       	ld	r23, Z+
    3c90:	77 23       	and	r23, r23
    3c92:	e1 f7       	brne	.-8      	; 0x3c8c <strrev+0x4>
    3c94:	32 97       	sbiw	r30, 0x02	; 2
    3c96:	04 c0       	rjmp	.+8      	; 0x3ca0 <strrev+0x18>
    3c98:	7c 91       	ld	r23, X
    3c9a:	6d 93       	st	X+, r22
    3c9c:	70 83       	st	Z, r23
    3c9e:	62 91       	ld	r22, -Z
    3ca0:	ae 17       	cp	r26, r30
    3ca2:	bf 07       	cpc	r27, r31
    3ca4:	c8 f3       	brcs	.-14     	; 0x3c98 <strrev+0x10>
    3ca6:	08 95       	ret

00003ca8 <__udivmodhi4>:
    3ca8:	aa 1b       	sub	r26, r26
    3caa:	bb 1b       	sub	r27, r27
    3cac:	51 e1       	ldi	r21, 0x11	; 17
    3cae:	07 c0       	rjmp	.+14     	; 0x3cbe <__udivmodhi4_ep>

00003cb0 <__udivmodhi4_loop>:
    3cb0:	aa 1f       	adc	r26, r26
    3cb2:	bb 1f       	adc	r27, r27
    3cb4:	a6 17       	cp	r26, r22
    3cb6:	b7 07       	cpc	r27, r23
    3cb8:	10 f0       	brcs	.+4      	; 0x3cbe <__udivmodhi4_ep>
    3cba:	a6 1b       	sub	r26, r22
    3cbc:	b7 0b       	sbc	r27, r23

00003cbe <__udivmodhi4_ep>:
    3cbe:	88 1f       	adc	r24, r24
    3cc0:	99 1f       	adc	r25, r25
    3cc2:	5a 95       	dec	r21
    3cc4:	a9 f7       	brne	.-22     	; 0x3cb0 <__udivmodhi4_loop>
    3cc6:	80 95       	com	r24
    3cc8:	90 95       	com	r25
    3cca:	bc 01       	movw	r22, r24
    3ccc:	cd 01       	movw	r24, r26
    3cce:	08 95       	ret

00003cd0 <_exit>:
    3cd0:	f8 94       	cli

00003cd2 <__stop_program>:
    3cd2:	ff cf       	rjmp	.-2      	; 0x3cd2 <__stop_program>
